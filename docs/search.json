[
  {
    "objectID": "cloud-paradigm.html",
    "href": "cloud-paradigm.html",
    "title": "Cloud Paradigm",
    "section": "",
    "text": "Slides that introduce NASA Earthdata Cloud & the Cloud Paradigm."
  },
  {
    "objectID": "coc.html",
    "href": "coc.html",
    "title": "Code of Conduct",
    "section": "",
    "text": "The ITCOocean Hack2week is dedicated to providing a harassment-free learning experience for everyone regardless of gender, gender identity and expression, sexual orientation, disability, physical appearance, body size, race, age or religion. We do not tolerate harassment of participants in any form. Sexual language and imagery is not appropriate either in-person or virtual form, including the Discussion boards and Slack workspace. Participants (including event volunteers and organizers) violating these rules may be sanctioned or expelled from the event at the discretion of the organizers."
  },
  {
    "objectID": "coc.html#definition-of-harassment",
    "href": "coc.html#definition-of-harassment",
    "title": "Code of Conduct",
    "section": "Definition of Harassment",
    "text": "Definition of Harassment\nHarassment includes, but is not limited to:\n\nVerbal comments that reinforce social structures of domination related to gender, gender identity and expression, sexual orientation, disability, physical appearance, body size, race, age, religion.\nSexual images in public spaces\nDeliberate intimidation, stalking, or following\nHarassing photography or recording\nSustained disruption of talks or other events\nInappropriate physical contact\nUnwelcome sexual attention\nAdvocating for, or encouraging, any of the above behavior"
  },
  {
    "objectID": "coc.html#expectations",
    "href": "coc.html#expectations",
    "title": "Code of Conduct",
    "section": "Expectations",
    "text": "Expectations\nParticipants asked to stop any harassing behavior are expected to comply immediately. If a participant engages in harassing behavior, the organizers retain the right to take any actions to keep the event a welcoming environment for all participants. This includes warning the offender or expulsion from the event.\nThe organizers may take action to redress anything designed to, or with the clear impact of, disrupting the event or making the environment hostile for any participants. We expect participants to follow these rules at all the event venues and event-related social activities."
  },
  {
    "objectID": "coc.html#reporting-a-violation",
    "href": "coc.html#reporting-a-violation",
    "title": "Code of Conduct",
    "section": "Reporting a violation",
    "text": "Reporting a violation\nHarassment and other code of conduct violations reduce the value of the event for everyone. If someone makes you or anyone else feel unsafe or unwelcome, please report it as soon as possible.\nIf you feel comfortable contacting someone associated with our event, you may speak with one of the event organizers in person or contact an organizer on a private Slack channel."
  },
  {
    "objectID": "content/01-github.html#what-is-github",
    "href": "content/01-github.html#what-is-github",
    "title": "GitHub - Lecture 1",
    "section": "What is GitHub?",
    "text": "What is GitHub?\nGitHub is a hosting service for Git repositories, enabling us to share code across teams in a web environment."
  },
  {
    "objectID": "content/01-github.html#why-do-i-need-a-github-account",
    "href": "content/01-github.html#why-do-i-need-a-github-account",
    "title": "GitHub - Lecture 1",
    "section": "Why do I need a GitHub account?",
    "text": "Why do I need a GitHub account?\n\nYour GitHub accounts will give you access to the hackweek cloud computing resources\nAll hackweek tutorials will be shared on GitHub\nAll project teams will use GitHub to collaborate and work together on their code\nGitHub is widely used to share code across the geosciences. If you don‚Äôt know how to use GitHub, you are missing out on a wealth of community shared knowledge."
  },
  {
    "objectID": "content/01-github.html#creating-a-github-account",
    "href": "content/01-github.html#creating-a-github-account",
    "title": "GitHub - Lecture 1",
    "section": "Creating a GitHub account",
    "text": "Creating a GitHub account\nGo to GitHub. Next, enter your email address and click on the green ‚ÄòSign up for GitHub‚Äô button. You will need to answer a few required questions in the following dialogs."
  },
  {
    "objectID": "content/01-github.html#following-your-github-activity",
    "href": "content/01-github.html#following-your-github-activity",
    "title": "GitHub - Lecture 1",
    "section": "Following your GitHub activity",
    "text": "Following your GitHub activity\nManaging GitHub notifications is important and you probably don‚Äôt want all notifications going to email. Only have things you really don‚Äôt want to miss going to notifications.\n\nNotification dashboard: https://github.com/notifications\nChanging your notifications settings\nNews dashboard https://github.com/dashboard"
  },
  {
    "objectID": "content/01-github.html#repositories",
    "href": "content/01-github.html#repositories",
    "title": "GitHub - Lecture 1",
    "section": "Repositories",
    "text": "Repositories\nEach repository is a container for a specific subset of material. GitHub is widely used to share code and tutorials! Let‚Äôs explore the content for\nMachine Learning in Environment Science, an recent course by Ben Best at University of California Santa Barbara. GitHub repo\n\nActivity\n\nLook at files\nDownload a file\nLook at files at an earlier time\nLook at what changes have been made"
  },
  {
    "objectID": "content/01-github.html#create-a-repository",
    "href": "content/01-github.html#create-a-repository",
    "title": "GitHub - Lecture 1",
    "section": "Create a repository",
    "text": "Create a repository\n\n\n\n\n\n\nCore skill\n\n\n\nCreate a new repository in GitHub by\n\nNavigating to your user profile page (click on your image in top right)\nClick the repositories tab in your profile\nClick the green New button and add a README\nAdd files\n\n\n\n\nActivity\nCreate a profile page for your GitHub account. Already have one? Be a helper for this exercise!\n\nCreate a repository and give it your username as the name. For example, mine would be named eeholmes\nAdd a file by clicking ‚ÄúAdd File‚Äù and name the file ‚ÄúREADME.md‚Äù. This will become a profile page for your GitHub account.\nAdd some text to the README. You can use this as a template or use one of the many examples of profile READMEs that you can copy here: https://github.com/abhisheknaiidu/awesome-github-profile-readme\n\nNote you can copy and paste in DevanƒÅgarƒ´ script (for example ‡§Æ‡§π‡§æ‡§∏‡§æ‡§ó‡§∞) into the markdown.\nExample profile README\n### Your Name \n\n- :school: I'm a student at **XYZ** in this city.\n- üî≠ I‚Äôm currently working on  **XYZ**\n- :game: When I am not working, I like to **XYZ**\n- At the Hackweek, ask me about &lt;some areas of expertise&gt;\n\n- üåê Visit my [website](https://https://hackweek-itcoocean.github.io//) for complete background and contact."
  },
  {
    "objectID": "content/01-intro-to-cloud-geoscience.html#open-infrastructure-for-geoscience",
    "href": "content/01-intro-to-cloud-geoscience.html#open-infrastructure-for-geoscience",
    "title": "Geoscience in the Cloud",
    "section": "Open infrastructure for geoscience",
    "text": "Open infrastructure for geoscience\nLet‚Äôs start by watch a short video by James Colliander, founder of 2i2c which is supporting the ITCOocean JupyterHub. 2i2c is working to open access to cloud computing. ITCOocean is the first 2i2c JupyterHub in India (actually first in the global south)."
  },
  {
    "objectID": "content/01-intro-to-cloud-geoscience.html#why-are-we-using-a-cloud-environment",
    "href": "content/01-intro-to-cloud-geoscience.html#why-are-we-using-a-cloud-environment",
    "title": "Geoscience in the Cloud",
    "section": "Why are we using a cloud environment?",
    "text": "Why are we using a cloud environment?\n‚ÄúAnyone working with large-scale Earth System data today faces the same general problems:\n\nThe data we want to work with are huge (typical analyses involve several TB at least)\nThe data we need are produced and distributed by many different organizations (NASA, NOAA, ESGF, Copernicus, etc.)\nWe want to apply a wide range of different analysis methodologies to the data, from simple statistics to signal processing to machine learning.\n\nThe community is waking up to the idea that we can‚Äôt simply expect scientists to download all this data to their personal computers for processing.‚Äù\nRyan Abernathey, Pangeo Project.\n\n\n\nDownload-based workflow. From Abernathey, Ryan (2020): Data Access Modes in Science\n\n\n\nPangeo Link to tutorial on Pangeo ecosystem"
  },
  {
    "objectID": "content/01-intro-to-cloud-geoscience.html#cloud-optimized-geospatial-data",
    "href": "content/01-intro-to-cloud-geoscience.html#cloud-optimized-geospatial-data",
    "title": "Geoscience in the Cloud",
    "section": "Cloud optimized geospatial data",
    "text": "Cloud optimized geospatial data\n\nMethods for Generating and Testing Cloud-Optimized Geospatial Formats"
  },
  {
    "objectID": "content/01-intro-to-cloud-geoscience.html#references",
    "href": "content/01-intro-to-cloud-geoscience.html#references",
    "title": "Geoscience in the Cloud",
    "section": "References",
    "text": "References\n\nClosed Platforms vs.¬†Open Architectures for Cloud-Native Earth System Analytics\nWhy Jupyter is data scientists‚Äô computational notebook of choice\nNASA MAAP Project"
  },
  {
    "objectID": "content/01-intro-to-jupyterhub.html#log-into-the-jupyterhub",
    "href": "content/01-intro-to-jupyterhub.html#log-into-the-jupyterhub",
    "title": "Intro to JupyterHubs",
    "section": "Log into the JupyterHub",
    "text": "Log into the JupyterHub\nGo to https://itcoocean.2i2c.cloud/. Click ‚ÄúLogin to continue‚Äù. You will be asked to log in with your GitHub Account, if you are not logged in already.\n\n\n\nITCOocean JupyterHub Login\n\n\n\nImage type: Python or R\nNext you select your image type. We have two different R images and two Python images. The default is ‚ÄúGeospatial R with SDM‚Äù. This is an image with geospatial libraries and species distribution libraries.\n\n\nVirtual Machine size\nYou‚Äôll see something similar to this that allows you to choose a large virtual machine if your project needs it. For the tutorials, you will only need the Small Virtual Machine. Please only choose the large machines if you run out of RAM as the larger machines cost us more.\n\n\n\nMachine Profiles\n\n\n\n\nStart up\nAfter we select our server type and click on start, JupyterHub will allocate our instance using Amazon Web Services (AWS). This may take several minutes.\n\n\n\nJupyterhub Spawning"
  },
  {
    "objectID": "content/01-intro-to-jupyterhub.html#open-rstudio",
    "href": "content/01-intro-to-jupyterhub.html#open-rstudio",
    "title": "Intro to JupyterHubs",
    "section": "Open RStudio",
    "text": "Open RStudio\nWhen you are in the Jupyter Lab tab (note the Jupyter Logo), you will see a Launcher page. If you don‚Äôt see this, go to File &gt; New Launcher.\n\n\n\nJupyterhub Launcher\n\n\n\nOpen RStudio by clicking on the ‚ÄúRStudio‚Äù box in the Launcher tab:\n\n We will be mainly using RStudio in this course."
  },
  {
    "objectID": "content/01-intro-to-jupyterhub.html#end-your-session",
    "href": "content/01-intro-to-jupyterhub.html#end-your-session",
    "title": "Intro to JupyterHubs",
    "section": "End your session",
    "text": "End your session\nWhen you are finished working for the day it is important to log out of the JupyterHub. When you keep a session active it uses up AWS resources (costs money) and keeps a series of virtual machines deployed.\n\n\n\n\n\n\nCaution\n\n\n\nYou log out from the Jupyter Lab tab not the RStudio tab.\n\n\nFrom the Jupyter Lab tab, do one of two things to stop the server:\n\nLog out File -&gt; Log Out and click ‚ÄúLog Out‚Äù!\nor File -&gt; Hub Control Panel -&gt; Stop My Server\n\n\n\n\n\n\n\nTip\n\n\n\nCan‚Äôt find the Jupyter Lab tab? Go to https://itcoocean.2i2c.cloud/hub/home"
  },
  {
    "objectID": "content/01-intro-to-jupyterhub.html#restart-your-server",
    "href": "content/01-intro-to-jupyterhub.html#restart-your-server",
    "title": "Intro to JupyterHubs",
    "section": "Restart your server",
    "text": "Restart your server\nSometimes the server will crash/stop. This can happen if too many people use a lot of memory all at once. If that happens, go to the Jupyter Lab tab and then File -&gt; Hub Control Panel -&gt; Stop My Server and then Start My Server. You shouldn‚Äôt lose your work unless you were uploading a file."
  },
  {
    "objectID": "content/01-intro-to-jupyterhub.html#your-files",
    "href": "content/01-intro-to-jupyterhub.html#your-files",
    "title": "Intro to JupyterHubs",
    "section": "Your files",
    "text": "Your files\nWhen you start your server, you will have access to your own virtual drive space. No other users will be able to see or access your files. You can upload files to your virtual drive space and save files here. You can create folders to organize your files. You personal directory is home/jovyan. Everyone has the same home directory but your files are separate and cannot be seen by others.\nThere are a number of different ways to create new files. We will practice this in the RStudio lecture.\n\nWill I lose all of my work?\nLogging out will NOT cause any of your work to be lost or deleted. It simply shuts down some resources. It would be equivalent to turning off your desktop computer at the end of the day."
  },
  {
    "objectID": "content/01-intro-to-jupyterhub.html#shared-files",
    "href": "content/01-intro-to-jupyterhub.html#shared-files",
    "title": "Intro to JupyterHubs",
    "section": "Shared files",
    "text": "Shared files\n\n\n\nShared folder\n\n\nIn the file panel, you will see a folder called shared. These are read-only shared files that we have prepared for you. There are two main folders:\n\ndata The folder with data files\n2023-Hackbook The full Git repository with the files for https://hackweek-itcoocean.github.io/2023-Hackbook\n\nYou will also see shared-public. This is a read-write folder for you to put files for everyone to see and use. You can create a team folder here for shared data and files. Note, everyone can see and change these so be careful to communicate with your team so multiple people don‚Äôt work on the same file at the same time. You can also create folders for each team member and agree not to change other team members files.\nYou will also see other folders of Python content for the Python users. We will have a separate introduction to Jupyter Notebooks."
  },
  {
    "objectID": "content/01-intro-to-jupyterhub.html#python-users",
    "href": "content/01-intro-to-jupyterhub.html#python-users",
    "title": "Intro to JupyterHubs",
    "section": "**Python users",
    "text": "**Python users\nYou can open a Jupyter Notebook by clicking on the ‚ÄúPython 3‚Äù box. In the Launcher tab:\n\n\n\nJupyterhub Launcher\n\n\nJupyter notebooks are a very common way to share Python code and tutorials. Because we are focusing on R in this course, we will not use Jupyter notebooks much but we have many Juptyer notebooks that you can experiment with in the python-tutorials folder. Get an overview of Jupyter Lab: Intro to Jupyter Lab Learn about the geosciences tools in Python\nNote: Python users can run Python in RStudio and R users can run R in Jupyter Notebooks."
  },
  {
    "objectID": "content/01-intro-to-jupyterhub.html#faq",
    "href": "content/01-intro-to-jupyterhub.html#faq",
    "title": "Intro to JupyterHubs",
    "section": "FAQ",
    "text": "FAQ\nCan we use Matlab with JupyterHub? You can use Octave kernel as a Matlab replacement. It is open source and free. If you want to integrate Matlab, there is a project to do so jupyter-matlab-proxy\nWhy do we have the same home directory as /home/jovyan? /home/jovyan is the default home directory for ‚Äòjupyter‚Äô based images/dockers. It is the historic home directory for Jupyter deployments.\nCan other users see the files in my /home/jovyan folder? No, other users can not see your credentials.\n\nAcknowledgements\nSome sections of this document have been taken from hackweeks organized by the University of Washington eScience Institute and Openscapes."
  },
  {
    "objectID": "content/01-welcome.html",
    "href": "content/01-welcome.html",
    "title": "Welcome",
    "section": "",
    "text": "Link to slides"
  },
  {
    "objectID": "content/02-git-jupyter.html#summary",
    "href": "content/02-git-jupyter.html#summary",
    "title": "Git - Jupyter Lab",
    "section": "Summary",
    "text": "Summary\nIn this tutorial, we will provide a brief introduction to:\n\nCommand line (terminal/shell)\nNavigating around folders in Jupyter Lab\nVersion Control (code management using git)\nSetting up Git in Jupyter Lab\nThe Git GUI in Jupyter Lab\nBasic Git commands"
  },
  {
    "objectID": "content/02-git-jupyter.html#introduction-jupyter-lab",
    "href": "content/02-git-jupyter.html#introduction-jupyter-lab",
    "title": "Git - Jupyter Lab",
    "section": "Introduction :: Jupyter Lab",
    "text": "Introduction :: Jupyter Lab\nWhen you start the JupyterHub, you will be in Jupyter Lab. From there you can click on the RStudio box and open RStudio. However for this tutorial, we will stay in Juptyer Lab."
  },
  {
    "objectID": "content/02-git-jupyter.html#introduction-terminalshell",
    "href": "content/02-git-jupyter.html#introduction-terminalshell",
    "title": "Git - Jupyter Lab",
    "section": "Introduction :: Terminal/Shell",
    "text": "Introduction :: Terminal/Shell\nLog into the JupyterHub. If you do not see this\n\nThen go to File &gt; New Launcher\nClick on the ‚ÄúTerminal‚Äù box to open a new terminal window.\n\nShell or Terminal Basics\n\nWhat is Terminal or Shell?\nNavigating Files and Directories\nWorking with Files and Directories\nOptional: Detailed self-paced lesson on running scripts from the shell: Shell Lesson from Software Carpentry\n\nYou will need only basic navigation skills for this course: cd, ls and cat\n\npwd where am I\ncd nameofdir move into a directory\ncd .. move up a directory\nls list the files in the current directory\nls -a list the files including hidden files\nls -l list the files with more info\ncat filename print out the contents of a file\n\n\n\nLet‚Äôs try\nls\nls -a\ncd shared\nls\ncd shell-tutorial\ncat lesson1.sh\ncd ..\ncd ..\n\n\nClose the terminal\nJust click on the X in the terminal tab"
  },
  {
    "objectID": "content/02-git-jupyter.html#introduction-file-navigation",
    "href": "content/02-git-jupyter.html#introduction-file-navigation",
    "title": "Git - Jupyter Lab",
    "section": "Introduction :: File Navigation",
    "text": "Introduction :: File Navigation\nIn the far left, you will see a line of icons. The top one is a folder and allows us to move around our file system.\n\nClick on shared. Now you can see the files in the shared directory.\nClick on shell-tutorial. Then click on lesson1.sh. The file opens. You won‚Äôt be able to save changes here because you don‚Äôt have write permission on this drive.\nClick on the folder icon that looks like this. Click on the actual folder image. \nNow it should look like this folder /\nThis shows me doing this\n\nCreate a new folder.\n\nNext to the blue rectange with a +, is a grey folder with a +. Click that to create a new folder, called lesson-scripts.\nThen click on lesson-scripts to enter the folder\n\n\nCreate a new file\n\nCreate with File &gt; New &gt; Text file\nThe file will open and you can edit it.\nSave with File &gt; Save Text\nDelete the file by right-clicking on it and clicking ‚ÄúDelete‚Äù"
  },
  {
    "objectID": "content/02-git-jupyter.html#introduction-version-control-git",
    "href": "content/02-git-jupyter.html#introduction-version-control-git",
    "title": "Git - Jupyter Lab",
    "section": "Introduction :: Version Control (Git)",
    "text": "Introduction :: Version Control (Git)\n\nWhat is version control, git, github, and how to set it up?\nVersion control is managing and tracking changes to your documents (program source code, images, websites, data files, etc.). git is a popular tool used for version control of software code. github.com is popular platform that provides remote server hosting for git repositories. A repository is a collection of various files that you are tracking for changes and versions. Currently GitHub is the most popular platform for file sharing code and code packages.\nThis section is a step-by-step guide to set up git on our 2i2c JupyterHub. We will also configure git to use your github.com account for managing your repositories hosted on github.com. There are 5 main steps.\n\n\nStep 1: Create a GitHub account\nTo complete the setup, you will need an account on github.com. If you don‚Äôt have an account, please visit github.com, create an account (free) and come back to this guide for setting up git.\n\n\nStep 2: Clone a repository\nWe have created a demo repository for you to clone:\nhttps://github.com/Hackweek-ITCOocean/Git-Lesson\n\nStart your 2i2c JupyterHub\nClick on the Git icon\n\n\n\nClick ‚ÄúClone a Repository‚Äù\nWhere is says ‚ÄúEnter the URI of the remote Git repository‚Äù, paste in the URL https://github.com/Hackweek-ITCOocean/Git-Lesson\nThe folder appears and you can enter the folder and edit and create files.\n\n\nYour task: Create a file with your name and save to the Git-Lesson folder"
  },
  {
    "objectID": "content/02-git-jupyter.html#step-3",
    "href": "content/02-git-jupyter.html#step-3",
    "title": "Git - Jupyter Lab",
    "section": "Step 3:",
    "text": "Step 3:\nConfigure git with your name and email address.\n``` bash\ngit config --global user.name \"Makhan Virdi\"\ngit config --global user.email \"Makhan.Virdi@gmail.com\"\n```\n\n**Note:** This name and email could be different from your github.com credentials. Remember `git` is a program that keeps track of your changes locally (on 2i2c JupyterHub or your own computer) and github.com is a platform to host your repositories. However, since your changes are tracked by `git`, the email/name used in git configuration will show up next to your contributions on github.com when you `push` your repository to github.com (`git push` is discussed in a later step).\n\nConfigure git to store your github credentials to avoid having to enter your github username and token each time you push changes to your repository(in Step 5, we will describe how to use github token instead of a password)\ngit config --global credential.helper store\nCopy link for the demo repository from your github account. Click the green ‚ÄúCode‚Äù button and copy the link as shown.\n\nClone the repository using git clone command in the terminal\nTo clone a repository from github, copy the link for the repository (previous step) and use git clone:\ngit clone https://github.com/YOUR-GITHUB-USERNAME/check_github_setup\nNote: Replace YOUR-GITHUB-USERNAME here with your github.com username. For example, it is virdi for my github.com account as seen in this image.\n\nUse ls (list files) to verify the existence of the repository that you just cloned\n\nChange directory to the cloned repository using cd check_github_setup and check the current directory using pwd command (present working directory)\n\nCheck status of your git repository to confirm git set up using git status\n\nYou are all set with using git on your 2i2c JupyterHub! But the collaborative power of git through github needs some additional setup.\nIn the next step, we will create a new file in this repository, track changes to this file, and link it with your github.com account.\n\n\nStep 4. Creating new file and tracking changes\n\nIn the left panel on your 2i2c JupyterHub, click on the ‚Äúdirectory‚Äù icon and then double click on ‚Äúcheck_github_setup‚Äù directory.\n\n\nOnce you are in the check_github_setup directory, create a new file using the text editor in your 2i2c JupyterHub (File &gt;&gt; New &gt;&gt; Text File).\n\nName the file lastname.txt. For example, virdi.txt for me (use your last name). Add some content to this file (for example, I added this to my virdi.txt file: my last name is virdi).\n\nNow you should have a new file (lastname.txt) in the git repository directory check_github_setup\nCheck if git can see that you have added a new file using git status. Git reports that you have a new file that is not tracked by git yet, and suggests adding that file to the git tracking system.\n\nAs seen in this image, git suggests adding that file so it can be tracked for changes. You can add file to git for tracking changes using git add. Then, you can commit changes to this file‚Äôs content using git commit as shown in the image.\ngit add virdi.txt\ngit status\ngit commit -m \"adding a new file\"\ngit status\n\nAs seen in the image above, git is suggesting to push the change that you just committed to the remote server at github.com (so that your collaborators can also see what changes you made).\nNote: DO NOT execute push yet. Before we push to github.com, let‚Äôs configure git further and store our github.com credentials to avoid entering the credentials every time we invoke git push. For doing so, we need to create a token on github.com to be used in place of your github.com password.\n\n\n\nStep 5. Create access token on github.com\n\nGo to your github account and create a new ‚Äúpersonal access token‚Äù: https://github.com/settings/tokens/new\n\n\n\nGenerate Personal Access Token on github.com\n\n\nEnter a description in ‚ÄúNote‚Äù field as seen above, select ‚Äúrepo‚Äù checkbox, and scroll to the bottom and click the green button ‚ÄúGenerate Token‚Äù. Once generated, copy the token (or save it in a text file for reference).\nIMPORTANT: You will see this token only once, so be sure to copy this. If you do not copy your token at this stage, you will need to generate a new token.\n\nTo push (transfer) your changes to github, use git push in terminal. It requires you to enter your github credentials. You will be prompted to enter your github username and ‚Äúpassword‚Äù. When prompted for your ‚Äúpassword‚Äù, DO NOT use your github password, use the github token that was copied in the previous step.\ngit push\n\nNote: When you paste your token in the terminal window, windows users will press Ctrl+V and mac os users will press Cmd+V. If it does not work, try generating another token and use the copy icon next to the token to copy the token. Then, paste using your computer‚Äôs keyboard shortcut for paste.\nNow your password is stored in ~/.git-credentials and you will not be prompted again unless the Github token expires. You can check the presence of this git-credentials file using Terminal. Here the ~ character represents your home directory (/home/jovyan/).\nls -la ~\nThe output looks like this:\ndrwxr-xr-x 13 jovyan jovyan 6144 Oct 22 17:35 .\ndrwxr-xr-x  1 root   root   4096 Oct  4 16:21 ..\n-rw-------  1 jovyan jovyan 1754 Oct 29 18:30 .bash_history\ndrwxr-xr-x  4 jovyan jovyan 6144 Oct 29 16:38 .config\n-rw-------  1 jovyan jovyan   66 Oct 22 17:35 .git-credentials\n-rw-r--r--  1 jovyan jovyan   84 Oct 22 17:14 .gitconfig\ndrwxr-xr-x 10 jovyan jovyan 6144 Oct 21 16:19 2021-Cloud-Hackathon\nYou can also verify your git configuration\n(notebook) jovyan@jupyter-virdi:~$ git config -l\nThe output should have credential.helper = store:\nuser.email        = Makhan.Virdi@gmail.com\nuser.name         = Makhan Virdi\ncredential.helper = store\n\nNow we are all set to collaborate with github on the JupyterHub during the Cloud Hackathon!\n\n\nSummary: Git Commands\n\nCommonly used git commands (modified from source)\n\n\nGit Command\nDescription\n\n\n\n\ngit status\nShows the current state of the repository: the current working branch, files in the staging area, etc.\n\n\ngit add\nAdds a new, previously untracked file to version control and marks already tracked files to be committed with the next commit\n\n\ngit commit\nSaves the current state of the repository and creates an entry in the log\n\n\ngit log\nShows the history for the repository\n\n\ngit diff\nShows content differences between commits, branches, individual files and more\n\n\ngit clone\nCopies a repository to your local environment, including all the history\n\n\ngit pull\nGets the latest changes of a previously cloned repository\n\n\ngit push\nPushes your local changes to the remote repository, sharing them with others\n\n\n\n\n\nGit: More Details\nLesson: For a more detailed self-paced lesson on git, visit Git Lesson from Software Carpentry\nCheatsheet: Frequently used git commands\nDangit, Git!?!: If you are stuck after a git mishap, there are ready-made solutions to common problems at Dangit, Git!?!\n\n\nCloning our repository using the git Jupyter lab extension.\nIf we‚Äôre already familiar with git commands and feel more confortable using a GUI our Jupyterhub deployment comes with a git extension. This plugin allows us to operate with git using a simple user interface.\nFor example we can clone our repository using the extension.\n\n\n\ngit extension"
  },
  {
    "objectID": "content/02-github-2.html#import-a-github-repository",
    "href": "content/02-github-2.html#import-a-github-repository",
    "title": "GitHub - Lecture 2",
    "section": "Import a GitHub repository",
    "text": "Import a GitHub repository\n\nIn your browser, navigate to https://github.com/Hackweek-ITCOocean/Quarto-Website\nCopy the URL\nClick on the ‚Äú+‚Äù in the top right (on GitHub) and select ‚Äúimport repository‚Äù\nFollow instructions to import to your GitHub account\nNow you have your OWN copy of Quarto-Website\nCopy the URL for your OWN copy. It will look like this\n\nhttps://github.com/yourgithubusername/Quarto-Website"
  },
  {
    "objectID": "content/02-github-2.html#clone-a-github-repository-into-rstudio",
    "href": "content/02-github-2.html#clone-a-github-repository-into-rstudio",
    "title": "GitHub - Lecture 2",
    "section": "Clone a GitHub repository into RStudio",
    "text": "Clone a GitHub repository into RStudio\n\nLogin the JupyterHub\nClick on the RStudio button when the Launcher appears \nClick File &gt; New Project &gt; Version Control &gt; Git\nPaste the URL into the box\nClick ‚ÄúCreate Project‚Äù\nThe project is created and the Git tab appears in the upper right panel.\n\nCongratulations! You pulled changes from GitHub into the JupyterHub!"
  },
  {
    "objectID": "content/02-github-2.html#lets-explore-the-files",
    "href": "content/02-github-2.html#lets-explore-the-files",
    "title": "GitHub - Lecture 2",
    "section": "Let‚Äôs explore the files",
    "text": "Let‚Äôs explore the files\n\nThis happens to be a website. Let‚Äôs build it using the Build tab in the upper right.\nClick ‚ÄúRender Website‚Äù. The website should build and appear.\n\n\nIf it doesn‚Äôt open automatically, go to docs &gt; index.html, right click and open that in a browser.\n\n\nOpen the about.qmd file. Let‚Äôs edit that! You can use the ‚ÄúSource‚Äù or ‚ÄúVisual‚Äù editor.\nWhen you have made some edits, click ‚ÄúRender‚Äù to see how it looks.\nYou can also click Build &gt; Render Website to re-create the whole website."
  },
  {
    "objectID": "content/02-github-2.html#set-up-authentication",
    "href": "content/02-github-2.html#set-up-authentication",
    "title": "GitHub - Lecture 2",
    "section": "Set up authentication",
    "text": "Set up authentication\nYou need to tell GitHub who you are so you can push your local changes up to GitHub. There are a few ways to do this. I am going to show you a way that works on any computer, including a virtual computer like the JupyterHub.\n\nStep 1: Generate a Personal Access Token\nWe are going to generate a classic token.\n\nGo to https://github.com/settings/tokens\nClick Generate new token &gt; Generate new token (classic)\nWhen the pop-up shows up, fill in a description, click the ‚Äúrepo‚Äù checkbox, and then scroll to bottom to click ‚ÄúGenerate‚Äù.\nSAVE the token. You need it for the next step.\n\n\n\nStep 2: Tell Git who your are\n\nReturn to RStudio\nClick the terminal tab in the bottom right panel\nPaste these 3 lines of code into the terminal\n\ngit config --global user.email \"&lt;your email&gt;\"\ngit config --global user.name \"&lt;your name&gt;\"\ngit config --global pull.rebase false\ngit config --global credential.helper store\n\n\nStep 3: Push changes up to GitHub\n\nClick the Git tab (upper right panel)\nClick the checkboxes next to what changes you want to push\nClick ‚ÄúCommit‚Äù\nFill out a comment and click ‚ÄúCommit‚Äù\nClose the pop-ups\nClick Push\n\nFull instructions with ways to do this from R"
  },
  {
    "objectID": "content/02-github-2.html#optional-make-your-website-live",
    "href": "content/02-github-2.html#optional-make-your-website-live",
    "title": "GitHub - Lecture 2",
    "section": "Optional: Make your website live!",
    "text": "Optional: Make your website live!\n\nGo to your Quarto Website repository on Github\nGo to Settings &gt; Pages (in left navbar)\nYou need to select the branch and the folder where the webpage files are. In this case, they are in docs \nThe URL where your website will appear is shown.\n\nHave you noticed that people have personal websites at username.github.io? How did they do that? If you create a repo named username.github.io in GitHub, it will automatically appear with that URL. Look for a repo with that name in someone‚Äôs GitHub account if you see that they use that as their personal website."
  },
  {
    "objectID": "content/02-rstudio.html#summary",
    "href": "content/02-rstudio.html#summary",
    "title": "RStudio - R",
    "section": "Summary",
    "text": "Summary\nIn this tutorial, we will provide a brief introduction to:\n\nRStudio in the JupyterHub\nBasic navigation around RStudio: the 4 main panels and menus\nThe help panel\nCreate a RStudio project\nCreating files and creating files with templates\nCommand line (terminal/shell) in RStudio"
  },
  {
    "objectID": "content/02-rstudio.html#open-rstudio-in-the-jupyterhub",
    "href": "content/02-rstudio.html#open-rstudio-in-the-jupyterhub",
    "title": "RStudio - R",
    "section": "Open RStudio in the JupyterHub",
    "text": "Open RStudio in the JupyterHub\n\nLogin the JupyterHub\nClick on the RStudio button when the Launcher appears \nLook for the browser tab with the RStudio icon"
  },
  {
    "objectID": "content/02-rstudio.html#basic-navigation",
    "href": "content/02-rstudio.html#basic-navigation",
    "title": "RStudio - R",
    "section": "Basic Navigation",
    "text": "Basic Navigation\n\n\n\nRStudio Panels"
  },
  {
    "objectID": "content/02-rstudio.html#create-an-rstudio-project",
    "href": "content/02-rstudio.html#create-an-rstudio-project",
    "title": "RStudio - R",
    "section": "Create an RStudio project",
    "text": "Create an RStudio project\n\nOpen RStudio\nIn the file panel, click on the Home icon to make sure you are in your home directory\nFrom the file panel, click ‚ÄúNew Project‚Äù to create a new project\nIn the pop up, select New Directory and then New Project\nName it sandbox\nClick on the dropdown in the upper right corner to select your sandbox project\nClick on Tools &gt; Project Options &gt; General and change the first 2 options about saving and restoring the workspace to ‚ÄúNo‚Äù"
  },
  {
    "objectID": "content/02-rstudio.html#creating-files",
    "href": "content/02-rstudio.html#creating-files",
    "title": "RStudio - R",
    "section": "Creating files",
    "text": "Creating files\nWhen you start your server, you will have access to your own virtual drive space. No other users will be able to see or access your files. You can upload files to your virtual drive space and save files here. You can create folders to organize your files. You personal directory is home/jovyan. Everyone has the same home directory but your files are separate and cannot be seen by others.\nThere are a number of different ways to create new files. Let‚Äôs practice making new files in RStudio.\n\nR Script\n\nOpen RStudio\nIn the upper right, make sure you are in your sandbox project.\nFrom the file panel, click on ‚ÄúNew Blank File‚Äù and create a new R script.\nPaste\n\nprint(\"Hello World\")\n1+1\nin the script. 7. Click the Source button (upper left of your new script file) to run this code. 8. Try putting your cursor on one line and running that line of code by clicking ‚ÄúRun‚Äù 9. Try selecting lines of code and running that by clicking ‚ÄúRun‚Äù\n\n\ncsv file\n\nFrom the file panel, click on ‚ÄúNew Blank File‚Äù and create a Text File.\nThe file will open in the top left corner. Paste in the following:\n\nname, place, value\nA, 1, 2\nB, 10, 20\nC, 100, 200\n\nClick the save icon (above your new file) to save your csv file\n\n\n\nA Rmarkdown document\nNow let‚Äôs create some more complicated files using the RStudio template feature.\n\nFrom the upper left, click File -&gt; New File -&gt; RMarkdown\nClick ‚ÄúOk‚Äù at the bottom.\nWhen the file opens, click Knit (icon at top of file).\nIt will ask for a name. Give it one and save.\nYou file will render into html.\n\nReference sheet for writing in RMarkdown or go to Help &gt; Markdown Quick Reference\n\n\nA Rmarkdown presentation\n\nFrom the upper left, click File -&gt; New File -&gt; RMarkdown\nClick ‚ÄúPresentation‚Äù on left of the popup and click ‚ÄúOk‚Äù at the bottom.\nWhen the file opens, click Knit (icon at top of file).\nIt will ask for a name. Give it one and save.\nYou file will render into html.\n\n\n\nAn interactive application\n\nFrom the upper left, click File -&gt; New File -&gt; Shiny Web App\nIn the popup, give the app a name and make sure the app is saved to my-files\nWhen the file opens, Run App (icon at top of file).\n\n\n\nAnd many more\nPlay around with creating other types of documents using templates. Especially if you already use RStudio."
  },
  {
    "objectID": "content/02-rstudio.html#more-tips",
    "href": "content/02-rstudio.html#more-tips",
    "title": "RStudio - R",
    "section": "More tips",
    "text": "More tips\nLearn some tips and tricks from these\n\nhttps://colorado.posit.co/rsc/the-unknown/into-the-unknown.html\nhttps://www.dataquest.io/blog/rstudio-tips-tricks-shortcuts/"
  },
  {
    "objectID": "content/03-git-rstudio.html",
    "href": "content/03-git-rstudio.html",
    "title": "Basic Git/GitHub Skills Using RStudio",
    "section": "",
    "text": "Before we go over this tutorial we expect that you have already gone through this preparation material Intro to the JupyterHub."
  },
  {
    "objectID": "content/03-git-rstudio.html#what-is-git-and-github",
    "href": "content/03-git-rstudio.html#what-is-git-and-github",
    "title": "Basic Git/GitHub Skills Using RStudio",
    "section": "What is Git and GitHub?",
    "text": "What is Git and GitHub?\nGit A program to track your file changes and create a history of those changes. Creates a ‚Äòcontainer‚Äô for a set of files called a repository.\nGitHub A website to host these repositories and allow you to sync local copies (on your computer) to the website. Lots of functionality built on top of this."
  },
  {
    "objectID": "content/03-git-rstudio.html#some-basic-git-jargon",
    "href": "content/03-git-rstudio.html#some-basic-git-jargon",
    "title": "Basic Git/GitHub Skills Using RStudio",
    "section": "Some basic Git jargon",
    "text": "Some basic Git jargon\n\nRepo Repository. It is your code and the record of your changes. This record and also the status of your repo is a hidden folder called .git . You have a local repo and a remote repo. The remote repo is on GitHub (for in our case) is called origin. The local repo is on the JupyterHub.\nStage Tell Git which changes you want to commit (write to the repo history).\nCommit Write a note about what change the staged files and ‚Äúcommit‚Äù that note to the repository record. You are also tagging this state of the repo and you could go back to this state if you wanted.\nPush Push local changes (commits) up to the remote repository on GitHub (origin).\nPull Pull changes on GitHub into the local repository on the JupyterHub.\nGit GUIs A graphical interface for Git (which is command line). Today I will use jupyterlab-git which we have installed on JupyterHub.\nShell A terminal window where we can issue git commands."
  },
  {
    "objectID": "content/03-git-rstudio.html#overview",
    "href": "content/03-git-rstudio.html#overview",
    "title": "Basic Git/GitHub Skills Using RStudio",
    "section": "Overview",
    "text": "Overview\nToday I will cover the four basic Git/GitHub skills. We will not work with branches today and I won‚Äôt cover much about merge conflicts. The goal for today is to first get you comfortable with the basic skills and terminology‚Äîand also get you set up on the JupyterHub. We will use what is called a ‚Äútrunk-based workflow‚Äù.\n\nSimple Trunk-based Workflow:\n\nMake local (on your computer) changes to code.\nRecord what those changes were about and commit to the code change record (history).\nPush those changes to your remote repository (aka origin)\n\nWe‚Äôll do this"
  },
  {
    "objectID": "content/03-git-rstudio.html#setting-up-git",
    "href": "content/03-git-rstudio.html#setting-up-git",
    "title": "Basic Git/GitHub Skills Using RStudio",
    "section": "Setting up Git",
    "text": "Setting up Git\nBefore we can work with Git in JupyterLab, we need to do some set up.\nFirst time git setup\n\nTell Git who you are and to store your credentials (GitHub login info)\n\nShow me\n\nGet a Personal Access Token from GitHub\n\nCopy the token! You will need it in the next step.\nShow me\n\nTrigger Git to ask for your password (that personal access token)\n\nYou will do this by cloning a private repo. Open a shell and issue this command\ngit clone https://github.com/snowex-hackweek/github_setup_check.git\nIt will ask for your GitHub username and password. At the password part, paste in the Personal Access Token."
  },
  {
    "objectID": "content/03-git-rstudio.html#jupyterlab-git",
    "href": "content/03-git-rstudio.html#jupyterlab-git",
    "title": "Basic Git/GitHub Skills Using RStudio",
    "section": "jupyterlab-git",
    "text": "jupyterlab-git\nWhen the instructions say to use or open or click on jupyterlag-git, click the icon in the left navbar marked by the red arrow."
  },
  {
    "objectID": "content/03-git-rstudio.html#the-key-skills",
    "href": "content/03-git-rstudio.html#the-key-skills",
    "title": "Basic Git/GitHub Skills Using RStudio",
    "section": "The Key Skills",
    "text": "The Key Skills\n\nSkill 1: Create a blank repo on GitHub\nSkill 2: Clone your GitHub repo onto the JupyterHub\nSkill 0: Open your repository in the JupyterLab.\nSkill 3: Make some changes and commit those local changes\nSkill 4: Push the changes to GitHub\nSkill 1b: Fork someone else‚Äôs GitHub repository"
  },
  {
    "objectID": "content/03-git-rstudio.html#lets-see-it-done",
    "href": "content/03-git-rstudio.html#lets-see-it-done",
    "title": "Basic Git/GitHub Skills Using RStudio",
    "section": "Let‚Äôs see it done!",
    "text": "Let‚Äôs see it done!\n\nSkill 1: Create a blank repo on GitHub\n\nClick the + in the upper left from YOUR GitHub page.\nGive your repo the name Test and make sure it is public.\nClick new and check checkbox to add the Readme file and .gitignore\nCopy the URL of your new repo. It‚Äôs in the browser where you normally see a URL.\n\nShow me\n\n\nSkill 2: Clone your repo to the JupyterHub\n\nCopy the URL of your repo. https://www.github.com/yourname/Test\nClick on the jupyterlab-git icon in the left navbar.\nYou‚Äôll see 3 boxes*, click on Clone Repository.\nPaste the URL from in the box that pops up and paste in the URL from Step #1.\nYour repo now appears in the list of folders.\n\nShow me ‚Äì Show me with the shell ‚Äì Show me with Visual Studio Code\n\nI don‚Äôt see those boxes. You are in a repository. Click on the little folder icon at top to get out of the current folder. See video (at the end).\n\n\n\nSkill 3: Make some changes and commit your changes\n\nMake some changes to the README.md file in the Test repo.\nClick the jupyterlab-git icon, and stage the change(s) by rolling over the modified file and clicking the +.\nOpen GitHub Desktop, click the little checkboxes next to the changes.\nAdd a commit comment, click commit.\n\nShow me ‚Äì Show me from the shell ‚Äì Show me with Visual Studio Code\n\n\nSkill 4: Push changes to GitHub / Pull changes from GitHub\nTo push changes you committed in Skill #3\n\nFrom jupyterlab-git, click on the little cloud with up arrow at the top (it‚Äôs kind of small).\n\nShow me ‚Äì Show me in the shell\nTo pull changes on GitHub that are not on your local computer:\n\nMake some changes directly on GitHub\nFrom jupyterlab-git, click on the little cloud with down arrow at the top (it‚Äôs kind of small).\n\nShow me\n\nNote in the shell, the command is git pull.\n\n\n\nPair-activity 1\nIn JupyterLab,\n\nMake a copy of README.md\nRename it to .md\nAdd some text.\nStage and commit the added file.\nPush to GitHub.\n\nDo this from jupyterlab-git. You can also try from the shell if you watched the shell videos too.\nTry before watching. Show me ‚Äì Show me in the shell\n\n\nPair-activity 2\nAll of this activity is in JupyterLab.\n\nClone this repo: https://github.com/snowex-hackweek/git-basics\nNavigate to the repo, copy Copyme.md and rename to &lt;yourname&gt;.md\nStage and then commit that new file.\nPush to GitHub.\nMake some more changes and push to GitHub.\nPull in your partner‚Äôs (and everyone elses) changes\n\nShow me\n\n\nSkill 1b: Fork a repo on GitHub\nYou can copy other people‚Äôs repos but maintain a connection to the original (upstream) repo. In the hackweek, you will use this to get the tutorials and update them each morning.\n\nIn a browser, go to the GitHub repository you want to fork.\nClick the little fork icon in the upper right corner.\nUse Skill #1 to clone the forked repo to your computer.\n\nFetch changes from the original (upstream) using jupyterlab-git\n\nFrom GitHub, click ‚ÄúFetch upstream‚Äù\nFrom JupyterLab, click on the jupyterlab-git icon and click the cloud with down arrow, to pull in the changes to JupyterLab.\n\nFetch changes from the original (upstream) using the shell\nSee instructions here\n\n\nSkill 1c: Copy a repo on GitHub\nYou can copy your own or other people‚Äôs repos1.\n\nIn a browser, go to the GitHub repository you want to copy.\nCopy its url.\nNavigate to your GitHub page: click your icon in the upper right and then ‚Äòyour repositories‚Äô\nClick the + in top right and click import repository. Paste in the url and give your repo a name.\nUse Skill #1 to clone your new repo to your computer\n\n\n\nPair-activity 2\n\nFork https://github.com/snowex-hackweek/website2022 (GitHub)\nClone to JupyterHub (Skill #2)"
  },
  {
    "objectID": "content/03-git-rstudio.html#footnotes",
    "href": "content/03-git-rstudio.html#footnotes",
    "title": "Basic Git/GitHub Skills Using RStudio",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nThis is different from forking. There is no connection to the original repository.‚Ü©Ô∏é"
  },
  {
    "objectID": "content/XX-further-resources.html#notebooks-and-hackweeks-with-tutorials",
    "href": "content/XX-further-resources.html#notebooks-and-hackweeks-with-tutorials",
    "title": "Additional resources",
    "section": "Notebooks and hackweeks with tutorials",
    "text": "Notebooks and hackweeks with tutorials\n\nPangeo at Ocean Sciences 2020\nNASA Openscapes EarthData Cloud Book\nNASA Openscapes 2021 Hackweek\nOceanHackWeek\nICESat-2 2023 eScience Institute, University of Washington website\nPO.DAAC Github Repository\nNASA MAAP Notebooks Click the GitHub link in top right to get to the Jupyter Notebooks\nUW eScience Geoscience Hackweek"
  },
  {
    "objectID": "content/XX-further-resources.html#how-to",
    "href": "content/XX-further-resources.html#how-to",
    "title": "Additional resources",
    "section": "How to",
    "text": "How to\n\nNASA Earthdata: How to Cloud\nUSGS Eyes on Earth Podcast: Satellites and Cloud Computing - with Aaron Friesz (LP DAAC!)\nPO.DAAC Cloud Data Page\nPO.DAAC Earthdata Webinar (Aug 2021): Surfing Ocean Data in the Cloud - The Beginner‚Äôs Guide to PO.DAAC in the NASA Earthdata Cloud\nNASA Earthdata Cloud Primer helpful tutorials for how to set up your own EC2 cloud instance in AWS, attach storage, move files back and forth, and more.\nSetting up Jupyter Notebooks in a user EC2 instance in AWS - blog post for setting up jupyter notebooks in an EC2 instance in AWS. (Builds on the Cloud Primer tutorials, which are missing that next step)\nRunning the NASA Cloud Workshop notebooks with mybinder.org - by Eli Holmes, 2021 Cloud Hackathon Participant who then set up working in Binder"
  },
  {
    "objectID": "content/XX-r-and-python-resources.html#programming-in-r",
    "href": "content/XX-r-and-python-resources.html#programming-in-r",
    "title": "R and Python Resources",
    "section": "Programming in R",
    "text": "Programming in R\nThe following give a basic intro to R and RStudio.\n\nW3Schools Basic R\nBasics of R and installing RStudio\nYouTube: R for Beginners\n\n\nBeyond the basics of R\n\nSoftware Carpentry Novice R\nSoftware Carpentry Intro to R\nFor a longer free course, CodeAcademy has a good Intro to R. Note this is 20 hours. You do NOT need to do this whole course before the hackweek!\nIf you know the basics of R but have never done modeling, then you can start with this 2.5 hour course that covers basic linear regression with R and plotting with ggplot2:\nOne of the best free R courses is Coursera‚Äôs Learn R. You can see the lectures for free. Make sure to click AUDIT when it asks you to sign up for a 7-day trial. You do not need to sign up for anything to go through the material."
  },
  {
    "objectID": "content/XX-r-and-python-resources.html#programming-in-python",
    "href": "content/XX-r-and-python-resources.html#programming-in-python",
    "title": "R and Python Resources",
    "section": "Programming in Python",
    "text": "Programming in Python\nSwitch to Jupyter Notebook for an introduction to programming in Python\n\nVariables (and mathematical operations)\nData Structures (list, tuple, dict)\nFlow Control using loops (for, while)\nConditionals (if, else, elif)\nFunctions\nErrors and Exceptions (understanding and handling errors)\nUsing modules (libraries, packages)\n\npandas: high-performance, easy-to-use data structures and data analysis tools\nrioxarray: based on the rasterio package for working with rasters and xarray\n\n\n\nBeyond the basics in Python\n\nSelf-paced lesson on Programming with Python from Software Carpentry\nDetailed self-paced lesson on Fundamentals of Geospatial Raster and Vector Data with Python from Data Carpentry"
  },
  {
    "objectID": "content/data.html",
    "href": "content/data.html",
    "title": "Data",
    "section": "",
    "text": "Indian Ocean and Bay of Bengal Data\nStudents will learn how to access remote-sensing data in the cloud (meaning on-line), but we have also prepared an ‚Äúanalysis ready‚Äù data set for students. This will be available on a shared drive and we will introduce the students to the techniques for accessing large datasets without loading them into memory.\n\n\nBounding box\n\nlatitude: -12deg to 32deg\nlongitude: 42deg to 102deg\ngrid: 0.25 deg\ncenters: 0, 0.25, 0.5., 0.75\n\n\n\nDatasets: ERA5\n\nu wind\nv wind\nwind speed\nwind direction\nair temperature @ 2m\nsea surface temperature\n\n\n\nCopernicus\n\nsea level anomaly\nchlorophyll concentration\n\n\n\nSRTM30_PLUS\n\nBathymetry\n\nReferences\n\nhttps://topex.ucsd.edu/WWW_html/srtm30_plus.html\nhttps://coastwatch.pfeg.noaa.gov/erddap/griddap/usgsCeSrtm30v6.html\n\n\n\n1-km MUR SST\n\nsea surface temperature"
  },
  {
    "objectID": "content/earthdata.html#overview",
    "href": "content/earthdata.html#overview",
    "title": "Earthdata Login",
    "section": "Overview",
    "text": "Overview"
  },
  {
    "objectID": "content/earthdata.html#why-do-i-need-an-earthdata-login",
    "href": "content/earthdata.html#why-do-i-need-an-earthdata-login",
    "title": "Earthdata Login",
    "section": "Why do I need an Earthdata login?",
    "text": "Why do I need an Earthdata login?\nWe will be teaching you ways to programmatically access NASA remote-sensing data from within your scripts. You will need to enter your Earthdata username and password in order for this to work."
  },
  {
    "objectID": "content/earthdata.html#getting-an-earthdata-login",
    "href": "content/earthdata.html#getting-an-earthdata-login",
    "title": "Earthdata Login",
    "section": "Getting an Earthdata login",
    "text": "Getting an Earthdata login\nIf you do not already have an Earthdata login, then navigate to the Earthdata Login page, a username and password, and then record this somewhere for use during the tutorials:"
  },
  {
    "objectID": "content/earthdata.html#configure-programmatic-access-to-nasa-servers",
    "href": "content/earthdata.html#configure-programmatic-access-to-nasa-servers",
    "title": "Earthdata Login",
    "section": "Configure programmatic access to NASA servers",
    "text": "Configure programmatic access to NASA servers\nIf you use web interfaces to retrieve nasa data such as Earthdata Search you are prompted to login. We will be using software to retrieve data from NASA Servers during the hackweek, so you must store your credentials on the JupyterHub. Run the following commands on the JupyterHub in a terminal replacing your Earthdata login username and password:\necho \"machine urs.earthdata.nasa.gov login EARTHDATA_LOGIN password EARTHDATA_PASSWORD\" &gt; ~/.netrc\nchmod 0600 .netrc"
  },
  {
    "objectID": "content/git.html#summary",
    "href": "content/git.html#summary",
    "title": "Git - Jupyter Lab",
    "section": "Summary",
    "text": "Summary\nIn this tutorial, we will provide a brief introduction to:\n\nCommand line (terminal/shell)\nNavigating around folders in Jupyter Lab\nVersion Control (code management using git)\nSetting up Git in Jupyter Lab\nThe Git GUI in Jupyter Lab\nBasic Git commands"
  },
  {
    "objectID": "content/git.html#introduction-jupyter-lab",
    "href": "content/git.html#introduction-jupyter-lab",
    "title": "Git - Jupyter Lab",
    "section": "Introduction :: Jupyter Lab",
    "text": "Introduction :: Jupyter Lab\nWhen you start the JupyterHub, you will be in Jupyter Lab. From there you can click on the RStudio box and open RStudio. However for this tutorial, we will stay in Juptyer Lab."
  },
  {
    "objectID": "content/git.html#introduction-terminalshell",
    "href": "content/git.html#introduction-terminalshell",
    "title": "Git - Jupyter Lab",
    "section": "Introduction :: Terminal/Shell",
    "text": "Introduction :: Terminal/Shell\nLog into the JupyterHub. If you do not see this\n\nThen go to File &gt; New Launcher\nClick on the ‚ÄúTerminal‚Äù box to open a new terminal window.\n\nShell or Terminal Basics\n\nWhat is Terminal or Shell?\nNavigating Files and Directories\nWorking with Files and Directories\nOptional: Detailed self-paced lesson on running scripts from the shell: Shell Lesson from Software Carpentry\n\nYou will need only basic navigation skills for this course: cd, ls and cat\n\npwd where am I\ncd nameofdir move into a directory\ncd .. move up a directory\nls list the files in the current directory\nls -a list the files including hidden files\nls -l list the files with more info\ncat filename print out the contents of a file\n\n\n\nLet‚Äôs try\nls\nls -a\ncd shared\nls\ncd shell-tutorial\ncat lesson1.sh\ncd ..\ncd ..\n\n\nClose the terminal\nJust click on the X in the terminal tab"
  },
  {
    "objectID": "content/git.html#introduction-file-navigation",
    "href": "content/git.html#introduction-file-navigation",
    "title": "Git - Jupyter Lab",
    "section": "Introduction :: File Navigation",
    "text": "Introduction :: File Navigation\nIn the far left, you will see a line of icons. The top one is a folder and allows us to move around our file system.\n\nClick on shared. Now you can see the files in the shared directory.\nClick on shell-tutorial. Then click on lesson1.sh. The file opens. You won‚Äôt be able to save changes here because you don‚Äôt have write permission on this drive.\nClick on the folder icon that looks like this. Click on the actual folder image. \nNow it should look like this folder /\nThis shows me doing this\n\nCreate a new folder.\n\nNext to the blue rectange with a +, is a grey folder with a +. Click that to create a new folder, called lesson-scripts.\nThen click on lesson-scripts to enter the folder\n\n\nCreate a new file\n\nCreate with File &gt; New &gt; Text file\nThe file will open and you can edit it.\nSave with File &gt; Save Text\nDelete the file by right-clicking on it and clicking ‚ÄúDelete‚Äù"
  },
  {
    "objectID": "content/git.html#introduction-version-control-git",
    "href": "content/git.html#introduction-version-control-git",
    "title": "Git - Jupyter Lab",
    "section": "Introduction :: Version Control (Git)",
    "text": "Introduction :: Version Control (Git)\n\nWhat is version control, git, github, and how to set it up?\nVersion control is managing and tracking changes to your documents (program source code, images, websites, data files, etc.). git is a popular tool used for version control of software code. github.com is popular platform that provides remote server hosting for git repositories. A repository is a collection of various files that you are tracking for changes and versions. Currently GitHub is the most popular platform for file sharing code and code packages.\nThis section is a step-by-step guide to set up git on our 2i2c JupyterHub. We will also configure git to use your github.com account for managing your repositories hosted on github.com. There are 5 main steps.\n\n\nStep 1: Create a GitHub account\nTo complete the setup, you will need an account on github.com. If you don‚Äôt have an account, please visit github.com, create an account (free) and come back to this guide for setting up git.\n\n\nStep 2: Clone a repository\nWe have created a demo repository for you to clone:\nhttps://github.com/Hackweek-ITCOocean/Git-Lesson\n\nStart your 2i2c JupyterHub\nClick on the Git icon\n\n\n\nClick ‚ÄúClone a Repository‚Äù\nWhere is says ‚ÄúEnter the URI of the remote Git repository‚Äù, paste in the URL https://github.com/Hackweek-ITCOocean/Git-Lesson\nThe folder appears and you can enter the folder and edit and create files.\n\n\nYour task: Create a file with your name and save to the Git-Lesson folder"
  },
  {
    "objectID": "content/git.html#step-3",
    "href": "content/git.html#step-3",
    "title": "Git - Jupyter Lab",
    "section": "Step 3:",
    "text": "Step 3:\nConfigure git with your name and email address.\n``` bash\ngit config --global user.name \"Makhan Virdi\"\ngit config --global user.email \"Makhan.Virdi@gmail.com\"\n```\n\n**Note:** This name and email could be different from your github.com credentials. Remember `git` is a program that keeps track of your changes locally (on 2i2c JupyterHub or your own computer) and github.com is a platform to host your repositories. However, since your changes are tracked by `git`, the email/name used in git configuration will show up next to your contributions on github.com when you `push` your repository to github.com (`git push` is discussed in a later step).\n\nConfigure git to store your github credentials to avoid having to enter your github username and token each time you push changes to your repository(in Step 5, we will describe how to use github token instead of a password)\ngit config --global credential.helper store\nCopy link for the demo repository from your github account. Click the green ‚ÄúCode‚Äù button and copy the link as shown.\n\nClone the repository using git clone command in the terminal\nTo clone a repository from github, copy the link for the repository (previous step) and use git clone:\ngit clone https://github.com/YOUR-GITHUB-USERNAME/check_github_setup\nNote: Replace YOUR-GITHUB-USERNAME here with your github.com username. For example, it is virdi for my github.com account as seen in this image.\n\nUse ls (list files) to verify the existence of the repository that you just cloned\n\nChange directory to the cloned repository using cd check_github_setup and check the current directory using pwd command (present working directory)\n\nCheck status of your git repository to confirm git set up using git status\n\nYou are all set with using git on your 2i2c JupyterHub! But the collaborative power of git through github needs some additional setup.\nIn the next step, we will create a new file in this repository, track changes to this file, and link it with your github.com account.\n\n\nStep 4. Creating new file and tracking changes\n\nIn the left panel on your 2i2c JupyterHub, click on the ‚Äúdirectory‚Äù icon and then double click on ‚Äúcheck_github_setup‚Äù directory.\n\n\nOnce you are in the check_github_setup directory, create a new file using the text editor in your 2i2c JupyterHub (File &gt;&gt; New &gt;&gt; Text File).\n\nName the file lastname.txt. For example, virdi.txt for me (use your last name). Add some content to this file (for example, I added this to my virdi.txt file: my last name is virdi).\n\nNow you should have a new file (lastname.txt) in the git repository directory check_github_setup\nCheck if git can see that you have added a new file using git status. Git reports that you have a new file that is not tracked by git yet, and suggests adding that file to the git tracking system.\n\nAs seen in this image, git suggests adding that file so it can be tracked for changes. You can add file to git for tracking changes using git add. Then, you can commit changes to this file‚Äôs content using git commit as shown in the image.\ngit add virdi.txt\ngit status\ngit commit -m \"adding a new file\"\ngit status\n\nAs seen in the image above, git is suggesting to push the change that you just committed to the remote server at github.com (so that your collaborators can also see what changes you made).\nNote: DO NOT execute push yet. Before we push to github.com, let‚Äôs configure git further and store our github.com credentials to avoid entering the credentials every time we invoke git push. For doing so, we need to create a token on github.com to be used in place of your github.com password.\n\n\n\nStep 5. Create access token on github.com\n\nGo to your github account and create a new ‚Äúpersonal access token‚Äù: https://github.com/settings/tokens/new\n\n\n\nGenerate Personal Access Token on github.com\n\n\nEnter a description in ‚ÄúNote‚Äù field as seen above, select ‚Äúrepo‚Äù checkbox, and scroll to the bottom and click the green button ‚ÄúGenerate Token‚Äù. Once generated, copy the token (or save it in a text file for reference).\nIMPORTANT: You will see this token only once, so be sure to copy this. If you do not copy your token at this stage, you will need to generate a new token.\n\nTo push (transfer) your changes to github, use git push in terminal. It requires you to enter your github credentials. You will be prompted to enter your github username and ‚Äúpassword‚Äù. When prompted for your ‚Äúpassword‚Äù, DO NOT use your github password, use the github token that was copied in the previous step.\ngit push\n\nNote: When you paste your token in the terminal window, windows users will press Ctrl+V and mac os users will press Cmd+V. If it does not work, try generating another token and use the copy icon next to the token to copy the token. Then, paste using your computer‚Äôs keyboard shortcut for paste.\nNow your password is stored in ~/.git-credentials and you will not be prompted again unless the Github token expires. You can check the presence of this git-credentials file using Terminal. Here the ~ character represents your home directory (/home/jovyan/).\nls -la ~\nThe output looks like this:\ndrwxr-xr-x 13 jovyan jovyan 6144 Oct 22 17:35 .\ndrwxr-xr-x  1 root   root   4096 Oct  4 16:21 ..\n-rw-------  1 jovyan jovyan 1754 Oct 29 18:30 .bash_history\ndrwxr-xr-x  4 jovyan jovyan 6144 Oct 29 16:38 .config\n-rw-------  1 jovyan jovyan   66 Oct 22 17:35 .git-credentials\n-rw-r--r--  1 jovyan jovyan   84 Oct 22 17:14 .gitconfig\ndrwxr-xr-x 10 jovyan jovyan 6144 Oct 21 16:19 2021-Cloud-Hackathon\nYou can also verify your git configuration\n(notebook) jovyan@jupyter-virdi:~$ git config -l\nThe output should have credential.helper = store:\nuser.email        = Makhan.Virdi@gmail.com\nuser.name         = Makhan Virdi\ncredential.helper = store\n\nNow we are all set to collaborate with github on the JupyterHub during the Cloud Hackathon!\n\n\nSummary: Git Commands\n\nCommonly used git commands (modified from source)\n\n\nGit Command\nDescription\n\n\n\n\ngit status\nShows the current state of the repository: the current working branch, files in the staging area, etc.\n\n\ngit add\nAdds a new, previously untracked file to version control and marks already tracked files to be committed with the next commit\n\n\ngit commit\nSaves the current state of the repository and creates an entry in the log\n\n\ngit log\nShows the history for the repository\n\n\ngit diff\nShows content differences between commits, branches, individual files and more\n\n\ngit clone\nCopies a repository to your local environment, including all the history\n\n\ngit pull\nGets the latest changes of a previously cloned repository\n\n\ngit push\nPushes your local changes to the remote repository, sharing them with others\n\n\n\n\n\nGit: More Details\nLesson: For a more detailed self-paced lesson on git, visit Git Lesson from Software Carpentry\nCheatsheet: Frequently used git commands\nDangit, Git!?!: If you are stuck after a git mishap, there are ready-made solutions to common problems at Dangit, Git!?!\n\n\nCloning our repository using the git Jupyter lab extension.\nIf we‚Äôre already familiar with git commands and feel more confortable using a GUI our Jupyterhub deployment comes with a git extension. This plugin allows us to operate with git using a simple user interface.\nFor example we can clone our repository using the extension.\n\n\n\ngit extension"
  },
  {
    "objectID": "content/index.html",
    "href": "content/index.html",
    "title": "Week 1 Tutorials",
    "section": "",
    "text": "During week 1, participants will gain experience with the platforms used in collaborative science: GitHub and RMarkdown."
  },
  {
    "objectID": "content/index.html#prerequisites",
    "href": "content/index.html#prerequisites",
    "title": "Week 1 Tutorials",
    "section": "Prerequisites",
    "text": "Prerequisites\nPlease follow the set up prerequisites"
  },
  {
    "objectID": "content/index.html#content",
    "href": "content/index.html#content",
    "title": "Week 1 Tutorials",
    "section": "Content",
    "text": "Content\n\nThe R language and RStudio\nIntro to RStudio\nIntroduction to Git and GitHub"
  },
  {
    "objectID": "content/jupyter-notebooks.html#summary",
    "href": "content/jupyter-notebooks.html#summary",
    "title": "Jupyter Notebooks - Python",
    "section": "Summary",
    "text": "Summary\nIn this tutorial, we will provide a brief introduction to:\n\nJupyter Notebooks in the JupyterHub\nProgramming in Python (using Jupyter Notebook)\nGeospatial Fundamentals (optional, self-study)\nCommand line (terminal/shell)\nVersion Control (code management using git)"
  },
  {
    "objectID": "content/jupyter-notebooks.html#introduction-programming-in-python",
    "href": "content/jupyter-notebooks.html#introduction-programming-in-python",
    "title": "Jupyter Notebooks - Python",
    "section": "Introduction :: Programming in Python",
    "text": "Introduction :: Programming in Python\nSwitch to Jupyter Notebook for an introduction to programming in Python\n\nVariables (and mathematical operations)\nData Structures (list, tuple, dict)\nFlow Control using loops (for, while)\nConditionals (if, else, elif)\nFunctions\nErrors and Exceptions (understanding and handling errors)\nUsing modules (libraries, packages)\n\npandas: high-performance, easy-to-use data structures and data analysis tools\nrioxarray: based on the rasterio package for working with rasters and xarray\n\n\n\nPython Learning Resources\nSelf-paced lesson on Programming with Python from Software Carpentry"
  },
  {
    "objectID": "content/jupyter-notebooks.html#introduction-geospatial-fundamentals-optional",
    "href": "content/jupyter-notebooks.html#introduction-geospatial-fundamentals-optional",
    "title": "Jupyter Notebooks - Python",
    "section": "Introduction :: Geospatial Fundamentals (Optional)",
    "text": "Introduction :: Geospatial Fundamentals (Optional)\nDetailed self-paced lesson on Fundamentals of Geospatial Raster and Vector Data with Python from Data Carpentry"
  },
  {
    "objectID": "content/jupyter-notebooks.html#jupyter-notebooks-in-earth-sciences",
    "href": "content/jupyter-notebooks.html#jupyter-notebooks-in-earth-sciences",
    "title": "Jupyter Notebooks - Python",
    "section": "Jupyter Notebooks in Earth Sciences",
    "text": "Jupyter Notebooks in Earth Sciences\nThere are many Jupyter Notebooks that you can copy and run in our JupyterHub. Note the ITCOocean JupyterHub is set up for geospatial research and connection to NASA‚Äôs data in the cloud. It is also set up for parallel processing with Dask.\n\nNASA Cloud Hackweek 2022\nOceanHackWeek\nICESat-2 Hackweeks"
  },
  {
    "objectID": "content/jupyter-notebooks.html#pythonconda-environments",
    "href": "content/jupyter-notebooks.html#pythonconda-environments",
    "title": "Jupyter Notebooks - Python",
    "section": "Python/Conda environments",
    "text": "Python/Conda environments\nPython users can create conda environments if they need to install modules. You create a environments.yml file like this:\nname: nsidc\nchannels:\n  - conda-forge\ndependencies:\n  - ipykernel\n  - awscli~=1.21.4\n  - requests\n  - pip\nAnd then in a terminal do this to activate the environment.\nconda env create -f environment.yml --name myenv\nconda activate myenv\nconda list"
  },
  {
    "objectID": "content/notebooks.html#summary",
    "href": "content/notebooks.html#summary",
    "title": "RMarkdown, R, Git",
    "section": "Summary",
    "text": "Summary\nIn this session, we will provide a brief introduction to:\n\nCommand line (terminal/shell)\nVersion Control (code management using git)\nProgramming in Python (using Jupyter Notebook)\nGeospatial Fundamentals (optional, self-study)\n\nYou will need a working knowledge of git and terminal for this hackathon. We will provide an overview of these topics and also share resources for self-paced learning."
  },
  {
    "objectID": "content/notebooks.html#introduction-command-line-terminalshell",
    "href": "content/notebooks.html#introduction-command-line-terminalshell",
    "title": "RMarkdown, R, Git",
    "section": "Introduction :: Command Line (Terminal/Shell)",
    "text": "Introduction :: Command Line (Terminal/Shell)\n\nShell Basics\n\nWhat is Terminal or Shell?\nNavigating Files and Directories\nWorking with Files and Directories\n\n\n\nShell: More Details\nDetailed self-paced lesson on shell: Shell Lesson from Software Carpentry"
  },
  {
    "objectID": "content/notebooks.html#introduction-version-control-git-and-github",
    "href": "content/notebooks.html#introduction-version-control-git-and-github",
    "title": "RMarkdown, R, Git",
    "section": "Introduction :: Version Control (Git and Github)",
    "text": "Introduction :: Version Control (Git and Github)\n\nWhat is version control, git, github, and how to set it up?\nVersion control is managing and tracking changes to your documents (program source code, images, websites, data files, etc.). git is a popular tool used for version control of software code. github.com is popular platform that provides remote server hosting for git repositories. A repository is a collection of various files that you are tracking for changes and versions (think of it as a directory with files that are being tracked for changes, using git for taking snapshots of versions as you are developing).\nThis section is a step-by-step guide to set up git on your 2i2c JupyterHub instance (referred to as 2i2c JupyterHub in these instruction). We will also configure git to use your github.com account for managing your repositories hosted on github.com. There are 5 main steps with substeps, includes instruction for addressing github‚Äôs new approach for token authentication.\n\n\nStep 1: Create a github account\nTo complete the setup, you will need an account on github.com. If you don‚Äôt have an account, please visit github.com, create an account (free) and come back to this guide for setting up git.\n\n\nStep 2: Fork a repository\nA fork is a copy of a repository from another github account (for example NASA-Openscapes account) to your github account (for example, my account virdi) that then you have permission to edit. To help you finish this setup correctly, we have created a demo repository on Openscapes github account named check_github_setup. You can fork this repository into your github account following these steps:\n\nLog in to your github.com account\nGo to the demo repository at NASA-Openscapes github\n\nClick on the fork icon in the top right corner, as shown in the image below and click your user name if prompted to do so\n\n\n\n\nStep 3: Clone the repository that you just forked\nNow you have a fork of the demo repository in your github account that we can clone it in your 2i2c instance. In the code below, commands beginning with git is a git command for version control and synching; commands that don‚Äôt start with git are bash/linux/command line commands.\n\nStart your 2i2c JupyterHub and open a terminal\nFile &gt;&gt; New &gt;&gt; Terminal\nMake sure you are in your home directory by usingpwd command and verifying the output as below\n/home/jovyan\n\nConfigure git with your name and email address.\ngit config --global user.name \"Makhan Virdi\"\ngit config --global user.email \"Makhan.Virdi@gmail.com\"\nNote: This name and email could be different from your github.com credentials. Remember git is a program that keeps track of your changes locally (on 2i2c JupyterHub or your own computer) and github.com is a platform to host your repositories. However, since your changes are tracked by git, the email/name used in git configuration will show up next to your contributions on github.com when you push your repository to github.com (git push is discussed in a later step).\nConfigure git to store your github credentials to avoid having to enter your github username and token each time you push changes to your repository(in Step 5, we will describe how to use github token instead of a password)\ngit config --global credential.helper store\nCopy link for the demo repository from your github account. Click the green ‚ÄúCode‚Äù button and copy the link as shown.\n\nClone the repository using git clone command in the terminal\nTo clone a repository from github, copy the link for the repository (previous step) and use git clone:\ngit clone https://github.com/YOUR-GITHUB-USERNAME/check_github_setup\nNote: Replace YOUR-GITHUB-USERNAME here with your github.com username. For example, it is virdi for my github.com account as seen in this image.\n\nUse ls (list files) to verify the existence of the repository that you just cloned\n\nChange directory to the cloned repository using cd check_github_setup and check the current directory using pwd command (present working directory)\n\nCheck status of your git repository to confirm git set up using git status\n\nYou are all set with using git on your 2i2c JupyterHub! But the collaborative power of git through github needs some additional setup.\nIn the next step, we will create a new file in this repository, track changes to this file, and link it with your github.com account.\n\n\n\nStep 4. Creating new file and tracking changes\n\nIn the left panel on your 2i2c JupyterHub, click on the ‚Äúdirectory‚Äù icon and then double click on ‚Äúcheck_github_setup‚Äù directory.\n\n\nOnce you are in the check_github_setup directory, create a new file using the text editor in your 2i2c JupyterHub (File &gt;&gt; New &gt;&gt; Text File).\n\nName the file lastname.txt. For example, virdi.txt for me (use your last name). Add some content to this file (for example, I added this to my virdi.txt file: my last name is virdi).\n\nNow you should have a new file (lastname.txt) in the git repository directory check_github_setup\nCheck if git can see that you have added a new file using git status. Git reports that you have a new file that is not tracked by git yet, and suggests adding that file to the git tracking system.\n\nAs seen in this image, git suggests adding that file so it can be tracked for changes. You can add file to git for tracking changes using git add. Then, you can commit changes to this file‚Äôs content using git commit as shown in the image.\ngit add virdi.txt\ngit status\ngit commit -m \"adding a new file\"\ngit status\n\nAs seen in the image above, git is suggesting to push the change that you just committed to the remote server at github.com (so that your collaborators can also see what changes you made).\nNote: DO NOT execute push yet. Before we push to github.com, let‚Äôs configure git further and store our github.com credentials to avoid entering the credentials every time we invoke git push. For doing so, we need to create a token on github.com to be used in place of your github.com password.\n\n\n\nStep 5. Create access token on github.com\n\nGo to your github account and create a new ‚Äúpersonal access token‚Äù: https://github.com/settings/tokens/new\n\n\n\nGenerate Personal Access Token on github.com\n\n\nEnter a description in ‚ÄúNote‚Äù field as seen above, select ‚Äúrepo‚Äù checkbox, and scroll to the bottom and click the green button ‚ÄúGenerate Token‚Äù. Once generated, copy the token (or save it in a text file for reference).\nIMPORTANT: You will see this token only once, so be sure to copy this. If you do not copy your token at this stage, you will need to generate a new token.\n\nTo push (transfer) your changes to github, use git push in terminal. It requires you to enter your github credentials. You will be prompted to enter your github username and ‚Äúpassword‚Äù. When prompted for your ‚Äúpassword‚Äù, DO NOT use your github password, use the github token that was copied in the previous step.\ngit push\n\nNote: When you paste your token in the terminal window, windows users will press Ctrl+V and mac os users will press Cmd+V. If it does not work, try generating another token and use the copy icon next to the token to copy the token. Then, paste using your computer‚Äôs keyboard shortcut for paste.\nNow your password is stored in ~/.git-credentials and you will not be prompted again unless the Github token expires. You can check the presence of this git-credentials file using Terminal. Here the ~ character represents your home directory (/home/jovyan/).\nls -la ~\nThe output looks like this:\ndrwxr-xr-x 13 jovyan jovyan 6144 Oct 22 17:35 .\ndrwxr-xr-x  1 root   root   4096 Oct  4 16:21 ..\n-rw-------  1 jovyan jovyan 1754 Oct 29 18:30 .bash_history\ndrwxr-xr-x  4 jovyan jovyan 6144 Oct 29 16:38 .config\n-rw-------  1 jovyan jovyan   66 Oct 22 17:35 .git-credentials\n-rw-r--r--  1 jovyan jovyan   84 Oct 22 17:14 .gitconfig\ndrwxr-xr-x 10 jovyan jovyan 6144 Oct 21 16:19 2021-Cloud-Hackathon\nYou can also verify your git configuration\n(notebook) jovyan@jupyter-virdi:~$ git config -l\nThe output should have credential.helper = store:\nuser.email        = Makhan.Virdi@gmail.com\nuser.name         = Makhan Virdi\ncredential.helper = store\n\nNow we are all set to collaborate with github on the JupyterHub during the Cloud Hackathon!\n\n\nSummary: Git Commands\n\nCommonly used git commands (modified from source)\n\n\nGit Command\nDescription\n\n\n\n\ngit status\nShows the current state of the repository: the current working branch, files in the staging area, etc.\n\n\ngit add\nAdds a new, previously untracked file to version control and marks already tracked files to be committed with the next commit\n\n\ngit commit\nSaves the current state of the repository and creates an entry in the log\n\n\ngit log\nShows the history for the repository\n\n\ngit diff\nShows content differences between commits, branches, individual files and more\n\n\ngit clone\nCopies a repository to your local environment, including all the history\n\n\ngit pull\nGets the latest changes of a previously cloned repository\n\n\ngit push\nPushes your local changes to the remote repository, sharing them with others\n\n\n\n\n\nGit: More Details\nLesson: For a more detailed self-paced lesson on git, visit Git Lesson from Software Carpentry\nCheatsheet: Frequently used git commands\nDangit, Git!?!: If you are stuck after a git mishap, there are ready-made solutions to common problems at Dangit, Git!?!\n\n\nCloning our repository using the git Jupyter lab extension.\nIf we‚Äôre already familiar with git commands and feel more confortable using a GUI our Jupyterhub deployment comes with a git extension. This plugin allows us to operate with git using a simple user interface.\nFor example we can clone our repository using the extension.\n\n\n\ngit extension"
  },
  {
    "objectID": "content/notebooks.html#introduction-programming-in-python",
    "href": "content/notebooks.html#introduction-programming-in-python",
    "title": "RMarkdown, R, Git",
    "section": "Introduction :: Programming in Python",
    "text": "Introduction :: Programming in Python"
  },
  {
    "objectID": "content/notebooks.html#introduction-programming-in-python-1",
    "href": "content/notebooks.html#introduction-programming-in-python-1",
    "title": "RMarkdown, R, Git",
    "section": "Introduction :: Programming in Python",
    "text": "Introduction :: Programming in Python\nSwitch to Jupyter Notebook for an introduction to programming in Python\n\nVariables (and mathematical operations)\nData Structures (list, tuple, dict)\nFlow Control using loops (for, while)\nConditionals (if, else, elif)\nFunctions\nErrors and Exceptions (understanding and handling errors)\nUsing modules (libraries, packages)\n\npandas: high-performance, easy-to-use data structures and data analysis tools\nrioxarray: based on the rasterio package for working with rasters and xarray\n\n\n\nPython Learning Resources\nSelf-paced lesson on Programming with Python from Software Carpentry"
  },
  {
    "objectID": "content/notebooks.html#introduction-geospatial-fundamentals-optional",
    "href": "content/notebooks.html#introduction-geospatial-fundamentals-optional",
    "title": "RMarkdown, R, Git",
    "section": "Introduction :: Geospatial Fundamentals (Optional)",
    "text": "Introduction :: Geospatial Fundamentals (Optional)\nDetailed self-paced lesson on Fundamentals of Geospatial Raster and Vector Data with Python from Data Carpentry\nThe end!"
  },
  {
    "objectID": "content/shell.html#summary",
    "href": "content/shell.html#summary",
    "title": "Terminal or Shell",
    "section": "Summary",
    "text": "Summary\nIn this tutorial, we will provide a brief introduction to\n\nWhat is the terminal/shell\nHow to get to the terminal in Jupyter Lab and RStudio\nNavigating around folders in the terminal\nClosing the terminal window"
  },
  {
    "objectID": "content/shell.html#what-is-the-terminal-or-shell",
    "href": "content/shell.html#what-is-the-terminal-or-shell",
    "title": "Terminal or Shell",
    "section": "What is the terminal or shell?",
    "text": "What is the terminal or shell?\nA way to interact with your computer from text commands instead of a graphical user interface (GUI). There are a few different types of shells and there are slight differences in syntax. However, we will be using very basic commands so the syntax difference won‚Äôt affect us.\nWhen in a terminal window you can type echo $0 to find out what shell type you are in."
  },
  {
    "objectID": "content/shell.html#introduction-terminalshell",
    "href": "content/shell.html#introduction-terminalshell",
    "title": "Terminal or Shell",
    "section": "Introduction :: Terminal/Shell",
    "text": "Introduction :: Terminal/Shell\n\nRStudio\nLog into the JupyterHub. If you do not see this\n\nThen go to File &gt; New Launcher\nClick on the RStudio box to open RStudio.\n\n\nJupyter Lab\nLog into the JupyterHub. If you do not see this\n\nThen go to File &gt; New Launcher\nClick on the ‚ÄúTerminal‚Äù box to open a new terminal window.\n\n\nShell or Terminal Basics\n\nWhat is Terminal or Shell?\nNavigating Files and Directories\nWorking with Files and Directories\nOptional: Detailed self-paced lesson on running scripts from the shell: Shell Lesson from Software Carpentry\n\nYou will need only basic navigation skills for this course: cd, ls and cat\n\npwd where am I\ncd nameofdir move into a directory\ncd .. move up a directory\nls list the files in the current directory\nls -a list the files including hidden files\nls -l list the files with more info\ncat filename print out the contents of a file\n\n\n\nLet‚Äôs try\nls\nls -a\ncd shared\nls\ncd shell-tutorial\ncat lesson1.sh\ncd ..\ncd ..\n\n\nClose the terminal\nJust click on the X in the terminal tab"
  },
  {
    "objectID": "content/shell.html#introduction-file-navigation",
    "href": "content/shell.html#introduction-file-navigation",
    "title": "Terminal or Shell",
    "section": "Introduction :: File Navigation",
    "text": "Introduction :: File Navigation\nIn the far left, you will see a line of icons. The top one is a folder and allows us to move around our file system.\n\nClick on shared. Now you can see the files in the shared directory.\nClick on shell-tutorial. Then click on lesson1.sh. The file opens. You won‚Äôt be able to save changes here because you don‚Äôt have write permission on this drive.\nClick on the folder icon that looks like this. Click on the actual folder image. \nNow it should look like this folder /\nThis shows me doing this\n\nCreate a new folder.\n\nNext to the blue rectange with a +, is a grey folder with a +. Click that to create a new folder, called lesson-scripts.\nThen click on lesson-scripts to enter the folder\n\n\nCreate a new file\n\nCreate with File &gt; New &gt; Text file\nThe file will open and you can edit it.\nSave with File &gt; Save Text\nDelete the file by right-clicking on it and clicking ‚ÄúDelete‚Äù"
  },
  {
    "objectID": "content/shell.html#introduction-version-control-git",
    "href": "content/shell.html#introduction-version-control-git",
    "title": "Terminal or Shell",
    "section": "Introduction :: Version Control (Git)",
    "text": "Introduction :: Version Control (Git)\n\nWhat is version control, git, github, and how to set it up?\nVersion control is managing and tracking changes to your documents (program source code, images, websites, data files, etc.). git is a popular tool used for version control of software code. github.com is popular platform that provides remote server hosting for git repositories. A repository is a collection of various files that you are tracking for changes and versions. Currently GitHub is the most popular platform for file sharing code and code packages.\nThis section is a step-by-step guide to set up git on our 2i2c JupyterHub. We will also configure git to use your github.com account for managing your repositories hosted on github.com. There are 5 main steps.\n\n\nStep 1: Create a GitHub account\nTo complete the setup, you will need an account on github.com. If you don‚Äôt have an account, please visit github.com, create an account (free) and come back to this guide for setting up git.\n\n\nStep 2: Clone a repository\nWe have created a demo repository for you to clone:\nhttps://github.com/Hackweek-ITCOocean/Git-Lesson\n\nStart your 2i2c JupyterHub\nClick on the Git icon\n\n\n\nClick ‚ÄúClone a Repository‚Äù\nWhere is says ‚ÄúEnter the URI of the remote Git repository‚Äù, paste in the URL https://github.com/Hackweek-ITCOocean/Git-Lesson\nThe folder appears and you can enter the folder and edit and create files.\n\n\nYour task: Create a file with your name and save to the Git-Lesson folder"
  },
  {
    "objectID": "content/shell.html#step-3",
    "href": "content/shell.html#step-3",
    "title": "Terminal or Shell",
    "section": "Step 3:",
    "text": "Step 3:\nConfigure git with your name and email address.\n``` bash\ngit config --global user.name \"Makhan Virdi\"\ngit config --global user.email \"Makhan.Virdi@gmail.com\"\n```\n\n**Note:** This name and email could be different from your github.com credentials. Remember `git` is a program that keeps track of your changes locally (on 2i2c JupyterHub or your own computer) and github.com is a platform to host your repositories. However, since your changes are tracked by `git`, the email/name used in git configuration will show up next to your contributions on github.com when you `push` your repository to github.com (`git push` is discussed in a later step).\n\nConfigure git to store your github credentials to avoid having to enter your github username and token each time you push changes to your repository(in Step 5, we will describe how to use github token instead of a password)\ngit config --global credential.helper store\nCopy link for the demo repository from your github account. Click the green ‚ÄúCode‚Äù button and copy the link as shown.\n\nClone the repository using git clone command in the terminal\nTo clone a repository from github, copy the link for the repository (previous step) and use git clone:\ngit clone https://github.com/YOUR-GITHUB-USERNAME/check_github_setup\nNote: Replace YOUR-GITHUB-USERNAME here with your github.com username. For example, it is virdi for my github.com account as seen in this image.\n\nUse ls (list files) to verify the existence of the repository that you just cloned\n\nChange directory to the cloned repository using cd check_github_setup and check the current directory using pwd command (present working directory)\n\nCheck status of your git repository to confirm git set up using git status\n\nYou are all set with using git on your 2i2c JupyterHub! But the collaborative power of git through github needs some additional setup.\nIn the next step, we will create a new file in this repository, track changes to this file, and link it with your github.com account.\n\n\nStep 4. Creating new file and tracking changes\n\nIn the left panel on your 2i2c JupyterHub, click on the ‚Äúdirectory‚Äù icon and then double click on ‚Äúcheck_github_setup‚Äù directory.\n\n\nOnce you are in the check_github_setup directory, create a new file using the text editor in your 2i2c JupyterHub (File &gt;&gt; New &gt;&gt; Text File).\n\nName the file lastname.txt. For example, virdi.txt for me (use your last name). Add some content to this file (for example, I added this to my virdi.txt file: my last name is virdi).\n\nNow you should have a new file (lastname.txt) in the git repository directory check_github_setup\nCheck if git can see that you have added a new file using git status. Git reports that you have a new file that is not tracked by git yet, and suggests adding that file to the git tracking system.\n\nAs seen in this image, git suggests adding that file so it can be tracked for changes. You can add file to git for tracking changes using git add. Then, you can commit changes to this file‚Äôs content using git commit as shown in the image.\ngit add virdi.txt\ngit status\ngit commit -m \"adding a new file\"\ngit status\n\nAs seen in the image above, git is suggesting to push the change that you just committed to the remote server at github.com (so that your collaborators can also see what changes you made).\nNote: DO NOT execute push yet. Before we push to github.com, let‚Äôs configure git further and store our github.com credentials to avoid entering the credentials every time we invoke git push. For doing so, we need to create a token on github.com to be used in place of your github.com password.\n\n\n\nStep 5. Create access token on github.com\n\nGo to your github account and create a new ‚Äúpersonal access token‚Äù: https://github.com/settings/tokens/new\n\n\n\nGenerate Personal Access Token on github.com\n\n\nEnter a description in ‚ÄúNote‚Äù field as seen above, select ‚Äúrepo‚Äù checkbox, and scroll to the bottom and click the green button ‚ÄúGenerate Token‚Äù. Once generated, copy the token (or save it in a text file for reference).\nIMPORTANT: You will see this token only once, so be sure to copy this. If you do not copy your token at this stage, you will need to generate a new token.\n\nTo push (transfer) your changes to github, use git push in terminal. It requires you to enter your github credentials. You will be prompted to enter your github username and ‚Äúpassword‚Äù. When prompted for your ‚Äúpassword‚Äù, DO NOT use your github password, use the github token that was copied in the previous step.\ngit push\n\nNote: When you paste your token in the terminal window, windows users will press Ctrl+V and mac os users will press Cmd+V. If it does not work, try generating another token and use the copy icon next to the token to copy the token. Then, paste using your computer‚Äôs keyboard shortcut for paste.\nNow your password is stored in ~/.git-credentials and you will not be prompted again unless the Github token expires. You can check the presence of this git-credentials file using Terminal. Here the ~ character represents your home directory (/home/jovyan/).\nls -la ~\nThe output looks like this:\ndrwxr-xr-x 13 jovyan jovyan 6144 Oct 22 17:35 .\ndrwxr-xr-x  1 root   root   4096 Oct  4 16:21 ..\n-rw-------  1 jovyan jovyan 1754 Oct 29 18:30 .bash_history\ndrwxr-xr-x  4 jovyan jovyan 6144 Oct 29 16:38 .config\n-rw-------  1 jovyan jovyan   66 Oct 22 17:35 .git-credentials\n-rw-r--r--  1 jovyan jovyan   84 Oct 22 17:14 .gitconfig\ndrwxr-xr-x 10 jovyan jovyan 6144 Oct 21 16:19 2021-Cloud-Hackathon\nYou can also verify your git configuration\n(notebook) jovyan@jupyter-virdi:~$ git config -l\nThe output should have credential.helper = store:\nuser.email        = Makhan.Virdi@gmail.com\nuser.name         = Makhan Virdi\ncredential.helper = store\n\nNow we are all set to collaborate with github on the JupyterHub during the Cloud Hackathon!\n\n\nSummary: Git Commands\n\nCommonly used git commands (modified from source)\n\n\nGit Command\nDescription\n\n\n\n\ngit status\nShows the current state of the repository: the current working branch, files in the staging area, etc.\n\n\ngit add\nAdds a new, previously untracked file to version control and marks already tracked files to be committed with the next commit\n\n\ngit commit\nSaves the current state of the repository and creates an entry in the log\n\n\ngit log\nShows the history for the repository\n\n\ngit diff\nShows content differences between commits, branches, individual files and more\n\n\ngit clone\nCopies a repository to your local environment, including all the history\n\n\ngit pull\nGets the latest changes of a previously cloned repository\n\n\ngit push\nPushes your local changes to the remote repository, sharing them with others\n\n\n\n\n\nGit: More Details\nLesson: For a more detailed self-paced lesson on git, visit Git Lesson from Software Carpentry\nCheatsheet: Frequently used git commands\nDangit, Git!?!: If you are stuck after a git mishap, there are ready-made solutions to common problems at Dangit, Git!?!\n\n\nCloning our repository using the git Jupyter lab extension.\nIf we‚Äôre already familiar with git commands and feel more confortable using a GUI our Jupyterhub deployment comes with a git extension. This plugin allows us to operate with git using a simple user interface.\nFor example we can clone our repository using the extension.\n\n\n\ngit extension"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Machine Learning based Species Distribution Modelling",
    "section": "",
    "text": "Welcome to the Sept 2023 training course on Machine Learning based Species Distribution Modelling hosted by the International Training Centre for Operational Oceanography (ITCOocean), ESSO-INCOIS, Hyderabad, India.\nThe course and hackweek will take place at the ITCOocean Training Centre in Hyderabad, India from September 11-22, 2023. course announcement. The application period for the 2023 course has closed."
  },
  {
    "objectID": "index.html#links",
    "href": "index.html#links",
    "title": "Machine Learning based Species Distribution Modelling",
    "section": "Links",
    "text": "Links\n\nCourse GitHub org: https://github.com/Hackweek-ITCOocean\nJupyterHub: https://itcoocean.2i2c.cloud/\nDiscussions: https://github.com/orgs/Hackweek-ITCOocean/discussions\nSlack: https://app.slack.com/client/T05PV2USY56/C05P7QP47UL"
  },
  {
    "objectID": "nasa-tutorials/00_Setup.html",
    "href": "nasa-tutorials/00_Setup.html",
    "title": "00. Setup for tutorials",
    "section": "",
    "text": "This tutorial will help you set up your JupyterHub (or Hub) with tutorials and other materials from our Cloud Hackathon github repository and connect your github account."
  },
  {
    "objectID": "nasa-tutorials/00_Setup.html#step-1.-login-to-the-hub",
    "href": "nasa-tutorials/00_Setup.html#step-1.-login-to-the-hub",
    "title": "00. Setup for tutorials",
    "section": "Step 1. Login to the Hub",
    "text": "Step 1. Login to the Hub\nPlease go to the Openscapes Jupyter Hub. Log in with your GitHub Account, and select ‚ÄúSmall‚Äù.\n\n\nNote: It takes a few minutes for the Hub to load. Please be patient!\n\nWhile the Hub loads, we‚Äôll:\n\nDiscuss cloud environments\nSee how my Desktop is setup\nFork the Hackathon repository at github.com\nDiscuss python and conda environments\n\nThen, when the Hub is loaded, we‚Äôll get oriented in the Hub and clone the forked repository into our cloud environment."
  },
  {
    "objectID": "nasa-tutorials/00_Setup.html#discussion-cloud-environment",
    "href": "nasa-tutorials/00_Setup.html#discussion-cloud-environment",
    "title": "00. Setup for tutorials",
    "section": "Discussion: Cloud environment",
    "text": "Discussion: Cloud environment\nA brief overview about the NASA Openscapes Cloud Environment (following lessons from the Clinic).\n\nCloud infrastructure\n\nCloud: AWS us-west-2\n\nData: AWS S3 (cloud) and NASA DAAC data centers (on-prem).\nCloud compute environment: 2i2c Jupyterhub deployment\n\nIDE: JupyterLab"
  },
  {
    "objectID": "nasa-tutorials/00_Setup.html#discussion-my-desktop-setup",
    "href": "nasa-tutorials/00_Setup.html#discussion-my-desktop-setup",
    "title": "00. Setup for tutorials",
    "section": "Discussion: My desktop setup",
    "text": "Discussion: My desktop setup\nI‚Äôll screenshare to show and/or talk through how I have oriented the following software we‚Äôre using:\n\n2i2c Jupyterhub (our main workspace)\nHackathon Repo &lt;&gt; Hackathon Book (my teaching notes, your reference material)\nZoom Chat\nSlack"
  },
  {
    "objectID": "nasa-tutorials/00_Setup.html#step-2.-fork-the-hackathon-github-repository",
    "href": "nasa-tutorials/00_Setup.html#step-2.-fork-the-hackathon-github-repository",
    "title": "00. Setup for tutorials",
    "section": "Step 2. Fork the Hackathon GitHub repository",
    "text": "Step 2. Fork the Hackathon GitHub repository\n‚ÄúHow do I get the tutorial repository into the Hub?‚Äù. There are 2 steps. The first is from GitHub.com to fork the tutorial repository so that there is a connected copy in your user account that you can edit and push changes that won‚Äôt affect the nasa-openscapes copy.\nGo to https://github.com/nasa-openscapes/2021-Cloud-Hackathon and fork the repository.\n\nNote: if you‚Äôve already done this in the Pre-Hackathon Clinic, you‚Äôll need to make sure you have the latest, following the daily setup instructions."
  },
  {
    "objectID": "nasa-tutorials/00_Setup.html#discussion-python-and-conda-environments",
    "href": "nasa-tutorials/00_Setup.html#discussion-python-and-conda-environments",
    "title": "00. Setup for tutorials",
    "section": "Discussion: Python and Conda environments",
    "text": "Discussion: Python and Conda environments\nWhy Python?\n\n\n\nPython Data Stack. Source: Jake VanderPlas, ‚ÄúThe State of the Stack,‚Äù SciPy Keynote (SciPy 2015).\n\n\nDefault Python Environment:\nWe‚Äôve set up the Python environment with conda.\n\n\n\n\n\n\nConda environment\n\n\n\n\n\nname: openscapes\nchannels:\n  - conda-forge\ndependencies:\n  - python=3.9\n  - pangeo-notebook\n  - awscli~=1.20\n  - boto3~=1.19\n  - gdal~=3.3\n  - rioxarray~=0.8\n  - xarray~=0.19\n  - h5netcdf~=0.11\n  - netcdf4~=1.5\n  - h5py~=2.10\n  - geoviews~=1.9\n  - matplotlib-base~=3.4\n  - hvplot~=0.7\n  - pyproj~=3.2\n  - bqplot~=0.12\n  - geopandas~=0.10\n  - zarr~=2.10\n  - cartopy~=0.20\n  - shapely==1.7.1\n  - pyresample~=1.22\n  - joblib~=1.1\n  - pystac-client~=0.3\n  - s3fs~=2021.7\n  - ipyleaflet~=0.14\n  - sidecar~=0.5\n  - jupyterlab-geojson~=3.1\n  - jupyterlab-git\n  - jupyter-resource-usage\n  - ipympl~=0.6\n  - conda-lock~=0.12\n  - pooch~=1.5\n  - pip\n  - pip:\n    - tqdm\n    - harmony-py\n    - earthdata\n    - zarr-eosdis-store\n\n\n\n\nBash terminal and installed software\nLibraries that are available from the terminal\n\ngdal 3.3 commands ( gdalinfo, gdaltransform‚Ä¶)\nhdf5 commands ( h5dump, h5ls..)\nnetcdf4 commands (ncdump, ncinfo ‚Ä¶)\njq (parsing json files or streams from curl)\ncurl (fetch resources from the web)\nawscli (AWS API client, to interact with AWS cloud services)\nvim (editor)\ntree ( directory tree)\nmore ‚Ä¶\n\n\n\nUpdating the environment\nScientific Python is a vast space and we only included libraries that are needed in our tutorials. Our default environment can be updated to include any Python library that‚Äôs available on pip or conda.\nThe project used to create our default environment is called corn (as it can include many Python kernels).\nIf we want to update a library or install a whole new environment we need to open an issue on this repository. We can help your teams do this during project hacktime.\n\n\ncorn üåΩ"
  },
  {
    "objectID": "nasa-tutorials/00_Setup.html#step-3.-jupyterhub-orientation",
    "href": "nasa-tutorials/00_Setup.html#step-3.-jupyterhub-orientation",
    "title": "00. Setup for tutorials",
    "section": "Step 3. JupyterHub orientation",
    "text": "Step 3. JupyterHub orientation\nNow that the Hub is loaded, let‚Äôs get oriented.\n\n\n\n\n\n\nFirst impressions\n\nLauncher & the big blue button\n‚Äúhome directory‚Äù"
  },
  {
    "objectID": "nasa-tutorials/00_Setup.html#step-4.-clone-the-hackathon-github-repository",
    "href": "nasa-tutorials/00_Setup.html#step-4.-clone-the-hackathon-github-repository",
    "title": "00. Setup for tutorials",
    "section": "Step 4. Clone the Hackathon GitHub repository",
    "text": "Step 4. Clone the Hackathon GitHub repository\nNow we‚Äôll clone the GitHub repository, using a git extension for the JupyterHub. Go to your github account, and navigate to the repository that you just created by forking from the Openscapes repository.\nClick to copy the url for cloning the repository.\n\nNow, go to JupyterHub and click on the git extension in the left panel and then click the blue button ‚ÄúClone a Repository‚Äù.\n\nThen, paste the repository link to the forked repository that you copied from your github account into the ‚ÄúClone a repo‚Äù pop up window. Then click the blue ‚ÄúCLONE‚Äù button. It will take a few moments to clone the repository into your Hub.\nYour link should look like https://github.com/YOUR-USERNAME/2021-Cloud-Hackathon. For example, the link is https://github.com/virdi/2021-Cloud-Hackathon. Note that it include your github username in the repo link.\n\nAlternatively, you can use the terminal (command line) as per github workflows: first-time setup.\nOnce the repository is cloned, you will see a new directory in the ‚ÄúFile Browser‚Äù panel on the left named ‚Äú2021-Cloud-Hackathon‚Äù. In this directory, you have all hackathon material including the tutorials and this book to follow along during other Tutorials. You are all set.\n\n\nREMEMBER: This is your copy (or fork) of the hackathon materials and jupyter notebooks. So feel free to make any changes to the content of this repository."
  },
  {
    "objectID": "nasa-tutorials/00_Setup.html#jupyter-notebooks",
    "href": "nasa-tutorials/00_Setup.html#jupyter-notebooks",
    "title": "00. Setup for tutorials",
    "section": "Jupyter notebooks",
    "text": "Jupyter notebooks\nLet‚Äôs get oriented to Jupyter notebooks, which we‚Äôll use in all the tutorials."
  },
  {
    "objectID": "nasa-tutorials/00_Setup.html#how-do-i-end-my-session",
    "href": "nasa-tutorials/00_Setup.html#how-do-i-end-my-session",
    "title": "00. Setup for tutorials",
    "section": "How do I end my session?",
    "text": "How do I end my session?\n(Also see How do I end my Openscapes session? Will I lose all of my work?)\nWhen you are finished working for the day it is important to explicitly log out of your Openscapes session. The reason for this is it will save us a bit of money! When you keep a session active it uses up AWS resources and keeps a series of virtual machines deployed.\nStopping the server happens automatically when you log out, so navigate to ‚ÄúFile -&gt; Log Out‚Äù and just click ‚ÄúLog Out‚Äù!\n!!! NOTE ‚Äúlogging out‚Äù - Logging out will NOT cause any of your work to be lost or deleted. It simply shuts down some resources. It would be equivalent to turning off your desktop computer at the end of the day."
  },
  {
    "objectID": "nasa-tutorials/00_Setup.html#step-5.-tracking-changes-optional",
    "href": "nasa-tutorials/00_Setup.html#step-5.-tracking-changes-optional",
    "title": "00. Setup for tutorials",
    "section": "Step 5. Tracking changes (Optional)",
    "text": "Step 5. Tracking changes (Optional)\nNow that you have forked and cloned the repository in your Hub, you can make changes (edit, add, and/or delete content) and track these files using git. In this step, we will provide an overview of how to use git using the graphical interface (the JupyterLab git extension).\n\nStep 5.1. Configure Git (git config)\nConfigure git with your name and email address as shown here.\ngit config --global user.name \"Makhan Virdi\"\ngit config --global user.email \"Makhan.Virdi@gmail.com\"\nOpen a new terminal: File &gt;&gt; New &gt;&gt; Terminal\n\nConfigure git to store your github credentials to avoid having to enter your github username and token each time you push changes to your repository(in Step 5.5, we will describe how to use github token instead of a password)\ngit config --global credential.helper store\n\n\nStep 5.2. Create a new file\nLet‚Äôs create a new file: In the left panel on your Hub, click on the ‚Äúdirectory‚Äù icon and then double click on ‚Äú2021-Cloud-Hackathon‚Äù directory. Then, create a new file using the text editor in your 2i2c JupyterHub (File &gt;&gt; New &gt;&gt; Text File). Add some text to this file, for example: A test file. Save this file and rename it to test.txt.\n\n\n\nStep 5.3. Track the changes to the new file (git add)\nClick the git icon in the left panel. You can see that the newly added file is in the ‚ÄúUntracked‚Äù section. You can click the + icon next to the file name to let git track this file for changes.\n\n\n\nStep 5.4. Commit the changes to the new file (git commit)\nNow, you will see that the file is Staged, which means that git is ready to take a snapshot of this file (and the repository) with the changes that you made. This snapshot is called a commit. To commit the changes, add a note (called a commit message) by typing in the text box that say ‚ÄúSummary‚Äù.\nNow, click the blue ‚ÄúCOMMIT‚Äù button to commit this change.\n\nNote: A short message indicating the type of change to this file is a good practice. Optionally, a longer description may be added to the ‚ÄúDescription‚Äù field.\n\n\n\n\nStep 5.5. Transmit committed changes to your github (git push)\nAt this stage, you have committed the changes to your git repository on your Hub. However, these changes are still on your Hub and needs to be transmitted to your repository on github (so that both the local copy on the JupyterHub and the remote copy on github are in sync).\nAs seen in the picture below, the git extension indicates (with an orange dot on the cloud icon) that it is ready to push your changes to the remote (remote = your repository on github.com). To push to github, click the cloud button with an up arrow (circled in red in the picture).\n\nWhen you push for the first time, it will ask that you input your credentials. You will need to set this up with your Personal Access Token (PAT), explained next.\n\n\nStep 5.6. Setup your Personal Access Token (PAT)\nWhen you see the following screenshot, GitHub is asking for you to input your credentials. (Note: you see this screenshot when you have committed work to push to GitHub.com, as detailed above).\n\nThe git extension in the Hub is prompting you to enter your github.com credentials. Enter you github.com username and a Personal Access Token (PAT); DO NOT use your password.\nTo create a PAT, visit https://github.com/settings/tokens/new and create a new token with the permission as per the image below and specify its validity for 90 days.\n\nIMPORTANT: You will see this token only once, so be sure to copy this. If you do not copy your token at this stage, you will need to generate a new token.\n\nOnce you generate the token, copy it and paste in the Hub window that prompted you to enter the ‚ÄúPersonal Access Token‚Äù.\n\nGit will show a message at the bottom right telling that the changes were ‚ÄúSuccessfully pushed‚Äù. Also, you will see that the ‚Äúcloud icon with an up arrow‚Äù no longer has an orange dot, indicating that there are no more committed changes to push to the remote (github.com).\n\nNote: You have configured git extension to store your credentials. You will not be prompted for your login/token again!\n\n\nThat‚Äôs all. You can use the same workflow (add &gt; commit &gt; push) for any other new or modified files!\n\n\nNote: If you are comfortable with the command line, you can use the Terminal (In Hub, New &gt; Terminal) and follow the steps outlined in the Clinic section."
  },
  {
    "objectID": "nasa-tutorials/index.html",
    "href": "nasa-tutorials/index.html",
    "title": "Tutorials Overview",
    "section": "",
    "text": "These tutorials are written in RMarkdown (R) and Jupyter Notebooks (Python)."
  },
  {
    "objectID": "nasa-tutorials/index.html#rmarkdown",
    "href": "nasa-tutorials/index.html#rmarkdown",
    "title": "Tutorials Overview",
    "section": "RMarkdown",
    "text": "RMarkdown\n\nOpen in RStudio\nRun code by clicking on the Run icon above a code chunk"
  },
  {
    "objectID": "nasa-tutorials/index.html#jupyter-notebook",
    "href": "nasa-tutorials/index.html#jupyter-notebook",
    "title": "Tutorials Overview",
    "section": "Jupyter Notebook",
    "text": "Jupyter Notebook\n\nOpen in Jupyter Notebook\nRun code by clicking on the code and clicking the little arrow at the top or by typing shift-return."
  },
  {
    "objectID": "overview.html",
    "href": "overview.html",
    "title": "Overview",
    "section": "",
    "text": "The the era of big data in the earth sciences is here and learning how to effectively use oceanographic remote-sensing data, both in the cloud and on your computer, is a core skill for modern fisheries science and management. Learning how to access cloud-based data, visualize these data, use these data in models, and use the tools of modern reproducible and collaborative science is the main goal of this course. Through the course, participants will gain experience with assessing remote-sensing data in the cloud, R and RStudio, and collaborating with Git and GitHub. Python users: Python is also very heavily used in big data geosciences. The course tutorials will focus on R, however you are welcome to use Python during the course if you are more comfortable with that."
  },
  {
    "objectID": "overview.html#hackweek-focus-species-distribution-modelling",
    "href": "overview.html#hackweek-focus-species-distribution-modelling",
    "title": "Overview",
    "section": "Hackweek focus: species distribution modelling",
    "text": "Hackweek focus: species distribution modelling\nIn depth understanding of machine learning for species (macrofauna) distribution modelling (SDM) is needed by many young ecosystem researchers. SDMs are an important class of models used to understand species association with the environment. SDMs are widely used to understand how species distributions are changing with ocean climate change and are also used to estimate abundance over large ocean regions from fisheries survey data. This course is devised to familiarize the young professionals in the Indian Ocean-rim (IOR) countries with the latest developments in this field.\nThis course does not aim to teach ecology and habitat to the oceanographers/modellers/machine learning experts, rather it aims to teach machine learning and coding (and its relevance to fisheries) to fishery professionals."
  },
  {
    "objectID": "overview.html#aims-and-objectives",
    "href": "overview.html#aims-and-objectives",
    "title": "Overview",
    "section": "Aims and Objectives",
    "text": "Aims and Objectives\n\nLearn how to discover and use oceanographic remote-sensing data for species distribution modeling and other fisheries applications\nFamiliarize participants with using remote-sensing data in R within models. Note participants who are more familiar with Python are welcome to use Python also.\nIntroduce the participants to machine learning models used in species distribution modelling.\nObtain hands-on experience in using species distribution modelling and machine-learning with remote-sensing data.\nWork on a group project using species distribution modelling to estimate habitat associations or obtain a stock estimate using a species distribution model.\n\nNote, there are many ways that participants can study aspects of species distribution using remote-sensing data. During the hackweek portion of the course, participants will jointly develop project to work on and in order to learn by diving into a specific project. Species location data will not be specifically required in order to engage in the projects."
  },
  {
    "objectID": "overview.html#what-is-a-hackweek",
    "href": "overview.html#what-is-a-hackweek",
    "title": "Overview",
    "section": "What is a hackweek?",
    "text": "What is a hackweek?\nA hackweek is a participant-driven workshop that blends data science education, community building, and project work over a short period of time (one to two weeks). The events are highly immersive and allow participants to work directly with data science professionals to co-shape projects and educational outcomes. Hackweeks help individuals and teams engage more effectively in open and reproducible science. - eScience Institute, University of Washington, Seattle USA\nThe hackweek model has become a vital tool in the data science community, fostering idea exchange through modern data analysis workflow training. Unlike traditional academic events, hackweeks offer intensive, interactive learning, including tutorials on cutting-edge methods, peer-based learning, and collaborative on-site projects. Unlike hackathons, which emphasize software development, hackweeks prioritize education and open-ended projects, benefiting fields needing both expertise and efficient computational workflows for idea exchange and discovery. The hackweek model is now widely used in many fields: Astrohackweek, Neurohackweek, Geohackweek, OceanHackWeek, ICESat-2 Hackweek, SnowEx Hackweek, NASA Cloud Hackathon. The ITCOocean Hack2week is modeled off the University of Washington eScience Hackweek model."
  },
  {
    "objectID": "overview.html#what-to-expect",
    "href": "overview.html#what-to-expect",
    "title": "Overview",
    "section": "What to expect",
    "text": "What to expect\n\nDuring the first week of the ITCOocean hack2week, participants will work on learning how to access, visualize and manipulate remote-sensing data in R. Participants will develop familiarity with the R language, with RStudio, and with Git and GitHub for collaboration.\nDuring the second week, participants will begin focusing on species distribution modeling and will work on a team project.\nThe course is an open science event: all tutorials and examples are developed openly and will be publicly available during and following the course. Participants will strengthen their practice of open science, using open source code and collaborating on their projects with course peers.\n\nIn the two to three weeks leading up to the course, participants are encouraged to review background resources that will facilitate a more effective experience."
  },
  {
    "objectID": "overview.html#code-of-conduct",
    "href": "overview.html#code-of-conduct",
    "title": "Overview",
    "section": "Code of Conduct",
    "text": "Code of Conduct\nThe 2023 ITCOocean Hackweek is a safe learning space and all participants are required to abide by our Code of Conduct."
  },
  {
    "objectID": "participants.html",
    "href": "participants.html",
    "title": "2023 Participants",
    "section": "",
    "text": "Hackweeks are collaborative and immersive peer-learning experience. Introduce yourself and identify if you have a skill in R or Python, remote-sensing data, or other subject matter expertise. Add your name, GitHub username,\nTo edit, click the ‚ÄúEdit‚Äù link on left and follow instructions to create a pull-request.\nName, affiliation, GitHub username, skills, website link, ORCID link\n\n\n\nName\nGitHub\nSome things you are bringing to the hack2week\nLinks\n\n\n\n\nEli Holmes\n@eeholmes\nR expert, Python intermediate, assessing remote-sensing data via cloud, geospatial analysis in R, multivariate statistics, coastal upwelling dynamics and metrics\nwebsite, ORCID\n\n\nYour Name\n@yourgithub\nEveryone brings different knowledge, experience and skills! What are some of yours?\ntext"
  },
  {
    "objectID": "projects/hackathon-projects.html",
    "href": "projects/hackathon-projects.html",
    "title": "Hackathon Projects",
    "section": "",
    "text": "We will fill in the projects here at the end of week 1."
  },
  {
    "objectID": "projects/index.html",
    "href": "projects/index.html",
    "title": "Projects Overview",
    "section": "",
    "text": "The following was borrowed and adapted from the excellent SnowEx Hackathon 2021\nThis section contains everything you need to know about hackweek projects."
  },
  {
    "objectID": "projects/index.html#purpose-of-the-projects",
    "href": "projects/index.html#purpose-of-the-projects",
    "title": "Projects Overview",
    "section": "Purpose of the projects:",
    "text": "Purpose of the projects:\nDuring the course we will be facilitating team hacking sessions in the second half of each day. The purpose of these sessions is for participants to gain hands-on experience in working together on a well-defined problem, in a collaborative space where you can talk things through and get help."
  },
  {
    "objectID": "projects/index.html#what-is-hacking",
    "href": "projects/index.html#what-is-hacking",
    "title": "Projects Overview",
    "section": "What is hacking?",
    "text": "What is hacking?\nHacking is a session of focused, highly collaborative work time ‚Äì often involving coding ‚Äì in which the group creates conditions for rapid absorption of new ideas and methods. The word ‚Äúhack‚Äù or ‚Äúhackathon‚Äù has many different interpretations, both positive and negative. Here our intention is to foster the idea of hacking as a fun, interactive and welcoming environment to explore and experiment with computer code."
  },
  {
    "objectID": "projects/index.html#how-will-the-projects-be-conducted",
    "href": "projects/index.html#how-will-the-projects-be-conducted",
    "title": "Projects Overview",
    "section": "How will the projects be conducted?",
    "text": "How will the projects be conducted?\nParticipants are invited to start conversations about projects in the Slack channel 2023-hackweek-projects before and during week one of the course.\n\nIf you have a project idea brewing, please pitch it in this channel. You can tag your proposed teammates if you already have that worked out.\nStart a thread with ‚ÄúProject idea:‚Äù and then provide a few sentences. Include whether you are looking for teammates to join this project. Others who are interested can respond in a thread.\nWe welcome a broad range of project topics. People often use project time to dig deeper into concepts introduced in tutorials, to explore problems within their own research, or to advance community data sharing and software building efforts.\nThe course team is here to help you get clear on project ideas and decide on what is possible within 5 days.\n\nAt the end of week 1 of the course we will have a ‚ÄúPitchfest‚Äù‚Äù where proposer(s) can pitch their idea. At this time we will finalize the project teams for the week ‚Äî however we will provide times when team members will move and work with other teams. This kind of ‚Äòcross-pollination‚Äô helps everyone learn and solve problems.\nTeam hacktime will begin on week 2.\nEach team is encouraged to identify a project lead, likely the person who pitched the idea, who has knowledge of the datasets and the specific problem to be explored. But roles can be assigned as the group decides to best fit skills and needs.\nOn the final day of the course, each team will present their work in a series of lightning talks."
  },
  {
    "objectID": "projects/upwelling_ml/intro.html#project-leads",
    "href": "projects/upwelling_ml/intro.html#project-leads",
    "title": "Using image machine learning to study upwelling in the Indian Ocean",
    "section": "Project Leads",
    "text": "Project Leads\n\nJiarui Yu (University of Washington), GitHub\nMinh Phan (University of Washington), GitHub\nEli Holmes (NOAA Fisheries/University of Washington), GitHub"
  },
  {
    "objectID": "projects/upwelling_ml/intro.html#background",
    "href": "projects/upwelling_ml/intro.html#background",
    "title": "Using image machine learning to study upwelling in the Indian Ocean",
    "section": "Background",
    "text": "Background\nStudy of coastal upwelling dynamics using image machine-learning algorithms applied to remote-sensing data PI: Eli Holmes, Northwest Fisheries Science Center, NOAA Fisheries, Seattle WA\nCoastal upwelling is a key driver of productive fisheries. It is largely driven by coastal winds that produce wind stress perpendicular to the coast. This wind stress pulls surface water away from the coast and pulls deep, cold, nutrient rich water to the surface. Strong and consistent coastal upwelling happens in specific regions around the world and supports strong fisheries in these regions. An interesting and curious aspect of upwelling is that it is influenced by ocean-atmosphere teleconnections‚Äîcorrelations in ocean climate across long-distances. In plain language, it means that a pattern that arises in one part of the world‚Äôs oceans will be seen later on the other side of the world in a very different part of the world. One of these teleconnections is between temperature anomalies in the North Atlantic Ocean and coastal upwelling in the Arabian Sea.\n\nIn this project, we are exploring the use of machine learning and image machine learning to study relationships between coastal upwelling and the physical oceanography of the Arabian Sea. The goal is to explore whether these approaches provide a promising way to develop predictive models for upwelling intensity. For the project, we are using Python libraries for implementing neural networks with image inputs, including TensorFlow, PyTorch, and Keras."
  },
  {
    "objectID": "python-notebooks/00_NASA_Earthdata_Authentication.html#summary",
    "href": "python-notebooks/00_NASA_Earthdata_Authentication.html#summary",
    "title": "Authentication for NASA Earthdata",
    "section": "Summary",
    "text": "Summary\nThis notebook creates a hidden .netrc file (_netrc for Window OS) with Earthdata login credentials in your home directory. This file is needed to access NASA Earthdata assets from a scripting environment like Python.\n\nEarthdata Login\nAn Earthdata Login account is required to access data, as well as discover restricted data, from the NASA Earthdata system. Thus, to access NASA data, you need Earthdata Login. Please visit https://urs.earthdata.nasa.gov to register and manage your Earthdata Login account. This account is free to create and only takes a moment to set up.\n\n\nAuthentication via netrc File\nYou will need a netrc file containing your NASA Earthdata Login credentials in order to execute the notebooks. A netrc file can be created manually within text editor and saved to your home directory. An example of the required content is below.\nmachine urs.earthdata.nasa.gov\nlogin &lt;USERNAME&gt;\npassword &lt;PASSWORD&gt;\n&lt;USERNAME&gt; and &lt;PASSWORD&gt; would be replaced by your actual Earthdata Login username and password respectively."
  },
  {
    "objectID": "python-notebooks/00_NASA_Earthdata_Authentication.html#import-required-packages",
    "href": "python-notebooks/00_NASA_Earthdata_Authentication.html#import-required-packages",
    "title": "Authentication for NASA Earthdata",
    "section": "Import Required Packages",
    "text": "Import Required Packages\n\nfrom netrc import netrc\nfrom subprocess import Popen\nfrom platform import system\nfrom getpass import getpass\nimport os\n\nThe code below will:\n\ncheck what operating system (OS) is being used to determine which netrc file to check for/create (.netrc or _netrc)\ncheck if you have an netrc file, and if so, varify if those credentials are for the Earthdata endpoint\ncreate a netrc file if a netrc file is not present.\n\n\nurs = 'urs.earthdata.nasa.gov'    # Earthdata URL endpoint for authentication\nprompts = ['Enter NASA Earthdata Login Username: ',\n           'Enter NASA Earthdata Login Password: ']\n\n# Determine the OS (Windows machines usually use an '_netrc' file)\nnetrc_name = \"_netrc\" if system()==\"Windows\" else \".netrc\"\n\n# Determine if netrc file exists, and if so, if it includes NASA Earthdata Login Credentials\ntry:\n    netrcDir = os.path.expanduser(f\"~/{netrc_name}\")\n    netrc(netrcDir).authenticators(urs)[0]\n\n# Below, create a netrc file and prompt user for NASA Earthdata Login Username and Password\nexcept FileNotFoundError:\n    homeDir = os.path.expanduser(\"~\")\n    Popen('touch {0}{2} | echo machine {1} &gt;&gt; {0}{2}'.format(homeDir + os.sep, urs, netrc_name), shell=True)\n    Popen('echo login {} &gt;&gt; {}{}'.format(getpass(prompt=prompts[0]), homeDir + os.sep, netrc_name), shell=True)\n    Popen('echo \\'password {} \\'&gt;&gt; {}{}'.format(getpass(prompt=prompts[1]), homeDir + os.sep, netrc_name), shell=True)\n    # Set restrictive permissions\n    Popen('chmod 0600 {0}{1}'.format(homeDir + os.sep, netrc_name), shell=True)\n\n    # Determine OS and edit netrc file if it exists but is not set up for NASA Earthdata Login\nexcept TypeError:\n    homeDir = os.path.expanduser(\"~\")\n    Popen('echo machine {1} &gt;&gt; {0}{2}'.format(homeDir + os.sep, urs, netrc_name), shell=True)\n    Popen('echo login {} &gt;&gt; {}{}'.format(getpass(prompt=prompts[0]), homeDir + os.sep, netrc_name), shell=True)\n    Popen('echo \\'password {} \\'&gt;&gt; {}{}'.format(getpass(prompt=prompts[1]), homeDir + os.sep, netrc_name), shell=True)\n\n\nSee if the file was created\nIf the file was created, we‚Äôll see a .netrc file (_netrc for Window OS) in the list printed below. To view the contents from a Jupyter environment, click File on the top toolbar, select Open from Path‚Ä¶, type .netrc, and click Open. The .netrc file will open within the text editor.\n\n!!! Beware, your password will be visible if the .netrc file is opened in the text editor.\n\n\n!ls -al ~/"
  },
  {
    "objectID": "python-notebooks/01_ERA5_S3_Downloader.html#variables",
    "href": "python-notebooks/01_ERA5_S3_Downloader.html#variables",
    "title": "Download Copernicus ERA5 Data with S3 without logging in",
    "section": "Variables",
    "text": "Variables\nThe table below lists the 18 ERA5 variables that are available on S3. All variables are surface or single level parameters sourced from the HRES sub-daily forecast stream.\n\n\n\n\nVariable Name\n\n\nFile Name\n\n\nVariable type (fc/an)\n\n\n\n\n10 metre U wind component\n\n\neastward_wind_at_10_metres.nc\n\n\nan\n\n\n\n\n10 metre V wind component\n\n\nnorthward_wind_at_10_metres.nc\n\n\nan\n\n\n\n\n100 metre U wind component\n\n\neastward_wind_at_100_metres.nc\n\n\nan\n\n\n\n\n100 metre V wind component\n\n\nnorthward_wind_at_100_metres.nc\n\n\nan\n\n\n\n\n2 metre dew point temperature\n\n\ndew_point_temperature_at_2_metres.nc\n\n\nan\n\n\n\n\n2 metre temperature\n\n\nair_temperature_at_2_metres.nc\n\n\nan\n\n\n\n\n2 metres maximum temperature since previous post-processing\n\n\nair_temperature_at_2_metres_1hour_Maximum.nc\n\n\nfc\n\n\n\n\n2 metres minimum temperature since previous post-processing\n\n\nair_temperature_at_2_metres_1hour_Minimum.nc\n\n\nfc\n\n\n\n\nMean sea level pressure\n\n\nair_pressure_at_mean_sea_level.nc\n\n\nan\n\n\n\n\nSea surface temperature\n\n\nsea_surface_temperature.nc\n\n\nan\n\n\n\n\nMean wave period\n\n\nsea_surface_wave_mean_period.nc\n\n\n\n\n\n\nMean direction of waves\n\n\nsea_surface_wave_from_direction.nc\n\n\n\n\n\n\nSignificant height of combined wind waves and swell\n\n\nsignificant_height_of_wind_and_swell_waves.nc\n\n\n\n\n\n\nSnow density\n\n\nsnow_density.nc\n\n\nan\n\n\n\n\nSnow depth\n\n\nlwe_thickness_of_surface_snow_amount.nc\n\n\nan\n\n\n\n\nSurface pressure\n\n\nsurface_air_pressure.nc\n\n\nan\n\n\n\n\nSurface solar radiation downwards\n\n\nintegral_wrt_time_of_surface_direct_downwelling_shortwave_flux_in_air_1hour_Accumulation.nc\n\n\nfc\n\n\n\n\nTotal precipitation\n\n\nprecipitation_amount_1hour_Accumulation.nc\n\n\nfc\n\n\n\n\nFor my dataset, we collect air temperature (at 2m), sea surface temperature, and u and v wind components so that we can compute speed and direction later."
  },
  {
    "objectID": "python-notebooks/01_ERA5_S3_Downloader.html#import-necessary-libraries",
    "href": "python-notebooks/01_ERA5_S3_Downloader.html#import-necessary-libraries",
    "title": "Download Copernicus ERA5 Data with S3 without logging in",
    "section": "Import necessary libraries",
    "text": "Import necessary libraries\n\nimport boto3\nimport botocore\nimport datetime\nimport matplotlib.pyplot as plt\nimport os\nimport xarray as xr\nimport numpy as np\nimport pandas as pd\nimport sys"
  },
  {
    "objectID": "python-notebooks/01_ERA5_S3_Downloader.html#download-data",
    "href": "python-notebooks/01_ERA5_S3_Downloader.html#download-data",
    "title": "Download Copernicus ERA5 Data with S3 without logging in",
    "section": "Download data",
    "text": "Download data\n\nera5_bucket = 'era5-pds'\nclient = boto3.client('s3', config=botocore.client.Config(signature_version=botocore.UNSIGNED))\n\n\ndef download_era5_s3(var_era5, month_start, month_end, lat1=5, lat2=25, lon1=60, lon2=80):\n    \"\"\"\n    var_era5: variable name\n    month_start: formatted as YYYY-MM \n    month_end: formatted as YYYY-MM (right-exclusive)\n    \"\"\"\n    s3_data_ptrn = '{year}/{month}/data/{var}.nc'\n    \n    path_temp_folder = 'demonstrated data/era5/temp'\n    path_var_folder = f'demonstrated data/era5/{var_era5}'\n    if not os.path.exists(path_temp_folder):\n        os.makedirs(path_temp_folder)\n    if not os.path.exists(path_var_folder):\n        os.makedirs(path_var_folder)\n    \n    data_file_ptrn = os.path.join(path_temp_folder,'{year}{month}_{var}.nc')\n    sliced_data_file_ptrn = os.path.join(path_var_folder, '{year}{month}_{var}.nc')\n    months = pd.date_range(month_start, month_end, freq='M')\n    for month in months:\n        s3_data_key = s3_data_ptrn.format(year=month.year, month=\"{:02d}\".format(month.month), var=var_era5)\n        data_file = data_file_ptrn.format(year=month.year, month=\"{:02d}\".format(month.month), var=var_era5)\n        if not os.path.isfile(data_file): # check if file already exists\n            print(\"Downloading %s from S3...\" % s3_data_key)\n            client.download_file(era5_bucket, s3_data_key, data_file)\n\n        export_file = sliced_data_file_ptrn.format(year = month.year, month = \"{:02d}\".format(month.month), var= var_era5)\n        xr.open_dataset(data_file).sel(lat=slice(lat2, lat1), lon=slice(lon1, lon2)).to_netcdf(export_file)\n        os.remove(data_file)\n\n\n# download data for 4 variables we need\n# consult available names in the table above in the file name column (remove .nc)\ndownload_era5_s3(var_era5='eastward_wind_at_10_metres', month_start='2000-01', month_end='2001-12')\ndownload_era5_s3(var_era5='northward_wind_at_10_metres', month_start='2000-01', month_end='2001-12')\ndownload_era5_s3(var_era5='sea_surface_temperature', month_start='2000-01', month_end='2001-12')\ndownload_era5_s3(var_era5='air_temperature_at_2_metres', month_start='2000-01', month_end='2002-01')\n\nDownloading 2000/01/data/eastward_wind_at_10_metres.nc from S3...\nDownloading 2000/02/data/eastward_wind_at_10_metres.nc from S3...\nDownloading 2000/03/data/eastward_wind_at_10_metres.nc from S3...\nDownloading 2000/04/data/eastward_wind_at_10_metres.nc from S3...\nDownloading 2000/05/data/eastward_wind_at_10_metres.nc from S3...\nDownloading 2000/06/data/eastward_wind_at_10_metres.nc from S3...\nDownloading 2000/07/data/eastward_wind_at_10_metres.nc from S3...\nDownloading 2000/08/data/eastward_wind_at_10_metres.nc from S3...\nDownloading 2000/09/data/eastward_wind_at_10_metres.nc from S3...\nDownloading 2000/10/data/eastward_wind_at_10_metres.nc from S3...\nDownloading 2000/11/data/eastward_wind_at_10_metres.nc from S3...\nDownloading 2000/12/data/eastward_wind_at_10_metres.nc from S3...\nDownloading 2001/01/data/eastward_wind_at_10_metres.nc from S3...\nDownloading 2001/02/data/eastward_wind_at_10_metres.nc from S3...\nDownloading 2001/03/data/eastward_wind_at_10_metres.nc from S3...\nDownloading 2001/04/data/eastward_wind_at_10_metres.nc from S3...\nDownloading 2001/05/data/eastward_wind_at_10_metres.nc from S3...\nDownloading 2001/06/data/eastward_wind_at_10_metres.nc from S3...\nDownloading 2001/07/data/eastward_wind_at_10_metres.nc from S3...\nDownloading 2001/08/data/eastward_wind_at_10_metres.nc from S3...\nDownloading 2001/09/data/eastward_wind_at_10_metres.nc from S3...\nDownloading 2001/10/data/eastward_wind_at_10_metres.nc from S3...\nDownloading 2001/11/data/eastward_wind_at_10_metres.nc from S3...\nDownloading 2000/01/data/northward_wind_at_10_metres.nc from S3...\nDownloading 2000/02/data/northward_wind_at_10_metres.nc from S3...\nDownloading 2000/03/data/northward_wind_at_10_metres.nc from S3...\nDownloading 2000/04/data/northward_wind_at_10_metres.nc from S3...\nDownloading 2000/05/data/northward_wind_at_10_metres.nc from S3...\nDownloading 2000/06/data/northward_wind_at_10_metres.nc from S3...\nDownloading 2000/07/data/northward_wind_at_10_metres.nc from S3...\nDownloading 2000/08/data/northward_wind_at_10_metres.nc from S3...\nDownloading 2000/09/data/northward_wind_at_10_metres.nc from S3...\nDownloading 2000/10/data/northward_wind_at_10_metres.nc from S3...\nDownloading 2000/11/data/northward_wind_at_10_metres.nc from S3...\nDownloading 2000/12/data/northward_wind_at_10_metres.nc from S3...\nDownloading 2001/01/data/northward_wind_at_10_metres.nc from S3...\nDownloading 2001/02/data/northward_wind_at_10_metres.nc from S3...\nDownloading 2001/03/data/northward_wind_at_10_metres.nc from S3...\nDownloading 2001/04/data/northward_wind_at_10_metres.nc from S3...\nDownloading 2001/05/data/northward_wind_at_10_metres.nc from S3...\nDownloading 2001/06/data/northward_wind_at_10_metres.nc from S3...\nDownloading 2001/07/data/northward_wind_at_10_metres.nc from S3...\nDownloading 2001/08/data/northward_wind_at_10_metres.nc from S3...\nDownloading 2001/09/data/northward_wind_at_10_metres.nc from S3...\nDownloading 2001/10/data/northward_wind_at_10_metres.nc from S3...\nDownloading 2001/11/data/northward_wind_at_10_metres.nc from S3...\nDownloading 2000/01/data/sea_surface_temperature.nc from S3...\nDownloading 2000/02/data/sea_surface_temperature.nc from S3...\nDownloading 2000/03/data/sea_surface_temperature.nc from S3...\nDownloading 2000/04/data/sea_surface_temperature.nc from S3...\nDownloading 2000/05/data/sea_surface_temperature.nc from S3...\nDownloading 2000/06/data/sea_surface_temperature.nc from S3...\nDownloading 2000/07/data/sea_surface_temperature.nc from S3...\nDownloading 2000/08/data/sea_surface_temperature.nc from S3...\nDownloading 2000/09/data/sea_surface_temperature.nc from S3...\nDownloading 2000/10/data/sea_surface_temperature.nc from S3...\nDownloading 2000/11/data/sea_surface_temperature.nc from S3...\nDownloading 2000/12/data/sea_surface_temperature.nc from S3...\nDownloading 2001/01/data/sea_surface_temperature.nc from S3...\nDownloading 2001/02/data/sea_surface_temperature.nc from S3...\nDownloading 2001/03/data/sea_surface_temperature.nc from S3...\nDownloading 2001/04/data/sea_surface_temperature.nc from S3...\nDownloading 2001/05/data/sea_surface_temperature.nc from S3...\nDownloading 2001/06/data/sea_surface_temperature.nc from S3...\nDownloading 2001/07/data/sea_surface_temperature.nc from S3...\nDownloading 2001/08/data/sea_surface_temperature.nc from S3...\nDownloading 2001/09/data/sea_surface_temperature.nc from S3...\nDownloading 2001/10/data/sea_surface_temperature.nc from S3...\nDownloading 2001/11/data/sea_surface_temperature.nc from S3...\nDownloading 2000/01/data/air_temperature_at_2_metres.nc from S3...\nDownloading 2000/02/data/air_temperature_at_2_metres.nc from S3...\nDownloading 2000/03/data/air_temperature_at_2_metres.nc from S3...\nDownloading 2000/04/data/air_temperature_at_2_metres.nc from S3...\nDownloading 2000/05/data/air_temperature_at_2_metres.nc from S3...\nDownloading 2000/06/data/air_temperature_at_2_metres.nc from S3...\nDownloading 2000/07/data/air_temperature_at_2_metres.nc from S3...\nDownloading 2000/08/data/air_temperature_at_2_metres.nc from S3...\nDownloading 2000/09/data/air_temperature_at_2_metres.nc from S3...\nDownloading 2000/10/data/air_temperature_at_2_metres.nc from S3...\nDownloading 2000/11/data/air_temperature_at_2_metres.nc from S3...\nDownloading 2000/12/data/air_temperature_at_2_metres.nc from S3...\nDownloading 2001/01/data/air_temperature_at_2_metres.nc from S3...\nDownloading 2001/02/data/air_temperature_at_2_metres.nc from S3...\nDownloading 2001/03/data/air_temperature_at_2_metres.nc from S3...\nDownloading 2001/04/data/air_temperature_at_2_metres.nc from S3...\nDownloading 2001/05/data/air_temperature_at_2_metres.nc from S3...\nDownloading 2001/06/data/air_temperature_at_2_metres.nc from S3...\nDownloading 2001/07/data/air_temperature_at_2_metres.nc from S3...\nDownloading 2001/08/data/air_temperature_at_2_metres.nc from S3...\nDownloading 2001/09/data/air_temperature_at_2_metres.nc from S3...\nDownloading 2001/10/data/air_temperature_at_2_metres.nc from S3...\nDownloading 2001/11/data/air_temperature_at_2_metres.nc from S3...\nDownloading 2001/12/data/air_temperature_at_2_metres.nc from S3..."
  },
  {
    "objectID": "python-notebooks/01_ERDDAP_Downloader.html#get-to-know-griddap-url-link-template",
    "href": "python-notebooks/01_ERDDAP_Downloader.html#get-to-know-griddap-url-link-template",
    "title": "Download data from NOAA ERDDAP using GRIDDAP",
    "section": "Get to know GRIDDAP URL link template",
    "text": "Get to know GRIDDAP URL link template\nOne of the datasets that we used in this project is Reanalysis Data ERA5 monthly 3d Wind velocities. For the default options, select file type as .nc (NetCDF3-binary file) and click ‚ÄòJust generate the URL,‚Äô you can see the URL is then https://apdrc.soest.hawaii.edu/erddap/griddap/hawaii_soest_66d3_10d8_0f3c.nc?u[(2023-04-01T00:00:00Z):1:(2023-04-01T00:00:00Z)][(10.0):1:(1000.0)][(-90.0):1:(90.0)][(0.0):1:(359.75)],v[(2023-04-01T00:00:00Z):1:(2023-04-01T00:00:00Z)][(10.0):1:(1000.0)][(-90.0):1:(90.0)][(0.0):1:(359.75)] and it follows this template:\n\nhttps://apdrc.soest.hawaii.edu/erddap/griddap\n\n/DATASET_ID.FILE_EXTENSION\nfollowing by\nVARIABLE_NAME1 [(START_DIM1):STRIDE_DIM1:(STOP_DIM1)][(START_DIM2):STRIDE_DIM2:(STOP_DIM2)][(START_DIM3):STRIDE_DIM3:(STOP_DIM3)]‚Ä¶\nand then\nVARIABLE_NAME2[(START_DIM1):STRIDE_DIM1:(STOP_DIM1)][(START_DIM2):STRIDE_DIM2:(STOP_DIM2)][(START_DIM3):STRIDE_DIM3:(STOP_DIM3)]‚Ä¶\nand so on for all the variables. To illustrate this template, you can liken it to downloading every variable as an Xarray DataArray, and combine them together based on the coordinates. In the URL above, the order and specifications of the dimension slicing options must be the consistent for all variables, just like how Xarray combining by coords only works if the coordinates are so.\nThe template is also well-explained in GRIDDAP documentation.\nWe can all agree that trying to write down every template for different datasets is error-prone and tedious, so you are more than welcome to copy and modify your template using the original file generator Python formatted strings to help with generating URLs for downloads. Since URLs vary greatly form dataset to dataset, there is no ideal URL template to consider, but we will still develop a function to generalize the URL generator to the best of my knowledge.\nNOTE: for the URL template, we focus on downloading smaller chunks of the dataset, sliced temporally just like downloading from the EarthData database so that the remote server would not be broken handling the request. We also recommend you to download variables together in one NetCDF3 file (multiple variable names in one URL) instead of individual variables as it takes time piecing them all together."
  },
  {
    "objectID": "python-notebooks/01_ERDDAP_Downloader.html#import-necessary-libraries",
    "href": "python-notebooks/01_ERDDAP_Downloader.html#import-necessary-libraries",
    "title": "Download data from NOAA ERDDAP using GRIDDAP",
    "section": "Import necessary libraries",
    "text": "Import necessary libraries\n\nimport xarray as xr\nimport numpy as np\nimport pandas as pd\nimport os, glob, shutil, urllib3"
  },
  {
    "objectID": "python-notebooks/01_ERDDAP_Downloader.html#download-data",
    "href": "python-notebooks/01_ERDDAP_Downloader.html#download-data",
    "title": "Download data from NOAA ERDDAP using GRIDDAP",
    "section": "Download data",
    "text": "Download data\nUnlike NASA Earthdata, we can slice dataset spatially directly for every server request.\n\ndef download_ERDDAP_URLs(var):\n    # get list of URLs\n    URLs, months = ERDDAP_URL_template_generator(var)\n    http = urllib3.PoolManager()\n    \n    MAIN_FOLDER = 'demonstrated data/ERDDAP'\n    TEMP_FOLDER = var['datasetID']\n    path_temp_folder = os.path.join(MAIN_FOLDER, TEMP_FOLDER)\n    \n    if not os.path.exists(path_temp_folder):\n        os.makedirs(path_temp_folder)\n    \n    for URL, month in zip(URLs, months):\n        fileout = os.path.join(path_temp_folder, f\"{month.strftime('%Y%m')}.nc\")\n        \n        # download\n        with http.request('GET', URL, preload_content=False) as resp, open(fileout, 'wb') as out_file:\n            shutil.copyfileobj(resp, out_file)\n        \n        resp.release_conn()\n        \n        print('Downloaded ' + fileout)\n\n\ndef ERDDAP_URL_template_generator(var) -&gt; list():\n    \"\"\"\n    Generates a list of ERDDAP URLs for downloading\n    \n    Example of parameters shown below in next code cell.\n        - datasetID: 'erdTAgeo1day_LonPM180'\n        - variable_name ['u', 'v']\n        - coordinates: {'time': '2000-01:1:2000-03', 'altitude': '0:1:0', 'latitude': '-12:1:12', 'longitude': '42:1:102'}\n    NOTE: 'time' dimension must be listed in order (typical of ERDDAP URLs)\n    \"\"\"\n\n    list_of_URLS = []\n    time_ele = dimension_boundaries_ordered['time'].split(':')\n    start_month = time_ele[0]\n    end_month = time_ele[2]\n    stride_time = time_ele[1]\n    months = pd.date_range(start_month, end_month, freq='M')\n    for month_idx in range(len(months)):\n        URL = f'https://apdrc.soest.hawaii.edu/erddap/griddap/{var_dict['datasetID']}.nc?'\n        for var in var_dict['variable_names']:\n            URL = URL + var + f\"[({months[month_idx].strftime('%Y-%m')}-01):{stride_time}:({months[month_idx].strftime('%Y-%m-%d')})]\"\n            for d in list(var_dict['coordinates'].values())[1:]:\n                d_ele = d.split(':')\n                URL = URL + f\"[({d_ele[0]}):{d_ele[1]}:({d_ele[2]})]\"\n            URL = URL + \",\"\n        \n        # eliminate last comma\n        list_of_URLS.append(URL[:-1])\n        \n        # example\n        # url = \"https://apdrc.soest.hawaii.edu/erddap/griddap/hawaii_soest_66d3_10d8_0f3c.nc?\"\\\n        # f\"u[({months[month_idx].strftime('%Y-%m')}-01):1:({months[month_idx+1].strftime('%Y-%m')})][(10):1:(10)][(-12):1:(32)][(42):1:(102)],\"\\\n        # f\"v[({months[month_idx].strftime('%Y-%m')}-01):1:({months[month_idx+1].strftime('%Y-%m')})][(10):1:(10)][(-12):1:(32)][(42):1:(102)]\"\n    return list_of_URLS, months\n\n\nvar = {\n    'datasetID': 'hawaii_soest_66d3_10d8_0f3c',\n    'variable_names': ['u', 'v'],\n    'coordinates': {'time': '2000-01:1:2000-10', # must be in order of the ERDDAP dataset dimension list\n                    'LEV': '10:1:10', \n                    'latitude': '-12:1:12', \n                    'longitude': '42:1:102'}\n}\n\nERDDAP_URL_template_generator(datasetID='hawaii_soest_66d3_10d8_0f3c', variable_names=['u', 'v'], dimension_boundaries_ordered={'time': '2000-01:1:2000-10', 'LEV': '10:1:10', 'latitude': '-12:1:12', 'longitude': '42:1:102'})\n\n['https://apdrc.soest.hawaii.edu/erddap/griddap/hawaii_soest_66d3_10d8_0f3c.nc?u[(2000-01-01):1:(2000-01-31)][(10):1:(10)][(-12):1:(12)][(42):1:(102)],v[(2000-01-01):1:(2000-01-31)][(10):1:(10)][(-12):1:(12)][(42):1:(102)]',\n 'https://apdrc.soest.hawaii.edu/erddap/griddap/hawaii_soest_66d3_10d8_0f3c.nc?u[(2000-02-01):1:(2000-02-29)][(10):1:(10)][(-12):1:(12)][(42):1:(102)],v[(2000-02-01):1:(2000-02-29)][(10):1:(10)][(-12):1:(12)][(42):1:(102)]',\n 'https://apdrc.soest.hawaii.edu/erddap/griddap/hawaii_soest_66d3_10d8_0f3c.nc?u[(2000-03-01):1:(2000-03-31)][(10):1:(10)][(-12):1:(12)][(42):1:(102)],v[(2000-03-01):1:(2000-03-31)][(10):1:(10)][(-12):1:(12)][(42):1:(102)]',\n 'https://apdrc.soest.hawaii.edu/erddap/griddap/hawaii_soest_66d3_10d8_0f3c.nc?u[(2000-04-01):1:(2000-04-30)][(10):1:(10)][(-12):1:(12)][(42):1:(102)],v[(2000-04-01):1:(2000-04-30)][(10):1:(10)][(-12):1:(12)][(42):1:(102)]',\n 'https://apdrc.soest.hawaii.edu/erddap/griddap/hawaii_soest_66d3_10d8_0f3c.nc?u[(2000-05-01):1:(2000-05-31)][(10):1:(10)][(-12):1:(12)][(42):1:(102)],v[(2000-05-01):1:(2000-05-31)][(10):1:(10)][(-12):1:(12)][(42):1:(102)]',\n 'https://apdrc.soest.hawaii.edu/erddap/griddap/hawaii_soest_66d3_10d8_0f3c.nc?u[(2000-06-01):1:(2000-06-30)][(10):1:(10)][(-12):1:(12)][(42):1:(102)],v[(2000-06-01):1:(2000-06-30)][(10):1:(10)][(-12):1:(12)][(42):1:(102)]',\n 'https://apdrc.soest.hawaii.edu/erddap/griddap/hawaii_soest_66d3_10d8_0f3c.nc?u[(2000-07-01):1:(2000-07-31)][(10):1:(10)][(-12):1:(12)][(42):1:(102)],v[(2000-07-01):1:(2000-07-31)][(10):1:(10)][(-12):1:(12)][(42):1:(102)]',\n 'https://apdrc.soest.hawaii.edu/erddap/griddap/hawaii_soest_66d3_10d8_0f3c.nc?u[(2000-08-01):1:(2000-08-31)][(10):1:(10)][(-12):1:(12)][(42):1:(102)],v[(2000-08-01):1:(2000-08-31)][(10):1:(10)][(-12):1:(12)][(42):1:(102)]',\n 'https://apdrc.soest.hawaii.edu/erddap/griddap/hawaii_soest_66d3_10d8_0f3c.nc?u[(2000-09-01):1:(2000-09-30)][(10):1:(10)][(-12):1:(12)][(42):1:(102)],v[(2000-09-01):1:(2000-09-30)][(10):1:(10)][(-12):1:(12)][(42):1:(102)]']"
  },
  {
    "objectID": "python-notebooks/01_MOTU_Downloader.html#store-credentials-in-bash",
    "href": "python-notebooks/01_MOTU_Downloader.html#store-credentials-in-bash",
    "title": "Download sliced data using MOTU-Client in Copernicus",
    "section": "Store credentials in bash",
    "text": "Store credentials in bash\nFor security purposes, you can store your account credentials in your bash profile if you don‚Äôt want others to know yours. If you fork this notebook on your local machine and are sure that your credentials cannot be exposed anywhere else, you can skip the hassle of saving them to bash and set them as Python variables, then feed them to the prompt generator.\nMake sure to change your username and password of your Copernicus/MOTU account to the two lines below for bash‚Ä¶\n\n! echo 'export motu_password=YOURPASSWORD' &gt;~/.bash_profile\n\n\n! echo 'export motu_username=YOURUSERNAME' &gt;&gt;~/.bash_profile\n\n\n# Vim will get stuck in this cell if you don't stop the cell. As soon as you see the two lines\n# stop the execution and move on to the next cell.\n! vim ~/.bash_profile\n\n\n! source ~/.bash_profile\n\nIMPORTANT Please restart your server for the changes to take effect\n\n# confirm that it is shown before proceeding\n! echo $motu_username"
  },
  {
    "objectID": "python-notebooks/01_MOTU_Downloader.html#motu-download-prompt-breakdown",
    "href": "python-notebooks/01_MOTU_Downloader.html#motu-download-prompt-breakdown",
    "title": "Download sliced data using MOTU-Client in Copernicus",
    "section": "MOTU download prompt breakdown",
    "text": "MOTU download prompt breakdown\nLike ERDDAP URLs, MOTU works by sending requests to the API server. Unlike the former, it works through command line requests instead of URLs requests. Again, to prevent overloadding, we will break down the process to smaller time ranges to download.\nHere‚Äôs an example of a MOTU API request\n\npython -m motuclient ‚Äìmotu https://my.cmems-du.eu/motu-web/Motu ‚Äìservice-id GLOBAL_MULTIYEAR_BGC_001_029-TDS ‚Äìproduct-id cmems_mod_glo_bgc_my_0.25_P1D-m ‚Äìlongitude-min 60 ‚Äìlongitude-max 80 ‚Äìlatitude-min 5 ‚Äìlatitude-max 25 ‚Äìdate-min ‚Äú2020-12-31 00:00:00‚Äù ‚Äìdate-max ‚Äú2020-12-31 23:59:59‚Äù ‚Äìdepth-min 0.5057600140571594 ‚Äìdepth-max 16.525320053100586 ‚Äìvariable chl ‚Äìvariable po4 ‚Äìvariable no3 ‚Äìout-dir [OUTPUT_DIRECTORY] ‚Äìout-name [OUTPUT_FILENAME] ‚Äìuser [USERNAME] ‚Äìpwd [PASSWORD]\n\nAs you can see, we have to provide all the parameters in order for the request to work, with temporal and lat/lon ranges being required on all datasets and depth range required only for some. We also have to provide username and password (that we have after creating the Copernicus account) , as well as where we are going to store the data (output directory and name)."
  },
  {
    "objectID": "python-notebooks/01_MOTU_Downloader.html#import-necessary-libraries",
    "href": "python-notebooks/01_MOTU_Downloader.html#import-necessary-libraries",
    "title": "Download sliced data using MOTU-Client in Copernicus",
    "section": "Import necessary libraries",
    "text": "Import necessary libraries\n\nimport xarray as xr\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport os, glob, subprocess"
  },
  {
    "objectID": "python-notebooks/01_MOTU_Downloader.html#download-data",
    "href": "python-notebooks/01_MOTU_Downloader.html#download-data",
    "title": "Download sliced data using MOTU-Client in Copernicus",
    "section": "Download data",
    "text": "Download data\n\ndef prompt_generator(params, temp_folder_path):\n    months = pd.date_range(params['coords']['date-min'], params['coords']['date-max'], freq='M')\n    prompts = []\n    \n    for m in months:\n        prompt = f\"motuclient --motu https://my.cmems-du.eu/motu-web/Motu --service-id {params['SERVICE_ID']}-TDS --product-id {params['PRODUCT_ID']} \" + \\\n        f\"--user {os.environ['motu_username']} --pwd {os.environ['motu_password']} --out-dir {temp_folder_path} --out-name {m.strftime('%Y%m')}.nc \"\n        prompt += f\"--date-min '{m.strftime('%Y-%m')}-01 00:00:00' --date-max '{m.strftime('%Y-%m-%d')} 23:59:00' \"\n        for var in params['variables']:\n            prompt += f'--variable {var} '\n        for coord_name, coord_value in params['coords'].items():\n            # since we already work \n            if coord_name not in ['date-min', 'date-max']:\n                prompt += f'--{coord_name} {coord_value} '\n        \n        prompts.append(prompt)\n        \n    return prompts\n\n\ndef download_motu_api(params):\n    # create new folder to store data\n    MAIN_FOLDER = 'demonstrated data/motu'\n    TEMP_FOLDER = params['PRODUCT_ID']\n    path_temp_folder = os.path.join(MAIN_FOLDER, TEMP_FOLDER)\n    \n    if not os.path.exists(path_temp_folder):\n        os.makedirs(path_temp_folder)\n\n    # generate prompts to feed into the downloader\n    prompts = prompt_generator(params, path_temp_folder)\n    for prompt in prompts:\n        process = subprocess.Popen(prompt.split())\n        process.wait()\n        \n\nNext, we‚Äôre going to initialize our parameters to download the data. The template is shown below, and werecommend you to choose a spatial range slightly larger than your actual region of interest due to cutoffs that may happen at the edges.\n\n# modify your parameters as you wish to feed into prompt generator\n# here's mine to download chlorophyll-a data\nvar_chlorophyll = {\n    'SERVICE_ID': 'OCEANCOLOUR_GLO_BGC_L4_MY_009_104',\n    'PRODUCT_ID': 'cmems_obs-oc_glo_bgc-plankton_my_l4-gapfree-multi-4km_P1D',\n    'variables': ['CHL', 'CHL_uncertainty'],\n    'coords': {\n        'longitude-min': 60, \n        'longitude-max': 80,\n        'latitude-min': 5,\n        'latitude-max': 25,\n        'date-min': '2000-01',\n        'date-max': '2002-01' # exclusive of last month, so in this case, we get data until DEC '02\n        # optional coordinate params for some datasets: 'depth-min', 'depth-max'\n        # consult data access page for more information\n    }\n}\n\nvar_sla = {\n    'SERVICE_ID': 'SEALEVEL_GLO_PHY_L4_MY_008_047',\n    'PRODUCT_ID': 'cmems_obs-sl_glo_phy-ssh_my_allsat-l4-duacs-0.25deg_P1D',\n    'variables': ['adt', 'sla'],\n    'coords': {\n        'longitude-min': 60,\n        'longitude-max': 80,\n        'latitude-min': 5,\n        'latitude-max': 25,\n        'date-min': '2000-01',\n        'date-max': '2002-01' # exclusive of last month, so in this case, we get data until DEC '02\n    }\n}\n\n\ndownload_motu_api(var_sla)\n\n2023-07-11 04:31:55.819 [ INFO] Asynchronous mode set\n2023-07-11 04:31:55.819 [ INFO] Authenticating user mphan for service https://my.cmems-du.eu/motu-web/Motu\n2023-07-11 04:32:04.748 [ INFO] Requesting file to download (this can take a while)...\n2023-07-11 04:32:14.896 [ INFO] Authenticating user mphan for service https://my.cmems-du.eu/motu-web/Motu\n2023-07-11 04:32:32.754 [ INFO] The product is ready for download\n2023-07-11 04:32:32.754 [ INFO] Downloading file (this can take a while)...\n2023-07-11 04:32:33.680 [ INFO] File type: application/x-netcdf\n2023-07-11 04:32:33.680 [ INFO] File size: 3.3 MB (3260684 B)\n2023-07-11 04:32:33.680 [ INFO] Downloading file /home/jovyan/shared/minh-notebooks/motu/cmems_obs-sl_glo_phy-ssh_my_allsat-l4-duacs-0.25deg_P1D/200001.nc\n2023-07-11 04:32:34.029 [ INFO] Progress -   3.3 MB (2.0%)\n2023-07-11 04:32:34.204 [ INFO] Progress -   3.3 MB (4.0%)\n2023-07-11 04:32:34.379 [ INFO] Progress -   3.3 MB (6.0%)\n2023-07-11 04:32:34.380 [ INFO] Progress -   3.3 MB (8.0%)\n2023-07-11 04:32:34.380 [ INFO] Progress -   3.3 MB (10.0%)\n2023-07-11 04:32:34.555 [ INFO] Progress -   3.3 MB (12.1%)\n2023-07-11 04:32:34.555 [ INFO] Progress -   3.3 MB (14.1%)\n2023-07-11 04:32:34.556 [ INFO] Progress -   3.3 MB (16.1%)\n2023-07-11 04:32:34.556 [ INFO] Progress -   3.3 MB (18.1%)\n2023-07-11 04:32:34.556 [ INFO] Progress -   3.3 MB (20.1%)\n2023-07-11 04:32:34.556 [ INFO] Progress -   3.3 MB (22.1%)\n2023-07-11 04:32:34.557 [ INFO] Progress -   3.3 MB (24.1%)\n2023-07-11 04:32:34.730 [ INFO] Progress -   3.3 MB (26.1%)\n2023-07-11 04:32:34.731 [ INFO] Progress -   3.3 MB (28.1%)\n2023-07-11 04:32:34.731 [ INFO] Progress -   3.3 MB (30.1%)\n2023-07-11 04:32:34.732 [ INFO] Progress -   3.3 MB (32.2%)\n2023-07-11 04:32:34.732 [ INFO] Progress -   3.3 MB (34.2%)\n2023-07-11 04:32:34.733 [ INFO] Progress -   3.3 MB (36.2%)\n2023-07-11 04:32:34.733 [ INFO] Progress -   3.3 MB (38.2%)\n2023-07-11 04:32:34.733 [ INFO] Progress -   3.3 MB (40.2%)\n2023-07-11 04:32:34.905 [ INFO] Progress -   3.3 MB (42.2%)\n2023-07-11 04:32:34.906 [ INFO] Progress -   3.3 MB (44.2%)\n2023-07-11 04:32:34.906 [ INFO] Progress -   3.3 MB (46.2%)\n2023-07-11 04:32:34.907 [ INFO] Progress -   3.3 MB (48.2%)\n2023-07-11 04:32:34.907 [ INFO] Progress -   3.3 MB (50.2%)\n2023-07-11 04:32:34.907 [ INFO] Progress -   3.3 MB (52.3%)\n2023-07-11 04:32:34.908 [ INFO] Progress -   3.3 MB (54.3%)\n2023-07-11 04:32:34.908 [ INFO] Progress -   3.3 MB (56.3%)\n2023-07-11 04:32:34.908 [ INFO] Progress -   3.3 MB (58.3%)\n2023-07-11 04:32:34.908 [ INFO] Progress -   3.3 MB (60.3%)\n2023-07-11 04:32:34.909 [ INFO] Progress -   3.3 MB (62.3%)\n2023-07-11 04:32:34.909 [ INFO] Progress -   3.3 MB (64.3%)\n2023-07-11 04:32:34.910 [ INFO] Progress -   3.3 MB (66.3%)\n2023-07-11 04:32:34.910 [ INFO] Progress -   3.3 MB (68.3%)\n2023-07-11 04:32:34.910 [ INFO] Progress -   3.3 MB (70.3%)\n2023-07-11 04:32:34.910 [ INFO] Progress -   3.3 MB (72.4%)\n2023-07-11 04:32:34.911 [ INFO] Progress -   3.3 MB (74.4%)\n2023-07-11 04:32:34.911 [ INFO] Progress -   3.3 MB (76.4%)\n2023-07-11 04:32:34.911 [ INFO] Progress -   3.3 MB (78.4%)\n2023-07-11 04:32:34.911 [ INFO] Progress -   3.3 MB (80.4%)\n2023-07-11 04:32:34.912 [ INFO] Progress -   3.3 MB (82.4%)\n2023-07-11 04:32:35.080 [ INFO] Progress -   3.3 MB (84.4%)\n2023-07-11 04:32:35.081 [ INFO] Progress -   3.3 MB (86.4%)\n2023-07-11 04:32:35.082 [ INFO] Progress -   3.3 MB (88.4%)\n2023-07-11 04:32:35.082 [ INFO] Progress -   3.3 MB (90.4%)\n2023-07-11 04:32:35.082 [ INFO] Progress -   3.3 MB (92.5%)\n2023-07-11 04:32:35.082 [ INFO] Progress -   3.3 MB (94.5%)\n2023-07-11 04:32:35.083 [ INFO] Progress -   3.3 MB (96.5%)\n2023-07-11 04:32:35.083 [ INFO] Progress -   3.3 MB (98.5%)\n2023-07-11 04:32:35.084 [ INFO] Progress -   3.3 MB (100.0%)\n2023-07-11 04:32:35.084 [ INFO] Processing  time : 0:00:37.863885\n2023-07-11 04:32:35.084 [ INFO] Downloading time : 0:00:01.403882\n2023-07-11 04:32:35.084 [ INFO] Total time       : 0:00:39.267767\n2023-07-11 04:32:35.084 [ INFO] Download rate    : 1.4 MB/s\n2023-07-11 04:32:35.084 [ INFO] Save into        : motu/cmems_obs-sl_glo_phy-ssh_my_allsat-l4-duacs-0.25deg_P1D/200001.nc\n2023-07-11 04:32:35.115 [ INFO] Done\n2023-07-11 04:32:35.360 [ INFO] Asynchronous mode set\n2023-07-11 04:32:35.360 [ INFO] Authenticating user mphan for service https://my.cmems-du.eu/motu-web/Motu\n2023-07-11 04:32:44.852 [ INFO] Requesting file to download (this can take a while)...\n2023-07-11 04:32:53.844 [ INFO] Authenticating user mphan for service https://my.cmems-du.eu/motu-web/Motu\n2023-07-11 04:33:09.545 [ INFO] The product is ready for download\n2023-07-11 04:33:09.546 [ INFO] Downloading file (this can take a while)...\n2023-07-11 04:33:10.291 [ INFO] File type: application/x-netcdf\n2023-07-11 04:33:10.291 [ INFO] File size: 3.1 MB (3050724 B)\n2023-07-11 04:33:10.291 [ INFO] Downloading file /home/jovyan/shared/minh-notebooks/motu/cmems_obs-sl_glo_phy-ssh_my_allsat-l4-duacs-0.25deg_P1D/200002.nc\n2023-07-11 04:33:10.642 [ INFO] Progress -   3.1 MB (2.1%)\n2023-07-11 04:33:10.817 [ INFO] Progress -   3.1 MB (4.3%)\n2023-07-11 04:33:10.990 [ INFO] Progress -   3.1 MB (6.4%)\n2023-07-11 04:33:10.992 [ INFO] Progress -   3.1 MB (8.6%)\n2023-07-11 04:33:10.992 [ INFO] Progress -   3.1 MB (10.7%)\n2023-07-11 04:33:10.993 [ INFO] Progress -   3.1 MB (12.9%)\n2023-07-11 04:33:11.166 [ INFO] Progress -   3.1 MB (15.0%)\n2023-07-11 04:33:11.167 [ INFO] Progress -   3.1 MB (17.2%)\n2023-07-11 04:33:11.168 [ INFO] Progress -   3.1 MB (19.3%)\n2023-07-11 04:33:11.168 [ INFO] Progress -   3.1 MB (21.5%)\n2023-07-11 04:33:11.168 [ INFO] Progress -   3.1 MB (23.6%)\n2023-07-11 04:33:11.168 [ INFO] Progress -   3.1 MB (25.8%)\n2023-07-11 04:33:11.341 [ INFO] Progress -   3.1 MB (27.9%)\n2023-07-11 04:33:11.341 [ INFO] Progress -   3.1 MB (30.1%)\n2023-07-11 04:33:11.342 [ INFO] Progress -   3.1 MB (32.2%)\n2023-07-11 04:33:11.343 [ INFO] Progress -   3.1 MB (34.4%)\n2023-07-11 04:33:11.343 [ INFO] Progress -   3.1 MB (36.5%)\n2023-07-11 04:33:11.344 [ INFO] Progress -   3.1 MB (38.7%)\n2023-07-11 04:33:11.344 [ INFO] Progress -   3.1 MB (40.8%)\n2023-07-11 04:33:11.344 [ INFO] Progress -   3.1 MB (43.0%)\n2023-07-11 04:33:11.344 [ INFO] Progress -   3.1 MB (45.1%)\n2023-07-11 04:33:11.345 [ INFO] Progress -   3.1 MB (47.3%)\n2023-07-11 04:33:11.345 [ INFO] Progress -   3.1 MB (49.4%)\n2023-07-11 04:33:11.345 [ INFO] Progress -   3.1 MB (51.6%)\n2023-07-11 04:33:11.345 [ INFO] Progress -   3.1 MB (53.7%)\n2023-07-11 04:33:11.516 [ INFO] Progress -   3.1 MB (55.9%)\n2023-07-11 04:33:11.516 [ INFO] Progress -   3.1 MB (58.0%)\n2023-07-11 04:33:11.516 [ INFO] Progress -   3.1 MB (60.1%)\n2023-07-11 04:33:11.517 [ INFO] Progress -   3.1 MB (62.3%)\n2023-07-11 04:33:11.517 [ INFO] Progress -   3.1 MB (64.4%)\n2023-07-11 04:33:11.518 [ INFO] Progress -   3.1 MB (66.6%)\n2023-07-11 04:33:11.518 [ INFO] Progress -   3.1 MB (68.7%)\n2023-07-11 04:33:11.519 [ INFO] Progress -   3.1 MB (70.9%)\n2023-07-11 04:33:11.519 [ INFO] Progress -   3.1 MB (73.0%)\n2023-07-11 04:33:11.519 [ INFO] Progress -   3.1 MB (75.2%)\n2023-07-11 04:33:11.520 [ INFO] Progress -   3.1 MB (77.3%)\n2023-07-11 04:33:11.520 [ INFO] Progress -   3.1 MB (79.5%)\n2023-07-11 04:33:11.520 [ INFO] Progress -   3.1 MB (81.6%)\n2023-07-11 04:33:11.520 [ INFO] Progress -   3.1 MB (83.8%)\n2023-07-11 04:33:11.520 [ INFO] Progress -   3.1 MB (85.9%)\n2023-07-11 04:33:11.521 [ INFO] Progress -   3.1 MB (88.1%)\n2023-07-11 04:33:11.521 [ INFO] Progress -   3.1 MB (90.2%)\n2023-07-11 04:33:11.521 [ INFO] Progress -   3.1 MB (92.4%)\n2023-07-11 04:33:11.521 [ INFO] Progress -   3.1 MB (94.5%)\n2023-07-11 04:33:11.522 [ INFO] Progress -   3.1 MB (96.7%)\n2023-07-11 04:33:11.522 [ INFO] Progress -   3.1 MB (98.8%)\n2023-07-11 04:33:11.522 [ INFO] Progress -   3.1 MB (100.0%)\n2023-07-11 04:33:11.522 [ INFO] Processing  time : 0:00:34.933586\n2023-07-11 04:33:11.522 [ INFO] Downloading time : 0:00:01.231103\n2023-07-11 04:33:11.522 [ INFO] Total time       : 0:00:36.164689\n2023-07-11 04:33:11.522 [ INFO] Download rate    : 1.5 MB/s\n2023-07-11 04:33:11.522 [ INFO] Save into        : motu/cmems_obs-sl_glo_phy-ssh_my_allsat-l4-duacs-0.25deg_P1D/200002.nc\n2023-07-11 04:33:11.556 [ INFO] Done\n2023-07-11 04:33:11.798 [ INFO] Asynchronous mode set\n2023-07-11 04:33:11.798 [ INFO] Authenticating user mphan for service https://my.cmems-du.eu/motu-web/Motu\n2023-07-11 04:33:19.952 [ INFO] Requesting file to download (this can take a while)...\n2023-07-11 04:33:28.668 [ INFO] Authenticating user mphan for service https://my.cmems-du.eu/motu-web/Motu\n2023-07-11 04:33:44.971 [ INFO] The product is ready for download\n2023-07-11 04:33:44.971 [ INFO] Downloading file (this can take a while)...\n2023-07-11 04:33:45.715 [ INFO] File type: application/x-netcdf\n2023-07-11 04:33:45.715 [ INFO] File size: 3.3 MB (3260684 B)\n2023-07-11 04:33:45.715 [ INFO] Downloading file /home/jovyan/shared/minh-notebooks/motu/cmems_obs-sl_glo_phy-ssh_my_allsat-l4-duacs-0.25deg_P1D/200003.nc\n2023-07-11 04:33:46.064 [ INFO] Progress -   3.3 MB (2.0%)\n2023-07-11 04:33:46.239 [ INFO] Progress -   3.3 MB (4.0%)\n2023-07-11 04:33:46.415 [ INFO] Progress -   3.3 MB (6.0%)\n2023-07-11 04:33:46.415 [ INFO] Progress -   3.3 MB (8.0%)\n2023-07-11 04:33:46.415 [ INFO] Progress -   3.3 MB (10.0%)\n2023-07-11 04:33:46.590 [ INFO] Progress -   3.3 MB (12.1%)\n2023-07-11 04:33:46.590 [ INFO] Progress -   3.3 MB (14.1%)\n2023-07-11 04:33:46.591 [ INFO] Progress -   3.3 MB (16.1%)\n2023-07-11 04:33:46.591 [ INFO] Progress -   3.3 MB (18.1%)\n2023-07-11 04:33:46.591 [ INFO] Progress -   3.3 MB (20.1%)\n2023-07-11 04:33:46.591 [ INFO] Progress -   3.3 MB (22.1%)\n2023-07-11 04:33:46.765 [ INFO] Progress -   3.3 MB (24.1%)\n2023-07-11 04:33:46.765 [ INFO] Progress -   3.3 MB (26.1%)\n2023-07-11 04:33:46.765 [ INFO] Progress -   3.3 MB (28.1%)\n2023-07-11 04:33:46.766 [ INFO] Progress -   3.3 MB (30.1%)\n2023-07-11 04:33:46.766 [ INFO] Progress -   3.3 MB (32.2%)\n2023-07-11 04:33:46.767 [ INFO] Progress -   3.3 MB (34.2%)\n2023-07-11 04:33:46.767 [ INFO] Progress -   3.3 MB (36.2%)\n2023-07-11 04:33:46.768 [ INFO] Progress -   3.3 MB (38.2%)\n2023-07-11 04:33:46.768 [ INFO] Progress -   3.3 MB (40.2%)\n2023-07-11 04:33:46.768 [ INFO] Progress -   3.3 MB (42.2%)\n2023-07-11 04:33:46.768 [ INFO] Progress -   3.3 MB (44.2%)\n2023-07-11 04:33:46.769 [ INFO] Progress -   3.3 MB (46.2%)\n2023-07-11 04:33:46.769 [ INFO] Progress -   3.3 MB (48.2%)\n2023-07-11 04:33:46.940 [ INFO] Progress -   3.3 MB (50.2%)\n2023-07-11 04:33:46.940 [ INFO] Progress -   3.3 MB (52.3%)\n2023-07-11 04:33:46.940 [ INFO] Progress -   3.3 MB (54.3%)\n2023-07-11 04:33:46.941 [ INFO] Progress -   3.3 MB (56.3%)\n2023-07-11 04:33:46.941 [ INFO] Progress -   3.3 MB (58.3%)\n2023-07-11 04:33:46.941 [ INFO] Progress -   3.3 MB (60.3%)\n2023-07-11 04:33:46.942 [ INFO] Progress -   3.3 MB (62.3%)\n2023-07-11 04:33:46.942 [ INFO] Progress -   3.3 MB (64.3%)\n2023-07-11 04:33:46.943 [ INFO] Progress -   3.3 MB (66.3%)\n2023-07-11 04:33:46.943 [ INFO] Progress -   3.3 MB (68.3%)\n2023-07-11 04:33:46.943 [ INFO] Progress -   3.3 MB (70.3%)\n2023-07-11 04:33:46.944 [ INFO] Progress -   3.3 MB (72.4%)\n2023-07-11 04:33:46.944 [ INFO] Progress -   3.3 MB (74.4%)\n2023-07-11 04:33:46.944 [ INFO] Progress -   3.3 MB (76.4%)\n2023-07-11 04:33:46.945 [ INFO] Progress -   3.3 MB (78.4%)\n2023-07-11 04:33:46.945 [ INFO] Progress -   3.3 MB (80.4%)\n2023-07-11 04:33:46.945 [ INFO] Progress -   3.3 MB (82.4%)\n2023-07-11 04:33:46.945 [ INFO] Progress -   3.3 MB (84.4%)\n2023-07-11 04:33:46.946 [ INFO] Progress -   3.3 MB (86.4%)\n2023-07-11 04:33:46.946 [ INFO] Progress -   3.3 MB (88.4%)\n2023-07-11 04:33:46.946 [ INFO] Progress -   3.3 MB (90.4%)\n2023-07-11 04:33:46.946 [ INFO] Progress -   3.3 MB (92.5%)\n2023-07-11 04:33:46.947 [ INFO] Progress -   3.3 MB (94.5%)\n2023-07-11 04:33:46.947 [ INFO] Progress -   3.3 MB (96.5%)\n2023-07-11 04:33:46.988 [ INFO] Progress -   3.3 MB (98.5%)\n2023-07-11 04:33:47.115 [ INFO] Progress -   3.3 MB (100.0%)\n2023-07-11 04:33:47.115 [ INFO] Processing  time : 0:00:33.919354\n2023-07-11 04:33:47.115 [ INFO] Downloading time : 0:00:01.400042\n2023-07-11 04:33:47.115 [ INFO] Total time       : 0:00:35.319396\n2023-07-11 04:33:47.115 [ INFO] Download rate    : 1.5 MB/s\n2023-07-11 04:33:47.115 [ INFO] Save into        : motu/cmems_obs-sl_glo_phy-ssh_my_allsat-l4-duacs-0.25deg_P1D/200003.nc\n2023-07-11 04:33:47.158 [ INFO] Done\n2023-07-11 04:33:47.403 [ INFO] Asynchronous mode set\n2023-07-11 04:33:47.403 [ INFO] Authenticating user mphan for service https://my.cmems-du.eu/motu-web/Motu\n2023-07-11 04:33:55.632 [ INFO] Requesting file to download (this can take a while)...\n2023-07-11 04:34:05.423 [ INFO] Authenticating user mphan for service https://my.cmems-du.eu/motu-web/Motu\n2023-07-11 04:34:21.086 [ INFO] The product is ready for download\n2023-07-11 04:34:21.086 [ INFO] Downloading file (this can take a while)...\n2023-07-11 04:34:21.835 [ INFO] File type: application/x-netcdf\n2023-07-11 04:34:21.835 [ INFO] File size: 3.2 MB (3155704 B)\n2023-07-11 04:34:21.835 [ INFO] Downloading file /home/jovyan/shared/minh-notebooks/motu/cmems_obs-sl_glo_phy-ssh_my_allsat-l4-duacs-0.25deg_P1D/200004.nc\n2023-07-11 04:34:22.184 [ INFO] Progress -   3.2 MB (2.1%)\n2023-07-11 04:34:22.359 [ INFO] Progress -   3.2 MB (4.2%)\n2023-07-11 04:34:22.535 [ INFO] Progress -   3.2 MB (6.2%)\n2023-07-11 04:34:22.535 [ INFO] Progress -   3.2 MB (8.3%)\n2023-07-11 04:34:22.535 [ INFO] Progress -   3.2 MB (10.4%)\n2023-07-11 04:34:22.710 [ INFO] Progress -   3.2 MB (12.5%)\n2023-07-11 04:34:22.711 [ INFO] Progress -   3.2 MB (14.5%)\n2023-07-11 04:34:22.711 [ INFO] Progress -   3.2 MB (16.6%)\n2023-07-11 04:34:22.711 [ INFO] Progress -   3.2 MB (18.7%)\n2023-07-11 04:34:22.712 [ INFO] Progress -   3.2 MB (20.8%)\n2023-07-11 04:34:22.712 [ INFO] Progress -   3.2 MB (22.8%)\n2023-07-11 04:34:22.712 [ INFO] Progress -   3.2 MB (24.9%)\n2023-07-11 04:34:22.885 [ INFO] Progress -   3.2 MB (27.0%)\n2023-07-11 04:34:22.886 [ INFO] Progress -   3.2 MB (29.1%)\n2023-07-11 04:34:22.886 [ INFO] Progress -   3.2 MB (31.2%)\n2023-07-11 04:34:22.886 [ INFO] Progress -   3.2 MB (33.2%)\n2023-07-11 04:34:22.887 [ INFO] Progress -   3.2 MB (35.3%)\n2023-07-11 04:34:22.888 [ INFO] Progress -   3.2 MB (37.4%)\n2023-07-11 04:34:22.888 [ INFO] Progress -   3.2 MB (39.5%)\n2023-07-11 04:34:22.888 [ INFO] Progress -   3.2 MB (41.5%)\n2023-07-11 04:34:22.888 [ INFO] Progress -   3.2 MB (43.6%)\n2023-07-11 04:34:22.889 [ INFO] Progress -   3.2 MB (45.7%)\n2023-07-11 04:34:22.889 [ INFO] Progress -   3.2 MB (47.8%)\n2023-07-11 04:34:22.889 [ INFO] Progress -   3.2 MB (49.8%)\n2023-07-11 04:34:23.060 [ INFO] Progress -   3.2 MB (51.9%)\n2023-07-11 04:34:23.061 [ INFO] Progress -   3.2 MB (54.0%)\n2023-07-11 04:34:23.061 [ INFO] Progress -   3.2 MB (56.1%)\n2023-07-11 04:34:23.062 [ INFO] Progress -   3.2 MB (58.1%)\n2023-07-11 04:34:23.062 [ INFO] Progress -   3.2 MB (60.2%)\n2023-07-11 04:34:23.063 [ INFO] Progress -   3.2 MB (62.3%)\n2023-07-11 04:34:23.063 [ INFO] Progress -   3.2 MB (64.4%)\n2023-07-11 04:34:23.063 [ INFO] Progress -   3.2 MB (66.5%)\n2023-07-11 04:34:23.064 [ INFO] Progress -   3.2 MB (68.5%)\n2023-07-11 04:34:23.064 [ INFO] Progress -   3.2 MB (70.6%)\n2023-07-11 04:34:23.064 [ INFO] Progress -   3.2 MB (72.7%)\n2023-07-11 04:34:23.065 [ INFO] Progress -   3.2 MB (74.8%)\n2023-07-11 04:34:23.065 [ INFO] Progress -   3.2 MB (76.8%)\n2023-07-11 04:34:23.065 [ INFO] Progress -   3.2 MB (78.9%)\n2023-07-11 04:34:23.065 [ INFO] Progress -   3.2 MB (81.0%)\n2023-07-11 04:34:23.066 [ INFO] Progress -   3.2 MB (83.1%)\n2023-07-11 04:34:23.066 [ INFO] Progress -   3.2 MB (85.1%)\n2023-07-11 04:34:23.066 [ INFO] Progress -   3.2 MB (87.2%)\n2023-07-11 04:34:23.066 [ INFO] Progress -   3.2 MB (89.3%)\n2023-07-11 04:34:23.067 [ INFO] Progress -   3.2 MB (91.4%)\n2023-07-11 04:34:23.067 [ INFO] Progress -   3.2 MB (93.5%)\n2023-07-11 04:34:23.067 [ INFO] Progress -   3.2 MB (95.5%)\n2023-07-11 04:34:23.067 [ INFO] Progress -   3.2 MB (97.6%)\n2023-07-11 04:34:23.235 [ INFO] Progress -   3.2 MB (99.7%)\n2023-07-11 04:34:23.236 [ INFO] Progress -   3.2 MB (100.0%)\n2023-07-11 04:34:23.236 [ INFO] Processing  time : 0:00:34.434477\n2023-07-11 04:34:23.236 [ INFO] Downloading time : 0:00:01.401031\n2023-07-11 04:34:23.236 [ INFO] Total time       : 0:00:35.835508\n2023-07-11 04:34:23.236 [ INFO] Download rate    : 1.5 MB/s\n2023-07-11 04:34:23.236 [ INFO] Save into        : motu/cmems_obs-sl_glo_phy-ssh_my_allsat-l4-duacs-0.25deg_P1D/200004.nc\n2023-07-11 04:34:23.266 [ INFO] Done\n2023-07-11 04:34:23.512 [ INFO] Asynchronous mode set\n2023-07-11 04:34:23.513 [ INFO] Authenticating user mphan for service https://my.cmems-du.eu/motu-web/Motu\n2023-07-11 04:34:30.732 [ INFO] Requesting file to download (this can take a while)...\n2023-07-11 04:34:39.973 [ INFO] Authenticating user mphan for service https://my.cmems-du.eu/motu-web/Motu\n2023-07-11 04:34:55.062 [ INFO] The product is ready for download\n2023-07-11 04:34:55.062 [ INFO] Downloading file (this can take a while)...\n2023-07-11 04:34:55.808 [ INFO] File type: application/x-netcdf\n2023-07-11 04:34:55.808 [ INFO] File size: 3.3 MB (3260684 B)\n2023-07-11 04:34:55.808 [ INFO] Downloading file /home/jovyan/shared/minh-notebooks/motu/cmems_obs-sl_glo_phy-ssh_my_allsat-l4-duacs-0.25deg_P1D/200005.nc\n2023-07-11 04:34:56.158 [ INFO] Progress -   3.3 MB (2.0%)\n2023-07-11 04:34:56.333 [ INFO] Progress -   3.3 MB (4.0%)\n2023-07-11 04:34:56.508 [ INFO] Progress -   3.3 MB (6.0%)\n2023-07-11 04:34:56.509 [ INFO] Progress -   3.3 MB (8.0%)\n2023-07-11 04:34:56.683 [ INFO] Progress -   3.3 MB (10.0%)\n2023-07-11 04:34:56.684 [ INFO] Progress -   3.3 MB (12.1%)\n2023-07-11 04:34:56.684 [ INFO] Progress -   3.3 MB (14.1%)\n2023-07-11 04:34:56.684 [ INFO] Progress -   3.3 MB (16.1%)\n2023-07-11 04:34:56.685 [ INFO] Progress -   3.3 MB (18.1%)\n2023-07-11 04:34:56.859 [ INFO] Progress -   3.3 MB (20.1%)\n2023-07-11 04:34:56.859 [ INFO] Progress -   3.3 MB (22.1%)\n2023-07-11 04:34:56.860 [ INFO] Progress -   3.3 MB (24.1%)\n2023-07-11 04:34:56.860 [ INFO] Progress -   3.3 MB (26.1%)\n2023-07-11 04:34:56.860 [ INFO] Progress -   3.3 MB (28.1%)\n2023-07-11 04:34:56.860 [ INFO] Progress -   3.3 MB (30.1%)\n2023-07-11 04:34:56.861 [ INFO] Progress -   3.3 MB (32.2%)\n2023-07-11 04:34:56.862 [ INFO] Progress -   3.3 MB (34.2%)\n2023-07-11 04:34:56.862 [ INFO] Progress -   3.3 MB (36.2%)\n2023-07-11 04:34:56.862 [ INFO] Progress -   3.3 MB (38.2%)\n2023-07-11 04:34:57.034 [ INFO] Progress -   3.3 MB (40.2%)\n2023-07-11 04:34:57.034 [ INFO] Progress -   3.3 MB (42.2%)\n2023-07-11 04:34:57.035 [ INFO] Progress -   3.3 MB (44.2%)\n2023-07-11 04:34:57.035 [ INFO] Progress -   3.3 MB (46.2%)\n2023-07-11 04:34:57.035 [ INFO] Progress -   3.3 MB (48.2%)\n2023-07-11 04:34:57.035 [ INFO] Progress -   3.3 MB (50.2%)\n2023-07-11 04:34:57.036 [ INFO] Progress -   3.3 MB (52.3%)\n2023-07-11 04:34:57.036 [ INFO] Progress -   3.3 MB (54.3%)\n2023-07-11 04:34:57.036 [ INFO] Progress -   3.3 MB (56.3%)\n2023-07-11 04:34:57.036 [ INFO] Progress -   3.3 MB (58.3%)\n2023-07-11 04:34:57.037 [ INFO] Progress -   3.3 MB (60.3%)\n2023-07-11 04:34:57.037 [ INFO] Progress -   3.3 MB (62.3%)\n2023-07-11 04:34:57.037 [ INFO] Progress -   3.3 MB (64.3%)\n2023-07-11 04:34:57.038 [ INFO] Progress -   3.3 MB (66.3%)\n2023-07-11 04:34:57.038 [ INFO] Progress -   3.3 MB (68.3%)\n2023-07-11 04:34:57.039 [ INFO] Progress -   3.3 MB (70.3%)\n2023-07-11 04:34:57.039 [ INFO] Progress -   3.3 MB (72.4%)\n2023-07-11 04:34:57.039 [ INFO] Progress -   3.3 MB (74.4%)\n2023-07-11 04:34:57.040 [ INFO] Progress -   3.3 MB (76.4%)\n2023-07-11 04:34:57.040 [ INFO] Progress -   3.3 MB (78.4%)\n2023-07-11 04:34:57.209 [ INFO] Progress -   3.3 MB (80.4%)\n2023-07-11 04:34:57.209 [ INFO] Progress -   3.3 MB (82.4%)\n2023-07-11 04:34:57.210 [ INFO] Progress -   3.3 MB (84.4%)\n2023-07-11 04:34:57.210 [ INFO] Progress -   3.3 MB (86.4%)\n2023-07-11 04:34:57.210 [ INFO] Progress -   3.3 MB (88.4%)\n2023-07-11 04:34:57.210 [ INFO] Progress -   3.3 MB (90.4%)\n2023-07-11 04:34:57.211 [ INFO] Progress -   3.3 MB (92.5%)\n2023-07-11 04:34:57.211 [ INFO] Progress -   3.3 MB (94.5%)\n2023-07-11 04:34:57.211 [ INFO] Progress -   3.3 MB (96.5%)\n2023-07-11 04:34:57.212 [ INFO] Progress -   3.3 MB (98.5%)\n2023-07-11 04:34:57.212 [ INFO] Progress -   3.3 MB (100.0%)\n2023-07-11 04:34:57.213 [ INFO] Processing  time : 0:00:32.298162\n2023-07-11 04:34:57.213 [ INFO] Downloading time : 0:00:01.404053\n2023-07-11 04:34:57.213 [ INFO] Total time       : 0:00:33.702215\n2023-07-11 04:34:57.213 [ INFO] Download rate    : 1.5 MB/s\n2023-07-11 04:34:57.213 [ INFO] Save into        : motu/cmems_obs-sl_glo_phy-ssh_my_allsat-l4-duacs-0.25deg_P1D/200005.nc\n2023-07-11 04:34:57.242 [ INFO] Done\n2023-07-11 04:34:57.482 [ INFO] Asynchronous mode set\n2023-07-11 04:34:57.482 [ INFO] Authenticating user mphan for service https://my.cmems-du.eu/motu-web/Motu\n2023-07-11 04:35:05.474 [ INFO] Requesting file to download (this can take a while)...\n2023-07-11 04:35:13.265 [ INFO] Authenticating user mphan for service https://my.cmems-du.eu/motu-web/Motu\n2023-07-11 04:35:29.833 [ INFO] The product is ready for download\n2023-07-11 04:35:29.833 [ INFO] Downloading file (this can take a while)...\n2023-07-11 04:35:30.583 [ INFO] File type: application/x-netcdf\n2023-07-11 04:35:30.583 [ INFO] File size: 3.2 MB (3155704 B)\n2023-07-11 04:35:30.583 [ INFO] Downloading file /home/jovyan/shared/minh-notebooks/motu/cmems_obs-sl_glo_phy-ssh_my_allsat-l4-duacs-0.25deg_P1D/200006.nc\n2023-07-11 04:35:30.932 [ INFO] Progress -   3.2 MB (2.1%)\n2023-07-11 04:35:31.107 [ INFO] Progress -   3.2 MB (4.2%)\n2023-07-11 04:35:31.282 [ INFO] Progress -   3.2 MB (6.2%)\n2023-07-11 04:35:31.283 [ INFO] Progress -   3.2 MB (8.3%)\n2023-07-11 04:35:31.283 [ INFO] Progress -   3.2 MB (10.4%)\n2023-07-11 04:35:31.458 [ INFO] Progress -   3.2 MB (12.5%)\n2023-07-11 04:35:31.458 [ INFO] Progress -   3.2 MB (14.5%)\n2023-07-11 04:35:31.458 [ INFO] Progress -   3.2 MB (16.6%)\n2023-07-11 04:35:31.459 [ INFO] Progress -   3.2 MB (18.7%)\n2023-07-11 04:35:31.459 [ INFO] Progress -   3.2 MB (20.8%)\n2023-07-11 04:35:31.633 [ INFO] Progress -   3.2 MB (22.8%)\n2023-07-11 04:35:31.633 [ INFO] Progress -   3.2 MB (24.9%)\n2023-07-11 04:35:31.634 [ INFO] Progress -   3.2 MB (27.0%)\n2023-07-11 04:35:31.634 [ INFO] Progress -   3.2 MB (29.1%)\n2023-07-11 04:35:31.634 [ INFO] Progress -   3.2 MB (31.2%)\n2023-07-11 04:35:31.634 [ INFO] Progress -   3.2 MB (33.2%)\n2023-07-11 04:35:31.635 [ INFO] Progress -   3.2 MB (35.3%)\n2023-07-11 04:35:31.636 [ INFO] Progress -   3.2 MB (37.4%)\n2023-07-11 04:35:31.636 [ INFO] Progress -   3.2 MB (39.5%)\n2023-07-11 04:35:31.636 [ INFO] Progress -   3.2 MB (41.5%)\n2023-07-11 04:35:31.636 [ INFO] Progress -   3.2 MB (43.6%)\n2023-07-11 04:35:31.808 [ INFO] Progress -   3.2 MB (45.7%)\n2023-07-11 04:35:31.808 [ INFO] Progress -   3.2 MB (47.8%)\n2023-07-11 04:35:31.808 [ INFO] Progress -   3.2 MB (49.8%)\n2023-07-11 04:35:31.809 [ INFO] Progress -   3.2 MB (51.9%)\n2023-07-11 04:35:31.809 [ INFO] Progress -   3.2 MB (54.0%)\n2023-07-11 04:35:31.809 [ INFO] Progress -   3.2 MB (56.1%)\n2023-07-11 04:35:31.810 [ INFO] Progress -   3.2 MB (58.1%)\n2023-07-11 04:35:31.810 [ INFO] Progress -   3.2 MB (60.2%)\n2023-07-11 04:35:31.810 [ INFO] Progress -   3.2 MB (62.3%)\n2023-07-11 04:35:31.810 [ INFO] Progress -   3.2 MB (64.4%)\n2023-07-11 04:35:31.811 [ INFO] Progress -   3.2 MB (66.5%)\n2023-07-11 04:35:31.811 [ INFO] Progress -   3.2 MB (68.5%)\n2023-07-11 04:35:31.812 [ INFO] Progress -   3.2 MB (70.6%)\n2023-07-11 04:35:31.812 [ INFO] Progress -   3.2 MB (72.7%)\n2023-07-11 04:35:31.812 [ INFO] Progress -   3.2 MB (74.8%)\n2023-07-11 04:35:31.812 [ INFO] Progress -   3.2 MB (76.8%)\n2023-07-11 04:35:31.813 [ INFO] Progress -   3.2 MB (78.9%)\n2023-07-11 04:35:31.813 [ INFO] Progress -   3.2 MB (81.0%)\n2023-07-11 04:35:31.813 [ INFO] Progress -   3.2 MB (83.1%)\n2023-07-11 04:35:31.813 [ INFO] Progress -   3.2 MB (85.1%)\n2023-07-11 04:35:31.814 [ INFO] Progress -   3.2 MB (87.2%)\n2023-07-11 04:35:31.983 [ INFO] Progress -   3.2 MB (89.3%)\n2023-07-11 04:35:31.983 [ INFO] Progress -   3.2 MB (91.4%)\n2023-07-11 04:35:31.983 [ INFO] Progress -   3.2 MB (93.5%)\n2023-07-11 04:35:31.984 [ INFO] Progress -   3.2 MB (95.5%)\n2023-07-11 04:35:31.984 [ INFO] Progress -   3.2 MB (97.6%)\n2023-07-11 04:35:31.984 [ INFO] Progress -   3.2 MB (99.7%)\n2023-07-11 04:35:31.985 [ INFO] Progress -   3.2 MB (100.0%)\n2023-07-11 04:35:31.985 [ INFO] Processing  time : 0:00:33.103400\n2023-07-11 04:35:31.985 [ INFO] Downloading time : 0:00:01.401763\n2023-07-11 04:35:31.985 [ INFO] Total time       : 0:00:34.505163\n2023-07-11 04:35:31.985 [ INFO] Download rate    : 1.5 MB/s\n2023-07-11 04:35:31.985 [ INFO] Save into        : motu/cmems_obs-sl_glo_phy-ssh_my_allsat-l4-duacs-0.25deg_P1D/200006.nc\n2023-07-11 04:35:32.015 [ INFO] Done\n2023-07-11 04:35:32.256 [ INFO] Asynchronous mode set\n2023-07-11 04:35:32.257 [ INFO] Authenticating user mphan for service https://my.cmems-du.eu/motu-web/Motu\n2023-07-11 04:35:40.867 [ INFO] Requesting file to download (this can take a while)...\n2023-07-11 04:35:49.156 [ INFO] Authenticating user mphan for service https://my.cmems-du.eu/motu-web/Motu\n2023-07-11 04:36:05.880 [ INFO] The product is ready for download\n2023-07-11 04:36:05.880 [ INFO] Downloading file (this can take a while)...\n2023-07-11 04:36:06.624 [ INFO] File type: application/x-netcdf\n2023-07-11 04:36:06.625 [ INFO] File size: 3.3 MB (3260684 B)\n2023-07-11 04:36:06.625 [ INFO] Downloading file /home/jovyan/shared/minh-notebooks/motu/cmems_obs-sl_glo_phy-ssh_my_allsat-l4-duacs-0.25deg_P1D/200007.nc\n2023-07-11 04:36:06.974 [ INFO] Progress -   3.3 MB (2.0%)\n2023-07-11 04:36:07.149 [ INFO] Progress -   3.3 MB (4.0%)\n2023-07-11 04:36:07.324 [ INFO] Progress -   3.3 MB (6.0%)\n2023-07-11 04:36:07.324 [ INFO] Progress -   3.3 MB (8.0%)\n2023-07-11 04:36:07.325 [ INFO] Progress -   3.3 MB (10.0%)\n2023-07-11 04:36:07.499 [ INFO] Progress -   3.3 MB (12.1%)\n2023-07-11 04:36:07.500 [ INFO] Progress -   3.3 MB (14.1%)\n2023-07-11 04:36:07.500 [ INFO] Progress -   3.3 MB (16.1%)\n2023-07-11 04:36:07.500 [ INFO] Progress -   3.3 MB (18.1%)\n2023-07-11 04:36:07.500 [ INFO] Progress -   3.3 MB (20.1%)\n2023-07-11 04:36:07.501 [ INFO] Progress -   3.3 MB (22.1%)\n2023-07-11 04:36:07.501 [ INFO] Progress -   3.3 MB (24.1%)\n2023-07-11 04:36:07.674 [ INFO] Progress -   3.3 MB (26.1%)\n2023-07-11 04:36:07.675 [ INFO] Progress -   3.3 MB (28.1%)\n2023-07-11 04:36:07.675 [ INFO] Progress -   3.3 MB (30.1%)\n2023-07-11 04:36:07.675 [ INFO] Progress -   3.3 MB (32.2%)\n2023-07-11 04:36:07.676 [ INFO] Progress -   3.3 MB (34.2%)\n2023-07-11 04:36:07.677 [ INFO] Progress -   3.3 MB (36.2%)\n2023-07-11 04:36:07.677 [ INFO] Progress -   3.3 MB (38.2%)\n2023-07-11 04:36:07.677 [ INFO] Progress -   3.3 MB (40.2%)\n2023-07-11 04:36:07.677 [ INFO] Progress -   3.3 MB (42.2%)\n2023-07-11 04:36:07.678 [ INFO] Progress -   3.3 MB (44.2%)\n2023-07-11 04:36:07.678 [ INFO] Progress -   3.3 MB (46.2%)\n2023-07-11 04:36:07.678 [ INFO] Progress -   3.3 MB (48.2%)\n2023-07-11 04:36:07.849 [ INFO] Progress -   3.3 MB (50.2%)\n2023-07-11 04:36:07.850 [ INFO] Progress -   3.3 MB (52.3%)\n2023-07-11 04:36:07.850 [ INFO] Progress -   3.3 MB (54.3%)\n2023-07-11 04:36:07.850 [ INFO] Progress -   3.3 MB (56.3%)\n2023-07-11 04:36:07.851 [ INFO] Progress -   3.3 MB (58.3%)\n2023-07-11 04:36:07.851 [ INFO] Progress -   3.3 MB (60.3%)\n2023-07-11 04:36:07.851 [ INFO] Progress -   3.3 MB (62.3%)\n2023-07-11 04:36:07.852 [ INFO] Progress -   3.3 MB (64.3%)\n2023-07-11 04:36:07.853 [ INFO] Progress -   3.3 MB (66.3%)\n2023-07-11 04:36:07.853 [ INFO] Progress -   3.3 MB (68.3%)\n2023-07-11 04:36:07.853 [ INFO] Progress -   3.3 MB (70.3%)\n2023-07-11 04:36:07.853 [ INFO] Progress -   3.3 MB (72.4%)\n2023-07-11 04:36:07.854 [ INFO] Progress -   3.3 MB (74.4%)\n2023-07-11 04:36:07.854 [ INFO] Progress -   3.3 MB (76.4%)\n2023-07-11 04:36:07.854 [ INFO] Progress -   3.3 MB (78.4%)\n2023-07-11 04:36:07.854 [ INFO] Progress -   3.3 MB (80.4%)\n2023-07-11 04:36:07.854 [ INFO] Progress -   3.3 MB (82.4%)\n2023-07-11 04:36:07.855 [ INFO] Progress -   3.3 MB (84.4%)\n2023-07-11 04:36:07.855 [ INFO] Progress -   3.3 MB (86.4%)\n2023-07-11 04:36:07.855 [ INFO] Progress -   3.3 MB (88.4%)\n2023-07-11 04:36:07.855 [ INFO] Progress -   3.3 MB (90.4%)\n2023-07-11 04:36:07.856 [ INFO] Progress -   3.3 MB (92.5%)\n2023-07-11 04:36:07.856 [ INFO] Progress -   3.3 MB (94.5%)\n2023-07-11 04:36:07.856 [ INFO] Progress -   3.3 MB (96.5%)\n2023-07-11 04:36:07.857 [ INFO] Progress -   3.3 MB (98.5%)\n2023-07-11 04:36:08.024 [ INFO] Progress -   3.3 MB (100.0%)\n2023-07-11 04:36:08.025 [ INFO] Processing  time : 0:00:34.370452\n2023-07-11 04:36:08.025 [ INFO] Downloading time : 0:00:01.399979\n2023-07-11 04:36:08.025 [ INFO] Total time       : 0:00:35.770431\n2023-07-11 04:36:08.025 [ INFO] Download rate    : 1.5 MB/s\n2023-07-11 04:36:08.025 [ INFO] Save into        : motu/cmems_obs-sl_glo_phy-ssh_my_allsat-l4-duacs-0.25deg_P1D/200007.nc\n2023-07-11 04:36:08.055 [ INFO] Done\n2023-07-11 04:36:08.293 [ INFO] Asynchronous mode set\n2023-07-11 04:36:08.294 [ INFO] Authenticating user mphan for service https://my.cmems-du.eu/motu-web/Motu\n2023-07-11 04:36:16.318 [ INFO] Requesting file to download (this can take a while)...\n2023-07-11 04:36:24.794 [ INFO] Authenticating user mphan for service https://my.cmems-du.eu/motu-web/Motu\n2023-07-11 04:36:40.691 [ INFO] The product is ready for download\n2023-07-11 04:36:40.691 [ INFO] Downloading file (this can take a while)...\n2023-07-11 04:36:41.620 [ INFO] File type: application/x-netcdf\n2023-07-11 04:36:41.620 [ INFO] File size: 3.3 MB (3260684 B)\n2023-07-11 04:36:41.620 [ INFO] Downloading file /home/jovyan/shared/minh-notebooks/motu/cmems_obs-sl_glo_phy-ssh_my_allsat-l4-duacs-0.25deg_P1D/200008.nc\n2023-07-11 04:36:41.794 [ INFO] Progress -   3.3 MB (2.0%)\n2023-07-11 04:36:41.969 [ INFO] Progress -   3.3 MB (4.0%)\n2023-07-11 04:36:42.144 [ INFO] Progress -   3.3 MB (6.0%)\n2023-07-11 04:36:42.145 [ INFO] Progress -   3.3 MB (8.0%)\n2023-07-11 04:36:42.145 [ INFO] Progress -   3.3 MB (10.0%)\n2023-07-11 04:36:42.319 [ INFO] Progress -   3.3 MB (12.1%)\n2023-07-11 04:36:42.320 [ INFO] Progress -   3.3 MB (14.1%)\n2023-07-11 04:36:42.320 [ INFO] Progress -   3.3 MB (16.1%)\n2023-07-11 04:36:42.320 [ INFO] Progress -   3.3 MB (18.1%)\n2023-07-11 04:36:42.321 [ INFO] Progress -   3.3 MB (20.1%)\n2023-07-11 04:36:42.321 [ INFO] Progress -   3.3 MB (22.1%)\n2023-07-11 04:36:42.321 [ INFO] Progress -   3.3 MB (24.1%)\n2023-07-11 04:36:42.494 [ INFO] Progress -   3.3 MB (26.1%)\n2023-07-11 04:36:42.495 [ INFO] Progress -   3.3 MB (28.1%)\n2023-07-11 04:36:42.495 [ INFO] Progress -   3.3 MB (30.1%)\n2023-07-11 04:36:42.495 [ INFO] Progress -   3.3 MB (32.2%)\n2023-07-11 04:36:42.496 [ INFO] Progress -   3.3 MB (34.2%)\n2023-07-11 04:36:42.497 [ INFO] Progress -   3.3 MB (36.2%)\n2023-07-11 04:36:42.497 [ INFO] Progress -   3.3 MB (38.2%)\n2023-07-11 04:36:42.497 [ INFO] Progress -   3.3 MB (40.2%)\n2023-07-11 04:36:42.497 [ INFO] Progress -   3.3 MB (42.2%)\n2023-07-11 04:36:42.498 [ INFO] Progress -   3.3 MB (44.2%)\n2023-07-11 04:36:42.498 [ INFO] Progress -   3.3 MB (46.2%)\n2023-07-11 04:36:42.498 [ INFO] Progress -   3.3 MB (48.2%)\n2023-07-11 04:36:42.669 [ INFO] Progress -   3.3 MB (50.2%)\n2023-07-11 04:36:42.670 [ INFO] Progress -   3.3 MB (52.3%)\n2023-07-11 04:36:42.670 [ INFO] Progress -   3.3 MB (54.3%)\n2023-07-11 04:36:42.670 [ INFO] Progress -   3.3 MB (56.3%)\n2023-07-11 04:36:42.671 [ INFO] Progress -   3.3 MB (58.3%)\n2023-07-11 04:36:42.671 [ INFO] Progress -   3.3 MB (60.3%)\n2023-07-11 04:36:42.671 [ INFO] Progress -   3.3 MB (62.3%)\n2023-07-11 04:36:42.672 [ INFO] Progress -   3.3 MB (64.3%)\n2023-07-11 04:36:42.672 [ INFO] Progress -   3.3 MB (66.3%)\n2023-07-11 04:36:42.673 [ INFO] Progress -   3.3 MB (68.3%)\n2023-07-11 04:36:42.673 [ INFO] Progress -   3.3 MB (70.3%)\n2023-07-11 04:36:42.673 [ INFO] Progress -   3.3 MB (72.4%)\n2023-07-11 04:36:42.673 [ INFO] Progress -   3.3 MB (74.4%)\n2023-07-11 04:36:42.674 [ INFO] Progress -   3.3 MB (76.4%)\n2023-07-11 04:36:42.674 [ INFO] Progress -   3.3 MB (78.4%)\n2023-07-11 04:36:42.674 [ INFO] Progress -   3.3 MB (80.4%)\n2023-07-11 04:36:42.674 [ INFO] Progress -   3.3 MB (82.4%)\n2023-07-11 04:36:42.675 [ INFO] Progress -   3.3 MB (84.4%)\n2023-07-11 04:36:42.675 [ INFO] Progress -   3.3 MB (86.4%)\n2023-07-11 04:36:42.675 [ INFO] Progress -   3.3 MB (88.4%)\n2023-07-11 04:36:42.675 [ INFO] Progress -   3.3 MB (90.4%)\n2023-07-11 04:36:42.676 [ INFO] Progress -   3.3 MB (92.5%)\n2023-07-11 04:36:42.676 [ INFO] Progress -   3.3 MB (94.5%)\n2023-07-11 04:36:42.676 [ INFO] Progress -   3.3 MB (96.5%)\n2023-07-11 04:36:42.677 [ INFO] Progress -   3.3 MB (98.5%)\n2023-07-11 04:36:42.845 [ INFO] Progress -   3.3 MB (100.0%)\n2023-07-11 04:36:42.845 [ INFO] Processing  time : 0:00:33.329086\n2023-07-11 04:36:42.845 [ INFO] Downloading time : 0:00:01.224631\n2023-07-11 04:36:42.845 [ INFO] Total time       : 0:00:34.553717\n2023-07-11 04:36:42.845 [ INFO] Download rate    : 1.5 MB/s\n2023-07-11 04:36:42.845 [ INFO] Save into        : motu/cmems_obs-sl_glo_phy-ssh_my_allsat-l4-duacs-0.25deg_P1D/200008.nc\n2023-07-11 04:36:42.876 [ INFO] Done\n2023-07-11 04:36:43.117 [ INFO] Asynchronous mode set\n2023-07-11 04:36:43.118 [ INFO] Authenticating user mphan for service https://my.cmems-du.eu/motu-web/Motu\n2023-07-11 04:36:50.965 [ INFO] Requesting file to download (this can take a while)...\n2023-07-11 04:36:59.415 [ INFO] Authenticating user mphan for service https://my.cmems-du.eu/motu-web/Motu\n2023-07-11 04:37:13.369 [ INFO] The product is ready for download\n2023-07-11 04:37:13.369 [ INFO] Downloading file (this can take a while)...\n2023-07-11 04:37:14.112 [ INFO] File type: application/x-netcdf\n2023-07-11 04:37:14.112 [ INFO] File size: 3.2 MB (3155704 B)\n2023-07-11 04:37:14.113 [ INFO] Downloading file /home/jovyan/shared/minh-notebooks/motu/cmems_obs-sl_glo_phy-ssh_my_allsat-l4-duacs-0.25deg_P1D/200009.nc\n2023-07-11 04:37:14.462 [ INFO] Progress -   3.2 MB (2.1%)\n2023-07-11 04:37:14.637 [ INFO] Progress -   3.2 MB (4.2%)\n2023-07-11 04:37:14.812 [ INFO] Progress -   3.2 MB (6.2%)\n2023-07-11 04:37:14.812 [ INFO] Progress -   3.2 MB (8.3%)\n2023-07-11 04:37:14.813 [ INFO] Progress -   3.2 MB (10.4%)\n2023-07-11 04:37:14.987 [ INFO] Progress -   3.2 MB (12.5%)\n2023-07-11 04:37:14.987 [ INFO] Progress -   3.2 MB (14.5%)\n2023-07-11 04:37:14.988 [ INFO] Progress -   3.2 MB (16.6%)\n2023-07-11 04:37:14.988 [ INFO] Progress -   3.2 MB (18.7%)\n2023-07-11 04:37:14.988 [ INFO] Progress -   3.2 MB (20.8%)\n2023-07-11 04:37:14.988 [ INFO] Progress -   3.2 MB (22.8%)\n2023-07-11 04:37:15.162 [ INFO] Progress -   3.2 MB (24.9%)\n2023-07-11 04:37:15.163 [ INFO] Progress -   3.2 MB (27.0%)\n2023-07-11 04:37:15.163 [ INFO] Progress -   3.2 MB (29.1%)\n2023-07-11 04:37:15.163 [ INFO] Progress -   3.2 MB (31.2%)\n2023-07-11 04:37:15.164 [ INFO] Progress -   3.2 MB (33.2%)\n2023-07-11 04:37:15.164 [ INFO] Progress -   3.2 MB (35.3%)\n2023-07-11 04:37:15.165 [ INFO] Progress -   3.2 MB (37.4%)\n2023-07-11 04:37:15.165 [ INFO] Progress -   3.2 MB (39.5%)\n2023-07-11 04:37:15.165 [ INFO] Progress -   3.2 MB (41.5%)\n2023-07-11 04:37:15.165 [ INFO] Progress -   3.2 MB (43.6%)\n2023-07-11 04:37:15.166 [ INFO] Progress -   3.2 MB (45.7%)\n2023-07-11 04:37:15.337 [ INFO] Progress -   3.2 MB (47.8%)\n2023-07-11 04:37:15.337 [ INFO] Progress -   3.2 MB (49.8%)\n2023-07-11 04:37:15.338 [ INFO] Progress -   3.2 MB (51.9%)\n2023-07-11 04:37:15.338 [ INFO] Progress -   3.2 MB (54.0%)\n2023-07-11 04:37:15.338 [ INFO] Progress -   3.2 MB (56.1%)\n2023-07-11 04:37:15.338 [ INFO] Progress -   3.2 MB (58.1%)\n2023-07-11 04:37:15.339 [ INFO] Progress -   3.2 MB (60.2%)\n2023-07-11 04:37:15.339 [ INFO] Progress -   3.2 MB (62.3%)\n2023-07-11 04:37:15.339 [ INFO] Progress -   3.2 MB (64.4%)\n2023-07-11 04:37:15.339 [ INFO] Progress -   3.2 MB (66.5%)\n2023-07-11 04:37:15.340 [ INFO] Progress -   3.2 MB (68.5%)\n2023-07-11 04:37:15.340 [ INFO] Progress -   3.2 MB (70.6%)\n2023-07-11 04:37:15.341 [ INFO] Progress -   3.2 MB (72.7%)\n2023-07-11 04:37:15.341 [ INFO] Progress -   3.2 MB (74.8%)\n2023-07-11 04:37:15.341 [ INFO] Progress -   3.2 MB (76.8%)\n2023-07-11 04:37:15.341 [ INFO] Progress -   3.2 MB (78.9%)\n2023-07-11 04:37:15.342 [ INFO] Progress -   3.2 MB (81.0%)\n2023-07-11 04:37:15.342 [ INFO] Progress -   3.2 MB (83.1%)\n2023-07-11 04:37:15.342 [ INFO] Progress -   3.2 MB (85.1%)\n2023-07-11 04:37:15.342 [ INFO] Progress -   3.2 MB (87.2%)\n2023-07-11 04:37:15.342 [ INFO] Progress -   3.2 MB (89.3%)\n2023-07-11 04:37:15.343 [ INFO] Progress -   3.2 MB (91.4%)\n2023-07-11 04:37:15.343 [ INFO] Progress -   3.2 MB (93.5%)\n2023-07-11 04:37:15.512 [ INFO] Progress -   3.2 MB (95.5%)\n2023-07-11 04:37:15.512 [ INFO] Progress -   3.2 MB (97.6%)\n2023-07-11 04:37:15.513 [ INFO] Progress -   3.2 MB (99.7%)\n2023-07-11 04:37:15.513 [ INFO] Progress -   3.2 MB (100.0%)\n2023-07-11 04:37:15.513 [ INFO] Processing  time : 0:00:30.997472\n2023-07-11 04:37:15.513 [ INFO] Downloading time : 0:00:01.400914\n2023-07-11 04:37:15.513 [ INFO] Total time       : 0:00:32.398386\n2023-07-11 04:37:15.513 [ INFO] Download rate    : 1.5 MB/s\n2023-07-11 04:37:15.514 [ INFO] Save into        : motu/cmems_obs-sl_glo_phy-ssh_my_allsat-l4-duacs-0.25deg_P1D/200009.nc\n2023-07-11 04:37:15.543 [ INFO] Done\n2023-07-11 04:37:15.783 [ INFO] Asynchronous mode set\n2023-07-11 04:37:15.783 [ INFO] Authenticating user mphan for service https://my.cmems-du.eu/motu-web/Motu\n2023-07-11 04:37:20.984 [ INFO] Requesting file to download (this can take a while)...\n2023-07-11 04:37:30.393 [ INFO] Authenticating user mphan for service https://my.cmems-du.eu/motu-web/Motu\n2023-07-11 04:37:47.071 [ INFO] The product is ready for download\n2023-07-11 04:37:47.071 [ INFO] Downloading file (this can take a while)...\n2023-07-11 04:37:47.821 [ INFO] File type: application/x-netcdf\n2023-07-11 04:37:47.821 [ INFO] File size: 3.3 MB (3260684 B)\n2023-07-11 04:37:47.821 [ INFO] Downloading file /home/jovyan/shared/minh-notebooks/motu/cmems_obs-sl_glo_phy-ssh_my_allsat-l4-duacs-0.25deg_P1D/200010.nc\n2023-07-11 04:37:48.170 [ INFO] Progress -   3.3 MB (2.0%)\n2023-07-11 04:37:48.346 [ INFO] Progress -   3.3 MB (4.0%)\n2023-07-11 04:37:48.520 [ INFO] Progress -   3.3 MB (6.0%)\n2023-07-11 04:37:48.521 [ INFO] Progress -   3.3 MB (8.0%)\n2023-07-11 04:37:48.521 [ INFO] Progress -   3.3 MB (10.0%)\n2023-07-11 04:37:48.695 [ INFO] Progress -   3.3 MB (12.1%)\n2023-07-11 04:37:48.696 [ INFO] Progress -   3.3 MB (14.1%)\n2023-07-11 04:37:48.696 [ INFO] Progress -   3.3 MB (16.1%)\n2023-07-11 04:37:48.696 [ INFO] Progress -   3.3 MB (18.1%)\n2023-07-11 04:37:48.697 [ INFO] Progress -   3.3 MB (20.1%)\n2023-07-11 04:37:48.697 [ INFO] Progress -   3.3 MB (22.1%)\n2023-07-11 04:37:48.697 [ INFO] Progress -   3.3 MB (24.1%)\n2023-07-11 04:37:48.871 [ INFO] Progress -   3.3 MB (26.1%)\n2023-07-11 04:37:48.871 [ INFO] Progress -   3.3 MB (28.1%)\n2023-07-11 04:37:48.872 [ INFO] Progress -   3.3 MB (30.1%)\n2023-07-11 04:37:48.872 [ INFO] Progress -   3.3 MB (32.2%)\n2023-07-11 04:37:48.873 [ INFO] Progress -   3.3 MB (34.2%)\n2023-07-11 04:37:48.873 [ INFO] Progress -   3.3 MB (36.2%)\n2023-07-11 04:37:48.873 [ INFO] Progress -   3.3 MB (38.2%)\n2023-07-11 04:37:48.874 [ INFO] Progress -   3.3 MB (40.2%)\n2023-07-11 04:37:48.874 [ INFO] Progress -   3.3 MB (42.2%)\n2023-07-11 04:37:48.874 [ INFO] Progress -   3.3 MB (44.2%)\n2023-07-11 04:37:48.874 [ INFO] Progress -   3.3 MB (46.2%)\n2023-07-11 04:37:48.874 [ INFO] Progress -   3.3 MB (48.2%)\n2023-07-11 04:37:49.046 [ INFO] Progress -   3.3 MB (50.2%)\n2023-07-11 04:37:49.046 [ INFO] Progress -   3.3 MB (52.3%)\n2023-07-11 04:37:49.046 [ INFO] Progress -   3.3 MB (54.3%)\n2023-07-11 04:37:49.047 [ INFO] Progress -   3.3 MB (56.3%)\n2023-07-11 04:37:49.047 [ INFO] Progress -   3.3 MB (58.3%)\n2023-07-11 04:37:49.047 [ INFO] Progress -   3.3 MB (60.3%)\n2023-07-11 04:37:49.048 [ INFO] Progress -   3.3 MB (62.3%)\n2023-07-11 04:37:49.048 [ INFO] Progress -   3.3 MB (64.3%)\n2023-07-11 04:37:49.049 [ INFO] Progress -   3.3 MB (66.3%)\n2023-07-11 04:37:49.049 [ INFO] Progress -   3.3 MB (68.3%)\n2023-07-11 04:37:49.049 [ INFO] Progress -   3.3 MB (70.3%)\n2023-07-11 04:37:49.049 [ INFO] Progress -   3.3 MB (72.4%)\n2023-07-11 04:37:49.050 [ INFO] Progress -   3.3 MB (74.4%)\n2023-07-11 04:37:49.050 [ INFO] Progress -   3.3 MB (76.4%)\n2023-07-11 04:37:49.050 [ INFO] Progress -   3.3 MB (78.4%)\n2023-07-11 04:37:49.050 [ INFO] Progress -   3.3 MB (80.4%)\n2023-07-11 04:37:49.051 [ INFO] Progress -   3.3 MB (82.4%)\n2023-07-11 04:37:49.051 [ INFO] Progress -   3.3 MB (84.4%)\n2023-07-11 04:37:49.051 [ INFO] Progress -   3.3 MB (86.4%)\n2023-07-11 04:37:49.051 [ INFO] Progress -   3.3 MB (88.4%)\n2023-07-11 04:37:49.051 [ INFO] Progress -   3.3 MB (90.4%)\n2023-07-11 04:37:49.052 [ INFO] Progress -   3.3 MB (92.5%)\n2023-07-11 04:37:49.052 [ INFO] Progress -   3.3 MB (94.5%)\n2023-07-11 04:37:49.052 [ INFO] Progress -   3.3 MB (96.5%)\n2023-07-11 04:37:49.053 [ INFO] Progress -   3.3 MB (98.5%)\n2023-07-11 04:37:49.053 [ INFO] Progress -   3.3 MB (100.0%)\n2023-07-11 04:37:49.053 [ INFO] Processing  time : 0:00:32.040412\n2023-07-11 04:37:49.053 [ INFO] Downloading time : 0:00:01.232141\n2023-07-11 04:37:49.053 [ INFO] Total time       : 0:00:33.272553\n2023-07-11 04:37:49.053 [ INFO] Download rate    : 1.6 MB/s\n2023-07-11 04:37:49.054 [ INFO] Save into        : motu/cmems_obs-sl_glo_phy-ssh_my_allsat-l4-duacs-0.25deg_P1D/200010.nc\n2023-07-11 04:37:49.084 [ INFO] Done\n2023-07-11 04:37:49.325 [ INFO] Asynchronous mode set\n2023-07-11 04:37:49.325 [ INFO] Authenticating user mphan for service https://my.cmems-du.eu/motu-web/Motu\n2023-07-11 04:37:59.411 [ INFO] Requesting file to download (this can take a while)...\n2023-07-11 04:38:06.403 [ INFO] Authenticating user mphan for service https://my.cmems-du.eu/motu-web/Motu\n2023-07-11 04:38:22.049 [ INFO] The product is ready for download\n2023-07-11 04:38:22.049 [ INFO] Downloading file (this can take a while)...\n2023-07-11 04:38:22.795 [ INFO] File type: application/x-netcdf\n2023-07-11 04:38:22.795 [ INFO] File size: 3.2 MB (3155704 B)\n2023-07-11 04:38:22.795 [ INFO] Downloading file /home/jovyan/shared/minh-notebooks/motu/cmems_obs-sl_glo_phy-ssh_my_allsat-l4-duacs-0.25deg_P1D/200011.nc\n2023-07-11 04:38:23.144 [ INFO] Progress -   3.2 MB (2.1%)\n2023-07-11 04:38:23.319 [ INFO] Progress -   3.2 MB (4.2%)\n2023-07-11 04:38:23.494 [ INFO] Progress -   3.2 MB (6.2%)\n2023-07-11 04:38:23.495 [ INFO] Progress -   3.2 MB (8.3%)\n2023-07-11 04:38:23.495 [ INFO] Progress -   3.2 MB (10.4%)\n2023-07-11 04:38:23.669 [ INFO] Progress -   3.2 MB (12.5%)\n2023-07-11 04:38:23.670 [ INFO] Progress -   3.2 MB (14.5%)\n2023-07-11 04:38:23.670 [ INFO] Progress -   3.2 MB (16.6%)\n2023-07-11 04:38:23.670 [ INFO] Progress -   3.2 MB (18.7%)\n2023-07-11 04:38:23.671 [ INFO] Progress -   3.2 MB (20.8%)\n2023-07-11 04:38:23.671 [ INFO] Progress -   3.2 MB (22.8%)\n2023-07-11 04:38:23.844 [ INFO] Progress -   3.2 MB (24.9%)\n2023-07-11 04:38:23.845 [ INFO] Progress -   3.2 MB (27.0%)\n2023-07-11 04:38:23.845 [ INFO] Progress -   3.2 MB (29.1%)\n2023-07-11 04:38:23.845 [ INFO] Progress -   3.2 MB (31.2%)\n2023-07-11 04:38:23.846 [ INFO] Progress -   3.2 MB (33.2%)\n2023-07-11 04:38:23.847 [ INFO] Progress -   3.2 MB (35.3%)\n2023-07-11 04:38:23.847 [ INFO] Progress -   3.2 MB (37.4%)\n2023-07-11 04:38:23.847 [ INFO] Progress -   3.2 MB (39.5%)\n2023-07-11 04:38:23.847 [ INFO] Progress -   3.2 MB (41.5%)\n2023-07-11 04:38:23.848 [ INFO] Progress -   3.2 MB (43.6%)\n2023-07-11 04:38:23.848 [ INFO] Progress -   3.2 MB (45.7%)\n2023-07-11 04:38:23.848 [ INFO] Progress -   3.2 MB (47.8%)\n2023-07-11 04:38:24.019 [ INFO] Progress -   3.2 MB (49.8%)\n2023-07-11 04:38:24.020 [ INFO] Progress -   3.2 MB (51.9%)\n2023-07-11 04:38:24.020 [ INFO] Progress -   3.2 MB (54.0%)\n2023-07-11 04:38:24.020 [ INFO] Progress -   3.2 MB (56.1%)\n2023-07-11 04:38:24.021 [ INFO] Progress -   3.2 MB (58.1%)\n2023-07-11 04:38:24.021 [ INFO] Progress -   3.2 MB (60.2%)\n2023-07-11 04:38:24.021 [ INFO] Progress -   3.2 MB (62.3%)\n2023-07-11 04:38:24.021 [ INFO] Progress -   3.2 MB (64.4%)\n2023-07-11 04:38:24.022 [ INFO] Progress -   3.2 MB (66.5%)\n2023-07-11 04:38:24.022 [ INFO] Progress -   3.2 MB (68.5%)\n2023-07-11 04:38:24.023 [ INFO] Progress -   3.2 MB (70.6%)\n2023-07-11 04:38:24.023 [ INFO] Progress -   3.2 MB (72.7%)\n2023-07-11 04:38:24.023 [ INFO] Progress -   3.2 MB (74.8%)\n2023-07-11 04:38:24.023 [ INFO] Progress -   3.2 MB (76.8%)\n2023-07-11 04:38:24.023 [ INFO] Progress -   3.2 MB (78.9%)\n2023-07-11 04:38:24.024 [ INFO] Progress -   3.2 MB (81.0%)\n2023-07-11 04:38:24.024 [ INFO] Progress -   3.2 MB (83.1%)\n2023-07-11 04:38:24.024 [ INFO] Progress -   3.2 MB (85.1%)\n2023-07-11 04:38:24.024 [ INFO] Progress -   3.2 MB (87.2%)\n2023-07-11 04:38:24.025 [ INFO] Progress -   3.2 MB (89.3%)\n2023-07-11 04:38:24.025 [ INFO] Progress -   3.2 MB (91.4%)\n2023-07-11 04:38:24.025 [ INFO] Progress -   3.2 MB (93.5%)\n2023-07-11 04:38:24.025 [ INFO] Progress -   3.2 MB (95.5%)\n2023-07-11 04:38:24.025 [ INFO] Progress -   3.2 MB (97.6%)\n2023-07-11 04:38:24.194 [ INFO] Progress -   3.2 MB (99.7%)\n2023-07-11 04:38:24.195 [ INFO] Progress -   3.2 MB (100.0%)\n2023-07-11 04:38:24.195 [ INFO] Processing  time : 0:00:33.470549\n2023-07-11 04:38:24.195 [ INFO] Downloading time : 0:00:01.400394\n2023-07-11 04:38:24.195 [ INFO] Total time       : 0:00:34.870943\n2023-07-11 04:38:24.195 [ INFO] Download rate    : 1.5 MB/s\n2023-07-11 04:38:24.195 [ INFO] Save into        : motu/cmems_obs-sl_glo_phy-ssh_my_allsat-l4-duacs-0.25deg_P1D/200011.nc\n2023-07-11 04:38:24.225 [ INFO] Done\n2023-07-11 04:38:24.465 [ INFO] Asynchronous mode set\n2023-07-11 04:38:24.465 [ INFO] Authenticating user mphan for service https://my.cmems-du.eu/motu-web/Motu\n2023-07-11 04:38:30.868 [ INFO] Requesting file to download (this can take a while)...\n2023-07-11 04:38:40.474 [ INFO] Authenticating user mphan for service https://my.cmems-du.eu/motu-web/Motu\n2023-07-11 04:38:55.592 [ INFO] The product is ready for download\n2023-07-11 04:38:55.592 [ INFO] Downloading file (this can take a while)...\n2023-07-11 04:38:56.336 [ INFO] File type: application/x-netcdf\n2023-07-11 04:38:56.336 [ INFO] File size: 3.3 MB (3260684 B)\n2023-07-11 04:38:56.336 [ INFO] Downloading file /home/jovyan/shared/minh-notebooks/motu/cmems_obs-sl_glo_phy-ssh_my_allsat-l4-duacs-0.25deg_P1D/200012.nc\n2023-07-11 04:38:56.687 [ INFO] Progress -   3.3 MB (2.0%)\n2023-07-11 04:38:56.862 [ INFO] Progress -   3.3 MB (4.0%)\n2023-07-11 04:38:57.035 [ INFO] Progress -   3.3 MB (6.0%)\n2023-07-11 04:38:57.037 [ INFO] Progress -   3.3 MB (8.0%)\n2023-07-11 04:38:57.037 [ INFO] Progress -   3.3 MB (10.0%)\n2023-07-11 04:38:57.037 [ INFO] Progress -   3.3 MB (12.1%)\n2023-07-11 04:38:57.211 [ INFO] Progress -   3.3 MB (14.1%)\n2023-07-11 04:38:57.212 [ INFO] Progress -   3.3 MB (16.1%)\n2023-07-11 04:38:57.212 [ INFO] Progress -   3.3 MB (18.1%)\n2023-07-11 04:38:57.212 [ INFO] Progress -   3.3 MB (20.1%)\n2023-07-11 04:38:57.213 [ INFO] Progress -   3.3 MB (22.1%)\n2023-07-11 04:38:57.213 [ INFO] Progress -   3.3 MB (24.1%)\n2023-07-11 04:38:57.386 [ INFO] Progress -   3.3 MB (26.1%)\n2023-07-11 04:38:57.386 [ INFO] Progress -   3.3 MB (28.1%)\n2023-07-11 04:38:57.386 [ INFO] Progress -   3.3 MB (30.1%)\n2023-07-11 04:38:57.387 [ INFO] Progress -   3.3 MB (32.2%)\n2023-07-11 04:38:57.388 [ INFO] Progress -   3.3 MB (34.2%)\n2023-07-11 04:38:57.388 [ INFO] Progress -   3.3 MB (36.2%)\n2023-07-11 04:38:57.388 [ INFO] Progress -   3.3 MB (38.2%)\n2023-07-11 04:38:57.389 [ INFO] Progress -   3.3 MB (40.2%)\n2023-07-11 04:38:57.389 [ INFO] Progress -   3.3 MB (42.2%)\n2023-07-11 04:38:57.389 [ INFO] Progress -   3.3 MB (44.2%)\n2023-07-11 04:38:57.389 [ INFO] Progress -   3.3 MB (46.2%)\n2023-07-11 04:38:57.390 [ INFO] Progress -   3.3 MB (48.2%)\n2023-07-11 04:38:57.390 [ INFO] Progress -   3.3 MB (50.2%)\n2023-07-11 04:38:57.390 [ INFO] Progress -   3.3 MB (52.3%)\n2023-07-11 04:38:57.561 [ INFO] Progress -   3.3 MB (54.3%)\n2023-07-11 04:38:57.561 [ INFO] Progress -   3.3 MB (56.3%)\n2023-07-11 04:38:57.562 [ INFO] Progress -   3.3 MB (58.3%)\n2023-07-11 04:38:57.562 [ INFO] Progress -   3.3 MB (60.3%)\n2023-07-11 04:38:57.562 [ INFO] Progress -   3.3 MB (62.3%)\n2023-07-11 04:38:57.562 [ INFO] Progress -   3.3 MB (64.3%)\n2023-07-11 04:38:57.563 [ INFO] Progress -   3.3 MB (66.3%)\n2023-07-11 04:38:57.564 [ INFO] Progress -   3.3 MB (68.3%)\n2023-07-11 04:38:57.564 [ INFO] Progress -   3.3 MB (70.3%)\n2023-07-11 04:38:57.564 [ INFO] Progress -   3.3 MB (72.4%)\n2023-07-11 04:38:57.565 [ INFO] Progress -   3.3 MB (74.4%)\n2023-07-11 04:38:57.565 [ INFO] Progress -   3.3 MB (76.4%)\n2023-07-11 04:38:57.565 [ INFO] Progress -   3.3 MB (78.4%)\n2023-07-11 04:38:57.565 [ INFO] Progress -   3.3 MB (80.4%)\n2023-07-11 04:38:57.566 [ INFO] Progress -   3.3 MB (82.4%)\n2023-07-11 04:38:57.566 [ INFO] Progress -   3.3 MB (84.4%)\n2023-07-11 04:38:57.566 [ INFO] Progress -   3.3 MB (86.4%)\n2023-07-11 04:38:57.566 [ INFO] Progress -   3.3 MB (88.4%)\n2023-07-11 04:38:57.567 [ INFO] Progress -   3.3 MB (90.4%)\n2023-07-11 04:38:57.567 [ INFO] Progress -   3.3 MB (92.5%)\n2023-07-11 04:38:57.567 [ INFO] Progress -   3.3 MB (94.5%)\n2023-07-11 04:38:57.567 [ INFO] Progress -   3.3 MB (96.5%)\n2023-07-11 04:38:57.568 [ INFO] Progress -   3.3 MB (98.5%)\n2023-07-11 04:38:57.569 [ INFO] Progress -   3.3 MB (100.0%)\n2023-07-11 04:38:57.569 [ INFO] Processing  time : 0:00:31.874707\n2023-07-11 04:38:57.569 [ INFO] Downloading time : 0:00:01.232594\n2023-07-11 04:38:57.569 [ INFO] Total time       : 0:00:33.107301\n2023-07-11 04:38:57.569 [ INFO] Download rate    : 1.6 MB/s\n2023-07-11 04:38:57.569 [ INFO] Save into        : motu/cmems_obs-sl_glo_phy-ssh_my_allsat-l4-duacs-0.25deg_P1D/200012.nc\n2023-07-11 04:38:57.599 [ INFO] Done\n2023-07-11 04:38:57.840 [ INFO] Asynchronous mode set\n2023-07-11 04:38:57.840 [ INFO] Authenticating user mphan for service https://my.cmems-du.eu/motu-web/Motu\n2023-07-11 04:39:04.934 [ INFO] Requesting file to download (this can take a while)...\n2023-07-11 04:39:11.874 [ INFO] Authenticating user mphan for service https://my.cmems-du.eu/motu-web/Motu\n2023-07-11 04:39:27.152 [ INFO] The product is ready for download\n2023-07-11 04:39:27.153 [ INFO] Downloading file (this can take a while)...\n2023-07-11 04:39:27.897 [ INFO] File type: application/x-netcdf\n2023-07-11 04:39:27.897 [ INFO] File size: 3.3 MB (3260684 B)\n2023-07-11 04:39:27.897 [ INFO] Downloading file /home/jovyan/shared/minh-notebooks/motu/cmems_obs-sl_glo_phy-ssh_my_allsat-l4-duacs-0.25deg_P1D/200101.nc\n2023-07-11 04:39:28.247 [ INFO] Progress -   3.3 MB (2.0%)\n2023-07-11 04:39:28.422 [ INFO] Progress -   3.3 MB (4.0%)\n2023-07-11 04:39:28.597 [ INFO] Progress -   3.3 MB (6.0%)\n2023-07-11 04:39:28.597 [ INFO] Progress -   3.3 MB (8.0%)\n2023-07-11 04:39:28.772 [ INFO] Progress -   3.3 MB (10.0%)\n2023-07-11 04:39:28.772 [ INFO] Progress -   3.3 MB (12.1%)\n2023-07-11 04:39:28.772 [ INFO] Progress -   3.3 MB (14.1%)\n2023-07-11 04:39:28.773 [ INFO] Progress -   3.3 MB (16.1%)\n2023-07-11 04:39:28.773 [ INFO] Progress -   3.3 MB (18.1%)\n2023-07-11 04:39:28.947 [ INFO] Progress -   3.3 MB (20.1%)\n2023-07-11 04:39:28.947 [ INFO] Progress -   3.3 MB (22.1%)\n2023-07-11 04:39:28.947 [ INFO] Progress -   3.3 MB (24.1%)\n2023-07-11 04:39:28.948 [ INFO] Progress -   3.3 MB (26.1%)\n2023-07-11 04:39:28.948 [ INFO] Progress -   3.3 MB (28.1%)\n2023-07-11 04:39:28.948 [ INFO] Progress -   3.3 MB (30.1%)\n2023-07-11 04:39:29.122 [ INFO] Progress -   3.3 MB (32.2%)\n2023-07-11 04:39:29.123 [ INFO] Progress -   3.3 MB (34.2%)\n2023-07-11 04:39:29.123 [ INFO] Progress -   3.3 MB (36.2%)\n2023-07-11 04:39:29.124 [ INFO] Progress -   3.3 MB (38.2%)\n2023-07-11 04:39:29.124 [ INFO] Progress -   3.3 MB (40.2%)\n2023-07-11 04:39:29.124 [ INFO] Progress -   3.3 MB (42.2%)\n2023-07-11 04:39:29.124 [ INFO] Progress -   3.3 MB (44.2%)\n2023-07-11 04:39:29.125 [ INFO] Progress -   3.3 MB (46.2%)\n2023-07-11 04:39:29.125 [ INFO] Progress -   3.3 MB (48.2%)\n2023-07-11 04:39:29.125 [ INFO] Progress -   3.3 MB (50.2%)\n2023-07-11 04:39:29.125 [ INFO] Progress -   3.3 MB (52.3%)\n2023-07-11 04:39:29.125 [ INFO] Progress -   3.3 MB (54.3%)\n2023-07-11 04:39:29.126 [ INFO] Progress -   3.3 MB (56.3%)\n2023-07-11 04:39:29.126 [ INFO] Progress -   3.3 MB (58.3%)\n2023-07-11 04:39:29.297 [ INFO] Progress -   3.3 MB (60.3%)\n2023-07-11 04:39:29.297 [ INFO] Progress -   3.3 MB (62.3%)\n2023-07-11 04:39:29.297 [ INFO] Progress -   3.3 MB (64.3%)\n2023-07-11 04:39:29.298 [ INFO] Progress -   3.3 MB (66.3%)\n2023-07-11 04:39:29.299 [ INFO] Progress -   3.3 MB (68.3%)\n2023-07-11 04:39:29.299 [ INFO] Progress -   3.3 MB (70.3%)\n2023-07-11 04:39:29.299 [ INFO] Progress -   3.3 MB (72.4%)\n2023-07-11 04:39:29.300 [ INFO] Progress -   3.3 MB (74.4%)\n2023-07-11 04:39:29.300 [ INFO] Progress -   3.3 MB (76.4%)\n2023-07-11 04:39:29.300 [ INFO] Progress -   3.3 MB (78.4%)\n2023-07-11 04:39:29.300 [ INFO] Progress -   3.3 MB (80.4%)\n2023-07-11 04:39:29.301 [ INFO] Progress -   3.3 MB (82.4%)\n2023-07-11 04:39:29.301 [ INFO] Progress -   3.3 MB (84.4%)\n2023-07-11 04:39:29.301 [ INFO] Progress -   3.3 MB (86.4%)\n2023-07-11 04:39:29.301 [ INFO] Progress -   3.3 MB (88.4%)\n2023-07-11 04:39:29.301 [ INFO] Progress -   3.3 MB (90.4%)\n2023-07-11 04:39:29.302 [ INFO] Progress -   3.3 MB (92.5%)\n2023-07-11 04:39:29.302 [ INFO] Progress -   3.3 MB (94.5%)\n2023-07-11 04:39:29.302 [ INFO] Progress -   3.3 MB (96.5%)\n2023-07-11 04:39:29.303 [ INFO] Progress -   3.3 MB (98.5%)\n2023-07-11 04:39:29.303 [ INFO] Progress -   3.3 MB (100.0%)\n2023-07-11 04:39:29.303 [ INFO] Processing  time : 0:00:30.059472\n2023-07-11 04:39:29.303 [ INFO] Downloading time : 0:00:01.406073\n2023-07-11 04:39:29.303 [ INFO] Total time       : 0:00:31.465545\n2023-07-11 04:39:29.303 [ INFO] Download rate    : 1.5 MB/s\n2023-07-11 04:39:29.304 [ INFO] Save into        : motu/cmems_obs-sl_glo_phy-ssh_my_allsat-l4-duacs-0.25deg_P1D/200101.nc\n2023-07-11 04:39:29.334 [ INFO] Done\n2023-07-11 04:39:29.573 [ INFO] Asynchronous mode set\n2023-07-11 04:39:29.574 [ INFO] Authenticating user mphan for service https://my.cmems-du.eu/motu-web/Motu\n2023-07-11 04:39:36.995 [ INFO] Requesting file to download (this can take a while)...\n2023-07-11 04:39:45.826 [ INFO] Authenticating user mphan for service https://my.cmems-du.eu/motu-web/Motu\n2023-07-11 04:40:00.771 [ INFO] The product is ready for download\n2023-07-11 04:40:00.771 [ INFO] Downloading file (this can take a while)...\n2023-07-11 04:40:01.520 [ INFO] File type: application/x-netcdf\n2023-07-11 04:40:01.520 [ INFO] File size: 2.9 MB (2945744 B)\n2023-07-11 04:40:01.521 [ INFO] Downloading file /home/jovyan/shared/minh-notebooks/motu/cmems_obs-sl_glo_phy-ssh_my_allsat-l4-duacs-0.25deg_P1D/200102.nc\n2023-07-11 04:40:01.870 [ INFO] Progress -   2.9 MB (2.2%)\n2023-07-11 04:40:02.045 [ INFO] Progress -   2.9 MB (4.4%)\n2023-07-11 04:40:02.220 [ INFO] Progress -   2.9 MB (6.7%)\n2023-07-11 04:40:02.220 [ INFO] Progress -   2.9 MB (8.9%)\n2023-07-11 04:40:02.221 [ INFO] Progress -   2.9 MB (11.1%)\n2023-07-11 04:40:02.221 [ INFO] Progress -   2.9 MB (13.3%)\n2023-07-11 04:40:02.395 [ INFO] Progress -   2.9 MB (15.6%)\n2023-07-11 04:40:02.396 [ INFO] Progress -   2.9 MB (17.8%)\n2023-07-11 04:40:02.396 [ INFO] Progress -   2.9 MB (20.0%)\n2023-07-11 04:40:02.396 [ INFO] Progress -   2.9 MB (22.2%)\n2023-07-11 04:40:02.397 [ INFO] Progress -   2.9 MB (24.5%)\n2023-07-11 04:40:02.397 [ INFO] Progress -   2.9 MB (26.7%)\n2023-07-11 04:40:02.570 [ INFO] Progress -   2.9 MB (28.9%)\n2023-07-11 04:40:02.571 [ INFO] Progress -   2.9 MB (31.1%)\n2023-07-11 04:40:02.571 [ INFO] Progress -   2.9 MB (33.4%)\n2023-07-11 04:40:02.571 [ INFO] Progress -   2.9 MB (35.6%)\n2023-07-11 04:40:02.572 [ INFO] Progress -   2.9 MB (37.8%)\n2023-07-11 04:40:02.573 [ INFO] Progress -   2.9 MB (40.0%)\n2023-07-11 04:40:02.573 [ INFO] Progress -   2.9 MB (42.3%)\n2023-07-11 04:40:02.573 [ INFO] Progress -   2.9 MB (44.5%)\n2023-07-11 04:40:02.573 [ INFO] Progress -   2.9 MB (46.7%)\n2023-07-11 04:40:02.573 [ INFO] Progress -   2.9 MB (48.9%)\n2023-07-11 04:40:02.574 [ INFO] Progress -   2.9 MB (51.2%)\n2023-07-11 04:40:02.574 [ INFO] Progress -   2.9 MB (53.4%)\n2023-07-11 04:40:02.745 [ INFO] Progress -   2.9 MB (55.6%)\n2023-07-11 04:40:02.746 [ INFO] Progress -   2.9 MB (57.8%)\n2023-07-11 04:40:02.746 [ INFO] Progress -   2.9 MB (60.1%)\n2023-07-11 04:40:02.747 [ INFO] Progress -   2.9 MB (62.3%)\n2023-07-11 04:40:02.747 [ INFO] Progress -   2.9 MB (64.5%)\n2023-07-11 04:40:02.747 [ INFO] Progress -   2.9 MB (66.7%)\n2023-07-11 04:40:02.747 [ INFO] Progress -   2.9 MB (69.0%)\n2023-07-11 04:40:02.748 [ INFO] Progress -   2.9 MB (71.2%)\n2023-07-11 04:40:02.748 [ INFO] Progress -   2.9 MB (73.4%)\n2023-07-11 04:40:02.749 [ INFO] Progress -   2.9 MB (75.6%)\n2023-07-11 04:40:02.749 [ INFO] Progress -   2.9 MB (77.9%)\n2023-07-11 04:40:02.749 [ INFO] Progress -   2.9 MB (80.1%)\n2023-07-11 04:40:02.749 [ INFO] Progress -   2.9 MB (82.3%)\n2023-07-11 04:40:02.750 [ INFO] Progress -   2.9 MB (84.5%)\n2023-07-11 04:40:02.750 [ INFO] Progress -   2.9 MB (86.8%)\n2023-07-11 04:40:02.750 [ INFO] Progress -   2.9 MB (89.0%)\n2023-07-11 04:40:02.750 [ INFO] Progress -   2.9 MB (91.2%)\n2023-07-11 04:40:02.751 [ INFO] Progress -   2.9 MB (93.4%)\n2023-07-11 04:40:02.751 [ INFO] Progress -   2.9 MB (95.7%)\n2023-07-11 04:40:02.751 [ INFO] Progress -   2.9 MB (97.9%)\n2023-07-11 04:40:02.752 [ INFO] Progress -   2.9 MB (100.0%)\n2023-07-11 04:40:02.752 [ INFO] Processing  time : 0:00:31.949474\n2023-07-11 04:40:02.752 [ INFO] Downloading time : 0:00:01.231045\n2023-07-11 04:40:02.752 [ INFO] Total time       : 0:00:33.180519\n2023-07-11 04:40:02.752 [ INFO] Download rate    : 1.5 MB/s\n2023-07-11 04:40:02.752 [ INFO] Save into        : motu/cmems_obs-sl_glo_phy-ssh_my_allsat-l4-duacs-0.25deg_P1D/200102.nc\n2023-07-11 04:40:02.784 [ INFO] Done\n2023-07-11 04:40:03.024 [ INFO] Asynchronous mode set\n2023-07-11 04:40:03.024 [ INFO] Authenticating user mphan for service https://my.cmems-du.eu/motu-web/Motu\n2023-07-11 04:40:12.056 [ INFO] Requesting file to download (this can take a while)...\n2023-07-11 04:40:18.657 [ INFO] Authenticating user mphan for service https://my.cmems-du.eu/motu-web/Motu\n2023-07-11 04:40:33.365 [ INFO] The product is ready for download\n2023-07-11 04:40:33.365 [ INFO] Downloading file (this can take a while)...\n2023-07-11 04:40:34.109 [ INFO] File type: application/x-netcdf\n2023-07-11 04:40:34.109 [ INFO] File size: 3.3 MB (3260684 B)\n2023-07-11 04:40:34.109 [ INFO] Downloading file /home/jovyan/shared/minh-notebooks/motu/cmems_obs-sl_glo_phy-ssh_my_allsat-l4-duacs-0.25deg_P1D/200103.nc\n2023-07-11 04:40:34.460 [ INFO] Progress -   3.3 MB (2.0%)\n2023-07-11 04:40:34.635 [ INFO] Progress -   3.3 MB (4.0%)\n2023-07-11 04:40:34.808 [ INFO] Progress -   3.3 MB (6.0%)\n2023-07-11 04:40:34.810 [ INFO] Progress -   3.3 MB (8.0%)\n2023-07-11 04:40:34.983 [ INFO] Progress -   3.3 MB (10.0%)\n2023-07-11 04:40:34.984 [ INFO] Progress -   3.3 MB (12.1%)\n2023-07-11 04:40:34.984 [ INFO] Progress -   3.3 MB (14.1%)\n2023-07-11 04:40:34.985 [ INFO] Progress -   3.3 MB (16.1%)\n2023-07-11 04:40:34.985 [ INFO] Progress -   3.3 MB (18.1%)\n2023-07-11 04:40:34.986 [ INFO] Progress -   3.3 MB (20.1%)\n2023-07-11 04:40:35.159 [ INFO] Progress -   3.3 MB (22.1%)\n2023-07-11 04:40:35.159 [ INFO] Progress -   3.3 MB (24.1%)\n2023-07-11 04:40:35.159 [ INFO] Progress -   3.3 MB (26.1%)\n2023-07-11 04:40:35.160 [ INFO] Progress -   3.3 MB (28.1%)\n2023-07-11 04:40:35.160 [ INFO] Progress -   3.3 MB (30.1%)\n2023-07-11 04:40:35.160 [ INFO] Progress -   3.3 MB (32.2%)\n2023-07-11 04:40:35.161 [ INFO] Progress -   3.3 MB (34.2%)\n2023-07-11 04:40:35.161 [ INFO] Progress -   3.3 MB (36.2%)\n2023-07-11 04:40:35.162 [ INFO] Progress -   3.3 MB (38.2%)\n2023-07-11 04:40:35.162 [ INFO] Progress -   3.3 MB (40.2%)\n2023-07-11 04:40:35.162 [ INFO] Progress -   3.3 MB (42.2%)\n2023-07-11 04:40:35.334 [ INFO] Progress -   3.3 MB (44.2%)\n2023-07-11 04:40:35.334 [ INFO] Progress -   3.3 MB (46.2%)\n2023-07-11 04:40:35.334 [ INFO] Progress -   3.3 MB (48.2%)\n2023-07-11 04:40:35.335 [ INFO] Progress -   3.3 MB (50.2%)\n2023-07-11 04:40:35.335 [ INFO] Progress -   3.3 MB (52.3%)\n2023-07-11 04:40:35.335 [ INFO] Progress -   3.3 MB (54.3%)\n2023-07-11 04:40:35.335 [ INFO] Progress -   3.3 MB (56.3%)\n2023-07-11 04:40:35.336 [ INFO] Progress -   3.3 MB (58.3%)\n2023-07-11 04:40:35.336 [ INFO] Progress -   3.3 MB (60.3%)\n2023-07-11 04:40:35.336 [ INFO] Progress -   3.3 MB (62.3%)\n2023-07-11 04:40:35.337 [ INFO] Progress -   3.3 MB (64.3%)\n2023-07-11 04:40:35.337 [ INFO] Progress -   3.3 MB (66.3%)\n2023-07-11 04:40:35.338 [ INFO] Progress -   3.3 MB (68.3%)\n2023-07-11 04:40:35.338 [ INFO] Progress -   3.3 MB (70.3%)\n2023-07-11 04:40:35.338 [ INFO] Progress -   3.3 MB (72.4%)\n2023-07-11 04:40:35.338 [ INFO] Progress -   3.3 MB (74.4%)\n2023-07-11 04:40:35.339 [ INFO] Progress -   3.3 MB (76.4%)\n2023-07-11 04:40:35.339 [ INFO] Progress -   3.3 MB (78.4%)\n2023-07-11 04:40:35.339 [ INFO] Progress -   3.3 MB (80.4%)\n2023-07-11 04:40:35.339 [ INFO] Progress -   3.3 MB (82.4%)\n2023-07-11 04:40:35.340 [ INFO] Progress -   3.3 MB (84.4%)\n2023-07-11 04:40:35.340 [ INFO] Progress -   3.3 MB (86.4%)\n2023-07-11 04:40:35.509 [ INFO] Progress -   3.3 MB (88.4%)\n2023-07-11 04:40:35.509 [ INFO] Progress -   3.3 MB (90.4%)\n2023-07-11 04:40:35.509 [ INFO] Progress -   3.3 MB (92.5%)\n2023-07-11 04:40:35.510 [ INFO] Progress -   3.3 MB (94.5%)\n2023-07-11 04:40:35.510 [ INFO] Progress -   3.3 MB (96.5%)\n2023-07-11 04:40:35.511 [ INFO] Progress -   3.3 MB (98.5%)\n2023-07-11 04:40:35.511 [ INFO] Progress -   3.3 MB (100.0%)\n2023-07-11 04:40:35.511 [ INFO] Processing  time : 0:00:31.085699\n2023-07-11 04:40:35.511 [ INFO] Downloading time : 0:00:01.401936\n2023-07-11 04:40:35.511 [ INFO] Total time       : 0:00:32.487635\n2023-07-11 04:40:35.511 [ INFO] Download rate    : 1.5 MB/s\n2023-07-11 04:40:35.511 [ INFO] Save into        : motu/cmems_obs-sl_glo_phy-ssh_my_allsat-l4-duacs-0.25deg_P1D/200103.nc\n2023-07-11 04:40:35.541 [ INFO] Done\n2023-07-11 04:40:35.783 [ INFO] Asynchronous mode set\n2023-07-11 04:40:35.783 [ INFO] Authenticating user mphan for service https://my.cmems-du.eu/motu-web/Motu\n2023-07-11 04:40:42.416 [ INFO] Requesting file to download (this can take a while)...\n2023-07-11 04:40:51.415 [ INFO] Authenticating user mphan for service https://my.cmems-du.eu/motu-web/Motu\n2023-07-11 04:41:07.906 [ INFO] The product is ready for download\n2023-07-11 04:41:07.906 [ INFO] Downloading file (this can take a while)...\n2023-07-11 04:41:08.658 [ INFO] File type: application/x-netcdf\n2023-07-11 04:41:08.658 [ INFO] File size: 3.2 MB (3155704 B)\n2023-07-11 04:41:08.658 [ INFO] Downloading file /home/jovyan/shared/minh-notebooks/motu/cmems_obs-sl_glo_phy-ssh_my_allsat-l4-duacs-0.25deg_P1D/200104.nc\n2023-07-11 04:41:09.007 [ INFO] Progress -   3.2 MB (2.1%)\n2023-07-11 04:41:09.182 [ INFO] Progress -   3.2 MB (4.2%)\n2023-07-11 04:41:09.183 [ INFO] Progress -   3.2 MB (6.2%)\n2023-07-11 04:41:09.357 [ INFO] Progress -   3.2 MB (8.3%)\n2023-07-11 04:41:09.358 [ INFO] Progress -   3.2 MB (10.4%)\n2023-07-11 04:41:09.358 [ INFO] Progress -   3.2 MB (12.5%)\n2023-07-11 04:41:09.532 [ INFO] Progress -   3.2 MB (14.5%)\n2023-07-11 04:41:09.532 [ INFO] Progress -   3.2 MB (16.6%)\n2023-07-11 04:41:09.533 [ INFO] Progress -   3.2 MB (18.7%)\n2023-07-11 04:41:09.533 [ INFO] Progress -   3.2 MB (20.8%)\n2023-07-11 04:41:09.533 [ INFO] Progress -   3.2 MB (22.8%)\n2023-07-11 04:41:09.534 [ INFO] Progress -   3.2 MB (24.9%)\n2023-07-11 04:41:09.534 [ INFO] Progress -   3.2 MB (27.0%)\n2023-07-11 04:41:09.707 [ INFO] Progress -   3.2 MB (29.1%)\n2023-07-11 04:41:09.708 [ INFO] Progress -   3.2 MB (31.2%)\n2023-07-11 04:41:09.708 [ INFO] Progress -   3.2 MB (33.2%)\n2023-07-11 04:41:09.709 [ INFO] Progress -   3.2 MB (35.3%)\n2023-07-11 04:41:09.709 [ INFO] Progress -   3.2 MB (37.4%)\n2023-07-11 04:41:09.710 [ INFO] Progress -   3.2 MB (39.5%)\n2023-07-11 04:41:09.710 [ INFO] Progress -   3.2 MB (41.5%)\n2023-07-11 04:41:09.710 [ INFO] Progress -   3.2 MB (43.6%)\n2023-07-11 04:41:09.710 [ INFO] Progress -   3.2 MB (45.7%)\n2023-07-11 04:41:09.710 [ INFO] Progress -   3.2 MB (47.8%)\n2023-07-11 04:41:09.711 [ INFO] Progress -   3.2 MB (49.8%)\n2023-07-11 04:41:09.711 [ INFO] Progress -   3.2 MB (51.9%)\n2023-07-11 04:41:09.711 [ INFO] Progress -   3.2 MB (54.0%)\n2023-07-11 04:41:09.711 [ INFO] Progress -   3.2 MB (56.1%)\n2023-07-11 04:41:09.882 [ INFO] Progress -   3.2 MB (58.1%)\n2023-07-11 04:41:09.883 [ INFO] Progress -   3.2 MB (60.2%)\n2023-07-11 04:41:09.883 [ INFO] Progress -   3.2 MB (62.3%)\n2023-07-11 04:41:09.883 [ INFO] Progress -   3.2 MB (64.4%)\n2023-07-11 04:41:09.884 [ INFO] Progress -   3.2 MB (66.5%)\n2023-07-11 04:41:09.884 [ INFO] Progress -   3.2 MB (68.5%)\n2023-07-11 04:41:09.885 [ INFO] Progress -   3.2 MB (70.6%)\n2023-07-11 04:41:09.885 [ INFO] Progress -   3.2 MB (72.7%)\n2023-07-11 04:41:09.885 [ INFO] Progress -   3.2 MB (74.8%)\n2023-07-11 04:41:09.885 [ INFO] Progress -   3.2 MB (76.8%)\n2023-07-11 04:41:09.886 [ INFO] Progress -   3.2 MB (78.9%)\n2023-07-11 04:41:09.886 [ INFO] Progress -   3.2 MB (81.0%)\n2023-07-11 04:41:09.886 [ INFO] Progress -   3.2 MB (83.1%)\n2023-07-11 04:41:09.886 [ INFO] Progress -   3.2 MB (85.1%)\n2023-07-11 04:41:09.887 [ INFO] Progress -   3.2 MB (87.2%)\n2023-07-11 04:41:09.887 [ INFO] Progress -   3.2 MB (89.3%)\n2023-07-11 04:41:09.887 [ INFO] Progress -   3.2 MB (91.4%)\n2023-07-11 04:41:09.887 [ INFO] Progress -   3.2 MB (93.5%)\n2023-07-11 04:41:09.888 [ INFO] Progress -   3.2 MB (95.5%)\n2023-07-11 04:41:09.888 [ INFO] Progress -   3.2 MB (97.6%)\n2023-07-11 04:41:09.888 [ INFO] Progress -   3.2 MB (99.7%)\n2023-07-11 04:41:09.889 [ INFO] Progress -   3.2 MB (100.0%)\n2023-07-11 04:41:09.889 [ INFO] Processing  time : 0:00:32.877246\n2023-07-11 04:41:09.889 [ INFO] Downloading time : 0:00:01.230603\n2023-07-11 04:41:09.889 [ INFO] Total time       : 0:00:34.107849\n2023-07-11 04:41:09.889 [ INFO] Download rate    : 1.6 MB/s\n2023-07-11 04:41:09.889 [ INFO] Save into        : motu/cmems_obs-sl_glo_phy-ssh_my_allsat-l4-duacs-0.25deg_P1D/200104.nc\n2023-07-11 04:41:09.919 [ INFO] Done\n2023-07-11 04:41:10.168 [ INFO] Asynchronous mode set\n2023-07-11 04:41:10.169 [ INFO] Authenticating user mphan for service https://my.cmems-du.eu/motu-web/Motu\n2023-07-11 04:41:17.159 [ INFO] Requesting file to download (this can take a while)...\n2023-07-11 04:41:23.689 [ INFO] Authenticating user mphan for service https://my.cmems-du.eu/motu-web/Motu\n2023-07-11 04:41:40.330 [ INFO] The product is ready for download\n2023-07-11 04:41:40.330 [ INFO] Downloading file (this can take a while)...\n2023-07-11 04:41:41.240 [ INFO] File type: application/x-netcdf\n2023-07-11 04:41:41.240 [ INFO] File size: 3.3 MB (3260684 B)\n2023-07-11 04:41:41.240 [ INFO] Downloading file /home/jovyan/shared/minh-notebooks/motu/cmems_obs-sl_glo_phy-ssh_my_allsat-l4-duacs-0.25deg_P1D/200105.nc\n2023-07-11 04:41:41.413 [ INFO] Progress -   3.3 MB (2.0%)\n2023-07-11 04:41:41.586 [ INFO] Progress -   3.3 MB (4.0%)\n2023-07-11 04:41:41.756 [ INFO] Progress -   3.3 MB (6.0%)\n2023-07-11 04:41:41.758 [ INFO] Progress -   3.3 MB (8.0%)\n2023-07-11 04:41:41.758 [ INFO] Progress -   3.3 MB (10.0%)\n2023-07-11 04:41:41.929 [ INFO] Progress -   3.3 MB (12.1%)\n2023-07-11 04:41:41.929 [ INFO] Progress -   3.3 MB (14.1%)\n2023-07-11 04:41:41.931 [ INFO] Progress -   3.3 MB (16.1%)\n2023-07-11 04:41:41.931 [ INFO] Progress -   3.3 MB (18.1%)\n2023-07-11 04:41:41.931 [ INFO] Progress -   3.3 MB (20.1%)\n2023-07-11 04:41:41.931 [ INFO] Progress -   3.3 MB (22.1%)\n2023-07-11 04:41:41.932 [ INFO] Progress -   3.3 MB (24.1%)\n2023-07-11 04:41:42.101 [ INFO] Progress -   3.3 MB (26.1%)\n2023-07-11 04:41:42.102 [ INFO] Progress -   3.3 MB (28.1%)\n2023-07-11 04:41:42.103 [ INFO] Progress -   3.3 MB (30.1%)\n2023-07-11 04:41:42.103 [ INFO] Progress -   3.3 MB (32.2%)\n2023-07-11 04:41:42.104 [ INFO] Progress -   3.3 MB (34.2%)\n2023-07-11 04:41:42.104 [ INFO] Progress -   3.3 MB (36.2%)\n2023-07-11 04:41:42.105 [ INFO] Progress -   3.3 MB (38.2%)\n2023-07-11 04:41:42.105 [ INFO] Progress -   3.3 MB (40.2%)\n2023-07-11 04:41:42.105 [ INFO] Progress -   3.3 MB (42.2%)\n2023-07-11 04:41:42.105 [ INFO] Progress -   3.3 MB (44.2%)\n2023-07-11 04:41:42.106 [ INFO] Progress -   3.3 MB (46.2%)\n2023-07-11 04:41:42.106 [ INFO] Progress -   3.3 MB (48.2%)\n2023-07-11 04:41:42.274 [ INFO] Progress -   3.3 MB (50.2%)\n2023-07-11 04:41:42.274 [ INFO] Progress -   3.3 MB (52.3%)\n2023-07-11 04:41:42.274 [ INFO] Progress -   3.3 MB (54.3%)\n2023-07-11 04:41:42.275 [ INFO] Progress -   3.3 MB (56.3%)\n2023-07-11 04:41:42.275 [ INFO] Progress -   3.3 MB (58.3%)\n2023-07-11 04:41:42.275 [ INFO] Progress -   3.3 MB (60.3%)\n2023-07-11 04:41:42.276 [ INFO] Progress -   3.3 MB (62.3%)\n2023-07-11 04:41:42.277 [ INFO] Progress -   3.3 MB (64.3%)\n2023-07-11 04:41:42.277 [ INFO] Progress -   3.3 MB (66.3%)\n2023-07-11 04:41:42.278 [ INFO] Progress -   3.3 MB (68.3%)\n2023-07-11 04:41:42.278 [ INFO] Progress -   3.3 MB (70.3%)\n2023-07-11 04:41:42.278 [ INFO] Progress -   3.3 MB (72.4%)\n2023-07-11 04:41:42.278 [ INFO] Progress -   3.3 MB (74.4%)\n2023-07-11 04:41:42.279 [ INFO] Progress -   3.3 MB (76.4%)\n2023-07-11 04:41:42.279 [ INFO] Progress -   3.3 MB (78.4%)\n2023-07-11 04:41:42.279 [ INFO] Progress -   3.3 MB (80.4%)\n2023-07-11 04:41:42.279 [ INFO] Progress -   3.3 MB (82.4%)\n2023-07-11 04:41:42.279 [ INFO] Progress -   3.3 MB (84.4%)\n2023-07-11 04:41:42.280 [ INFO] Progress -   3.3 MB (86.4%)\n2023-07-11 04:41:42.280 [ INFO] Progress -   3.3 MB (88.4%)\n2023-07-11 04:41:42.280 [ INFO] Progress -   3.3 MB (90.4%)\n2023-07-11 04:41:42.280 [ INFO] Progress -   3.3 MB (92.5%)\n2023-07-11 04:41:42.281 [ INFO] Progress -   3.3 MB (94.5%)\n2023-07-11 04:41:42.281 [ INFO] Progress -   3.3 MB (96.5%)\n2023-07-11 04:41:42.282 [ INFO] Progress -   3.3 MB (98.5%)\n2023-07-11 04:41:42.282 [ INFO] Progress -   3.3 MB (100.0%)\n2023-07-11 04:41:42.282 [ INFO] Processing  time : 0:00:31.073788\n2023-07-11 04:41:42.282 [ INFO] Downloading time : 0:00:01.041936\n2023-07-11 04:41:42.282 [ INFO] Total time       : 0:00:32.115724\n2023-07-11 04:41:42.282 [ INFO] Download rate    : 1.7 MB/s\n2023-07-11 04:41:42.282 [ INFO] Save into        : motu/cmems_obs-sl_glo_phy-ssh_my_allsat-l4-duacs-0.25deg_P1D/200105.nc\n2023-07-11 04:41:42.313 [ INFO] Done\n2023-07-11 04:41:42.557 [ INFO] Asynchronous mode set\n2023-07-11 04:41:42.557 [ INFO] Authenticating user mphan for service https://my.cmems-du.eu/motu-web/Motu\n2023-07-11 04:41:51.498 [ INFO] Requesting file to download (this can take a while)...\n2023-07-11 04:41:58.720 [ INFO] Authenticating user mphan for service https://my.cmems-du.eu/motu-web/Motu\n2023-07-11 04:42:13.967 [ INFO] The product is ready for download\n2023-07-11 04:42:13.967 [ INFO] Downloading file (this can take a while)...\n2023-07-11 04:42:14.703 [ INFO] File type: application/x-netcdf\n2023-07-11 04:42:14.703 [ INFO] File size: 3.2 MB (3155704 B)\n2023-07-11 04:42:14.704 [ INFO] Downloading file /home/jovyan/shared/minh-notebooks/motu/cmems_obs-sl_glo_phy-ssh_my_allsat-l4-duacs-0.25deg_P1D/200106.nc\n2023-07-11 04:42:15.048 [ INFO] Progress -   3.2 MB (2.1%)\n2023-07-11 04:42:15.220 [ INFO] Progress -   3.2 MB (4.2%)\n2023-07-11 04:42:15.221 [ INFO] Progress -   3.2 MB (6.2%)\n2023-07-11 04:42:15.392 [ INFO] Progress -   3.2 MB (8.3%)\n2023-07-11 04:42:15.393 [ INFO] Progress -   3.2 MB (10.4%)\n2023-07-11 04:42:15.394 [ INFO] Progress -   3.2 MB (12.5%)\n2023-07-11 04:42:15.564 [ INFO] Progress -   3.2 MB (14.5%)\n2023-07-11 04:42:15.565 [ INFO] Progress -   3.2 MB (16.6%)\n2023-07-11 04:42:15.565 [ INFO] Progress -   3.2 MB (18.7%)\n2023-07-11 04:42:15.565 [ INFO] Progress -   3.2 MB (20.8%)\n2023-07-11 04:42:15.566 [ INFO] Progress -   3.2 MB (22.8%)\n2023-07-11 04:42:15.566 [ INFO] Progress -   3.2 MB (24.9%)\n2023-07-11 04:42:15.566 [ INFO] Progress -   3.2 MB (27.0%)\n2023-07-11 04:42:15.736 [ INFO] Progress -   3.2 MB (29.1%)\n2023-07-11 04:42:15.737 [ INFO] Progress -   3.2 MB (31.2%)\n2023-07-11 04:42:15.737 [ INFO] Progress -   3.2 MB (33.2%)\n2023-07-11 04:42:15.739 [ INFO] Progress -   3.2 MB (35.3%)\n2023-07-11 04:42:15.739 [ INFO] Progress -   3.2 MB (37.4%)\n2023-07-11 04:42:15.739 [ INFO] Progress -   3.2 MB (39.5%)\n2023-07-11 04:42:15.739 [ INFO] Progress -   3.2 MB (41.5%)\n2023-07-11 04:42:15.740 [ INFO] Progress -   3.2 MB (43.6%)\n2023-07-11 04:42:15.740 [ INFO] Progress -   3.2 MB (45.7%)\n2023-07-11 04:42:15.740 [ INFO] Progress -   3.2 MB (47.8%)\n2023-07-11 04:42:15.740 [ INFO] Progress -   3.2 MB (49.8%)\n2023-07-11 04:42:15.741 [ INFO] Progress -   3.2 MB (51.9%)\n2023-07-11 04:42:15.741 [ INFO] Progress -   3.2 MB (54.0%)\n2023-07-11 04:42:15.741 [ INFO] Progress -   3.2 MB (56.1%)\n2023-07-11 04:42:15.909 [ INFO] Progress -   3.2 MB (58.1%)\n2023-07-11 04:42:15.909 [ INFO] Progress -   3.2 MB (60.2%)\n2023-07-11 04:42:15.910 [ INFO] Progress -   3.2 MB (62.3%)\n2023-07-11 04:42:15.910 [ INFO] Progress -   3.2 MB (64.4%)\n2023-07-11 04:42:15.910 [ INFO] Progress -   3.2 MB (66.5%)\n2023-07-11 04:42:15.911 [ INFO] Progress -   3.2 MB (68.5%)\n2023-07-11 04:42:15.911 [ INFO] Progress -   3.2 MB (70.6%)\n2023-07-11 04:42:15.911 [ INFO] Progress -   3.2 MB (72.7%)\n2023-07-11 04:42:15.912 [ INFO] Progress -   3.2 MB (74.8%)\n2023-07-11 04:42:15.912 [ INFO] Progress -   3.2 MB (76.8%)\n2023-07-11 04:42:15.912 [ INFO] Progress -   3.2 MB (78.9%)\n2023-07-11 04:42:15.912 [ INFO] Progress -   3.2 MB (81.0%)\n2023-07-11 04:42:15.913 [ INFO] Progress -   3.2 MB (83.1%)\n2023-07-11 04:42:15.913 [ INFO] Progress -   3.2 MB (85.1%)\n2023-07-11 04:42:15.913 [ INFO] Progress -   3.2 MB (87.2%)\n2023-07-11 04:42:15.913 [ INFO] Progress -   3.2 MB (89.3%)\n2023-07-11 04:42:15.914 [ INFO] Progress -   3.2 MB (91.4%)\n2023-07-11 04:42:15.914 [ INFO] Progress -   3.2 MB (93.5%)\n2023-07-11 04:42:15.914 [ INFO] Progress -   3.2 MB (95.5%)\n2023-07-11 04:42:15.914 [ INFO] Progress -   3.2 MB (97.6%)\n2023-07-11 04:42:15.914 [ INFO] Progress -   3.2 MB (99.7%)\n2023-07-11 04:42:15.915 [ INFO] Progress -   3.2 MB (100.0%)\n2023-07-11 04:42:15.915 [ INFO] Processing  time : 0:00:32.148979\n2023-07-11 04:42:15.915 [ INFO] Downloading time : 0:00:01.211730\n2023-07-11 04:42:15.915 [ INFO] Total time       : 0:00:33.360709\n2023-07-11 04:42:15.915 [ INFO] Download rate    : 1.6 MB/s\n2023-07-11 04:42:15.915 [ INFO] Save into        : motu/cmems_obs-sl_glo_phy-ssh_my_allsat-l4-duacs-0.25deg_P1D/200106.nc\n2023-07-11 04:42:15.945 [ INFO] Done\n2023-07-11 04:42:16.186 [ INFO] Asynchronous mode set\n2023-07-11 04:42:16.186 [ INFO] Authenticating user mphan for service https://my.cmems-du.eu/motu-web/Motu\n2023-07-11 04:42:22.965 [ INFO] Requesting file to download (this can take a while)...\n2023-07-11 04:42:29.614 [ INFO] Authenticating user mphan for service https://my.cmems-du.eu/motu-web/Motu\n2023-07-11 04:42:44.253 [ INFO] The product is ready for download\n2023-07-11 04:42:44.254 [ INFO] Downloading file (this can take a while)...\n2023-07-11 04:42:45.157 [ INFO] File type: application/x-netcdf\n2023-07-11 04:42:45.157 [ INFO] File size: 3.3 MB (3260684 B)\n2023-07-11 04:42:45.157 [ INFO] Downloading file /home/jovyan/shared/minh-notebooks/motu/cmems_obs-sl_glo_phy-ssh_my_allsat-l4-duacs-0.25deg_P1D/200107.nc\n2023-07-11 04:42:45.330 [ INFO] Progress -   3.3 MB (2.0%)\n2023-07-11 04:42:45.503 [ INFO] Progress -   3.3 MB (4.0%)\n2023-07-11 04:42:45.673 [ INFO] Progress -   3.3 MB (6.0%)\n2023-07-11 04:42:45.675 [ INFO] Progress -   3.3 MB (8.0%)\n2023-07-11 04:42:45.675 [ INFO] Progress -   3.3 MB (10.0%)\n2023-07-11 04:42:45.846 [ INFO] Progress -   3.3 MB (12.1%)\n2023-07-11 04:42:45.846 [ INFO] Progress -   3.3 MB (14.1%)\n2023-07-11 04:42:45.848 [ INFO] Progress -   3.3 MB (16.1%)\n2023-07-11 04:42:45.848 [ INFO] Progress -   3.3 MB (18.1%)\n2023-07-11 04:42:45.848 [ INFO] Progress -   3.3 MB (20.1%)\n2023-07-11 04:42:45.848 [ INFO] Progress -   3.3 MB (22.1%)\n2023-07-11 04:42:45.849 [ INFO] Progress -   3.3 MB (24.1%)\n2023-07-11 04:42:46.018 [ INFO] Progress -   3.3 MB (26.1%)\n2023-07-11 04:42:46.019 [ INFO] Progress -   3.3 MB (28.1%)\n2023-07-11 04:42:46.020 [ INFO] Progress -   3.3 MB (30.1%)\n2023-07-11 04:42:46.020 [ INFO] Progress -   3.3 MB (32.2%)\n2023-07-11 04:42:46.021 [ INFO] Progress -   3.3 MB (34.2%)\n2023-07-11 04:42:46.021 [ INFO] Progress -   3.3 MB (36.2%)\n2023-07-11 04:42:46.022 [ INFO] Progress -   3.3 MB (38.2%)\n2023-07-11 04:42:46.022 [ INFO] Progress -   3.3 MB (40.2%)\n2023-07-11 04:42:46.022 [ INFO] Progress -   3.3 MB (42.2%)\n2023-07-11 04:42:46.022 [ INFO] Progress -   3.3 MB (44.2%)\n2023-07-11 04:42:46.023 [ INFO] Progress -   3.3 MB (46.2%)\n2023-07-11 04:42:46.023 [ INFO] Progress -   3.3 MB (48.2%)\n2023-07-11 04:42:46.190 [ INFO] Progress -   3.3 MB (50.2%)\n2023-07-11 04:42:46.191 [ INFO] Progress -   3.3 MB (52.3%)\n2023-07-11 04:42:46.191 [ INFO] Progress -   3.3 MB (54.3%)\n2023-07-11 04:42:46.191 [ INFO] Progress -   3.3 MB (56.3%)\n2023-07-11 04:42:46.192 [ INFO] Progress -   3.3 MB (58.3%)\n2023-07-11 04:42:46.193 [ INFO] Progress -   3.3 MB (60.3%)\n2023-07-11 04:42:46.193 [ INFO] Progress -   3.3 MB (62.3%)\n2023-07-11 04:42:46.193 [ INFO] Progress -   3.3 MB (64.3%)\n2023-07-11 04:42:46.194 [ INFO] Progress -   3.3 MB (66.3%)\n2023-07-11 04:42:46.194 [ INFO] Progress -   3.3 MB (68.3%)\n2023-07-11 04:42:46.195 [ INFO] Progress -   3.3 MB (70.3%)\n2023-07-11 04:42:46.195 [ INFO] Progress -   3.3 MB (72.4%)\n2023-07-11 04:42:46.195 [ INFO] Progress -   3.3 MB (74.4%)\n2023-07-11 04:42:46.195 [ INFO] Progress -   3.3 MB (76.4%)\n2023-07-11 04:42:46.196 [ INFO] Progress -   3.3 MB (78.4%)\n2023-07-11 04:42:46.196 [ INFO] Progress -   3.3 MB (80.4%)\n2023-07-11 04:42:46.196 [ INFO] Progress -   3.3 MB (82.4%)\n2023-07-11 04:42:46.196 [ INFO] Progress -   3.3 MB (84.4%)\n2023-07-11 04:42:46.197 [ INFO] Progress -   3.3 MB (86.4%)\n2023-07-11 04:42:46.197 [ INFO] Progress -   3.3 MB (88.4%)\n2023-07-11 04:42:46.197 [ INFO] Progress -   3.3 MB (90.4%)\n2023-07-11 04:42:46.197 [ INFO] Progress -   3.3 MB (92.5%)\n2023-07-11 04:42:46.198 [ INFO] Progress -   3.3 MB (94.5%)\n2023-07-11 04:42:46.198 [ INFO] Progress -   3.3 MB (96.5%)\n2023-07-11 04:42:46.199 [ INFO] Progress -   3.3 MB (98.5%)\n2023-07-11 04:42:46.199 [ INFO] Progress -   3.3 MB (100.0%)\n2023-07-11 04:42:46.199 [ INFO] Processing  time : 0:00:28.973583\n2023-07-11 04:42:46.199 [ INFO] Downloading time : 0:00:01.042066\n2023-07-11 04:42:46.199 [ INFO] Total time       : 0:00:30.015649\n2023-07-11 04:42:46.199 [ INFO] Download rate    : 1.7 MB/s\n2023-07-11 04:42:46.199 [ INFO] Save into        : motu/cmems_obs-sl_glo_phy-ssh_my_allsat-l4-duacs-0.25deg_P1D/200107.nc\n2023-07-11 04:42:46.232 [ INFO] Done\n2023-07-11 04:42:46.476 [ INFO] Asynchronous mode set\n2023-07-11 04:42:46.476 [ INFO] Authenticating user mphan for service https://my.cmems-du.eu/motu-web/Motu\n2023-07-11 04:42:52.332 [ INFO] Requesting file to download (this can take a while)...\n2023-07-11 04:42:59.632 [ INFO] Authenticating user mphan for service https://my.cmems-du.eu/motu-web/Motu\n2023-07-11 04:43:13.124 [ INFO] The product is ready for download\n2023-07-11 04:43:13.124 [ INFO] Downloading file (this can take a while)...\n2023-07-11 04:43:13.856 [ INFO] File type: application/x-netcdf\n2023-07-11 04:43:13.857 [ INFO] File size: 3.3 MB (3260684 B)\n2023-07-11 04:43:13.857 [ INFO] Downloading file /home/jovyan/shared/minh-notebooks/motu/cmems_obs-sl_glo_phy-ssh_my_allsat-l4-duacs-0.25deg_P1D/200108.nc\n2023-07-11 04:43:14.200 [ INFO] Progress -   3.3 MB (2.0%)\n2023-07-11 04:43:14.373 [ INFO] Progress -   3.3 MB (4.0%)\n2023-07-11 04:43:14.545 [ INFO] Progress -   3.3 MB (6.0%)\n2023-07-11 04:43:14.546 [ INFO] Progress -   3.3 MB (8.0%)\n2023-07-11 04:43:14.718 [ INFO] Progress -   3.3 MB (10.0%)\n2023-07-11 04:43:14.719 [ INFO] Progress -   3.3 MB (12.1%)\n2023-07-11 04:43:14.719 [ INFO] Progress -   3.3 MB (14.1%)\n2023-07-11 04:43:14.719 [ INFO] Progress -   3.3 MB (16.1%)\n2023-07-11 04:43:14.720 [ INFO] Progress -   3.3 MB (18.1%)\n2023-07-11 04:43:14.890 [ INFO] Progress -   3.3 MB (20.1%)\n2023-07-11 04:43:14.891 [ INFO] Progress -   3.3 MB (22.1%)\n2023-07-11 04:43:14.891 [ INFO] Progress -   3.3 MB (24.1%)\n2023-07-11 04:43:14.892 [ INFO] Progress -   3.3 MB (26.1%)\n2023-07-11 04:43:14.893 [ INFO] Progress -   3.3 MB (28.1%)\n2023-07-11 04:43:14.893 [ INFO] Progress -   3.3 MB (30.1%)\n2023-07-11 04:43:14.893 [ INFO] Progress -   3.3 MB (32.2%)\n2023-07-11 04:43:14.895 [ INFO] Progress -   3.3 MB (34.2%)\n2023-07-11 04:43:14.895 [ INFO] Progress -   3.3 MB (36.2%)\n2023-07-11 04:43:15.062 [ INFO] Progress -   3.3 MB (38.2%)\n2023-07-11 04:43:15.063 [ INFO] Progress -   3.3 MB (40.2%)\n2023-07-11 04:43:15.064 [ INFO] Progress -   3.3 MB (42.2%)\n2023-07-11 04:43:15.064 [ INFO] Progress -   3.3 MB (44.2%)\n2023-07-11 04:43:15.064 [ INFO] Progress -   3.3 MB (46.2%)\n2023-07-11 04:43:15.064 [ INFO] Progress -   3.3 MB (48.2%)\n2023-07-11 04:43:15.065 [ INFO] Progress -   3.3 MB (50.2%)\n2023-07-11 04:43:15.065 [ INFO] Progress -   3.3 MB (52.3%)\n2023-07-11 04:43:15.066 [ INFO] Progress -   3.3 MB (54.3%)\n2023-07-11 04:43:15.066 [ INFO] Progress -   3.3 MB (56.3%)\n2023-07-11 04:43:15.067 [ INFO] Progress -   3.3 MB (58.3%)\n2023-07-11 04:43:15.067 [ INFO] Progress -   3.3 MB (60.3%)\n2023-07-11 04:43:15.067 [ INFO] Progress -   3.3 MB (62.3%)\n2023-07-11 04:43:15.068 [ INFO] Progress -   3.3 MB (64.3%)\n2023-07-11 04:43:15.068 [ INFO] Progress -   3.3 MB (66.3%)\n2023-07-11 04:43:15.069 [ INFO] Progress -   3.3 MB (68.3%)\n2023-07-11 04:43:15.069 [ INFO] Progress -   3.3 MB (70.3%)\n2023-07-11 04:43:15.069 [ INFO] Progress -   3.3 MB (72.4%)\n2023-07-11 04:43:15.069 [ INFO] Progress -   3.3 MB (74.4%)\n2023-07-11 04:43:15.070 [ INFO] Progress -   3.3 MB (76.4%)\n2023-07-11 04:43:15.235 [ INFO] Progress -   3.3 MB (78.4%)\n2023-07-11 04:43:15.236 [ INFO] Progress -   3.3 MB (80.4%)\n2023-07-11 04:43:15.236 [ INFO] Progress -   3.3 MB (82.4%)\n2023-07-11 04:43:15.236 [ INFO] Progress -   3.3 MB (84.4%)\n2023-07-11 04:43:15.236 [ INFO] Progress -   3.3 MB (86.4%)\n2023-07-11 04:43:15.237 [ INFO] Progress -   3.3 MB (88.4%)\n2023-07-11 04:43:15.237 [ INFO] Progress -   3.3 MB (90.4%)\n2023-07-11 04:43:15.237 [ INFO] Progress -   3.3 MB (92.5%)\n2023-07-11 04:43:15.237 [ INFO] Progress -   3.3 MB (94.5%)\n2023-07-11 04:43:15.238 [ INFO] Progress -   3.3 MB (96.5%)\n2023-07-11 04:43:15.239 [ INFO] Progress -   3.3 MB (98.5%)\n2023-07-11 04:43:15.239 [ INFO] Progress -   3.3 MB (100.0%)\n2023-07-11 04:43:15.239 [ INFO] Processing  time : 0:00:27.384750\n2023-07-11 04:43:15.239 [ INFO] Downloading time : 0:00:01.382641\n2023-07-11 04:43:15.239 [ INFO] Total time       : 0:00:28.767391\n2023-07-11 04:43:15.239 [ INFO] Download rate    : 1.5 MB/s\n2023-07-11 04:43:15.239 [ INFO] Save into        : motu/cmems_obs-sl_glo_phy-ssh_my_allsat-l4-duacs-0.25deg_P1D/200108.nc\n2023-07-11 04:43:15.269 [ INFO] Done\n2023-07-11 04:43:15.513 [ INFO] Asynchronous mode set\n2023-07-11 04:43:15.513 [ INFO] Authenticating user mphan for service https://my.cmems-du.eu/motu-web/Motu\n2023-07-11 04:43:22.274 [ INFO] Requesting file to download (this can take a while)...\n2023-07-11 04:43:29.643 [ INFO] Authenticating user mphan for service https://my.cmems-du.eu/motu-web/Motu\n2023-07-11 04:43:47.109 [ INFO] The product is ready for download\n2023-07-11 04:43:47.109 [ INFO] Downloading file (this can take a while)...\n2023-07-11 04:43:47.846 [ INFO] File type: application/x-netcdf\n2023-07-11 04:43:47.846 [ INFO] File size: 3.2 MB (3155704 B)\n2023-07-11 04:43:47.847 [ INFO] Downloading file /home/jovyan/shared/minh-notebooks/motu/cmems_obs-sl_glo_phy-ssh_my_allsat-l4-duacs-0.25deg_P1D/200109.nc\n2023-07-11 04:43:48.190 [ INFO] Progress -   3.2 MB (2.1%)\n2023-07-11 04:43:48.363 [ INFO] Progress -   3.2 MB (4.2%)\n2023-07-11 04:43:48.535 [ INFO] Progress -   3.2 MB (6.2%)\n2023-07-11 04:43:48.536 [ INFO] Progress -   3.2 MB (8.3%)\n2023-07-11 04:43:48.708 [ INFO] Progress -   3.2 MB (10.4%)\n2023-07-11 04:43:48.708 [ INFO] Progress -   3.2 MB (12.5%)\n2023-07-11 04:43:48.708 [ INFO] Progress -   3.2 MB (14.5%)\n2023-07-11 04:43:48.709 [ INFO] Progress -   3.2 MB (16.6%)\n2023-07-11 04:43:48.709 [ INFO] Progress -   3.2 MB (18.7%)\n2023-07-11 04:43:48.880 [ INFO] Progress -   3.2 MB (20.8%)\n2023-07-11 04:43:48.880 [ INFO] Progress -   3.2 MB (22.8%)\n2023-07-11 04:43:48.880 [ INFO] Progress -   3.2 MB (24.9%)\n2023-07-11 04:43:48.881 [ INFO] Progress -   3.2 MB (27.0%)\n2023-07-11 04:43:48.881 [ INFO] Progress -   3.2 MB (29.1%)\n2023-07-11 04:43:48.881 [ INFO] Progress -   3.2 MB (31.2%)\n2023-07-11 04:43:48.881 [ INFO] Progress -   3.2 MB (33.2%)\n2023-07-11 04:43:48.882 [ INFO] Progress -   3.2 MB (35.3%)\n2023-07-11 04:43:48.883 [ INFO] Progress -   3.2 MB (37.4%)\n2023-07-11 04:43:49.052 [ INFO] Progress -   3.2 MB (39.5%)\n2023-07-11 04:43:49.052 [ INFO] Progress -   3.2 MB (41.5%)\n2023-07-11 04:43:49.053 [ INFO] Progress -   3.2 MB (43.6%)\n2023-07-11 04:43:49.053 [ INFO] Progress -   3.2 MB (45.7%)\n2023-07-11 04:43:49.053 [ INFO] Progress -   3.2 MB (47.8%)\n2023-07-11 04:43:49.053 [ INFO] Progress -   3.2 MB (49.8%)\n2023-07-11 04:43:49.054 [ INFO] Progress -   3.2 MB (51.9%)\n2023-07-11 04:43:49.054 [ INFO] Progress -   3.2 MB (54.0%)\n2023-07-11 04:43:49.054 [ INFO] Progress -   3.2 MB (56.1%)\n2023-07-11 04:43:49.055 [ INFO] Progress -   3.2 MB (58.1%)\n2023-07-11 04:43:49.055 [ INFO] Progress -   3.2 MB (60.2%)\n2023-07-11 04:43:49.055 [ INFO] Progress -   3.2 MB (62.3%)\n2023-07-11 04:43:49.055 [ INFO] Progress -   3.2 MB (64.4%)\n2023-07-11 04:43:49.056 [ INFO] Progress -   3.2 MB (66.5%)\n2023-07-11 04:43:49.056 [ INFO] Progress -   3.2 MB (68.5%)\n2023-07-11 04:43:49.057 [ INFO] Progress -   3.2 MB (70.6%)\n2023-07-11 04:43:49.057 [ INFO] Progress -   3.2 MB (72.7%)\n2023-07-11 04:43:49.057 [ INFO] Progress -   3.2 MB (74.8%)\n2023-07-11 04:43:49.057 [ INFO] Progress -   3.2 MB (76.8%)\n2023-07-11 04:43:49.225 [ INFO] Progress -   3.2 MB (78.9%)\n2023-07-11 04:43:49.225 [ INFO] Progress -   3.2 MB (81.0%)\n2023-07-11 04:43:49.225 [ INFO] Progress -   3.2 MB (83.1%)\n2023-07-11 04:43:49.226 [ INFO] Progress -   3.2 MB (85.1%)\n2023-07-11 04:43:49.226 [ INFO] Progress -   3.2 MB (87.2%)\n2023-07-11 04:43:49.226 [ INFO] Progress -   3.2 MB (89.3%)\n2023-07-11 04:43:49.226 [ INFO] Progress -   3.2 MB (91.4%)\n2023-07-11 04:43:49.227 [ INFO] Progress -   3.2 MB (93.5%)\n2023-07-11 04:43:49.227 [ INFO] Progress -   3.2 MB (95.5%)\n2023-07-11 04:43:49.227 [ INFO] Progress -   3.2 MB (97.6%)\n2023-07-11 04:43:49.227 [ INFO] Progress -   3.2 MB (99.7%)\n2023-07-11 04:43:49.228 [ INFO] Progress -   3.2 MB (100.0%)\n2023-07-11 04:43:49.228 [ INFO] Processing  time : 0:00:32.336252\n2023-07-11 04:43:49.228 [ INFO] Downloading time : 0:00:01.381585\n2023-07-11 04:43:49.228 [ INFO] Total time       : 0:00:33.717837\n2023-07-11 04:43:49.228 [ INFO] Download rate    : 1.5 MB/s\n2023-07-11 04:43:49.228 [ INFO] Save into        : motu/cmems_obs-sl_glo_phy-ssh_my_allsat-l4-duacs-0.25deg_P1D/200109.nc\n2023-07-11 04:43:49.283 [ INFO] Done\n2023-07-11 04:43:49.521 [ INFO] Asynchronous mode set\n2023-07-11 04:43:49.521 [ INFO] Authenticating user mphan for service https://my.cmems-du.eu/motu-web/Motu\n2023-07-11 04:43:58.915 [ INFO] Requesting file to download (this can take a while)...\n2023-07-11 04:44:08.361 [ INFO] Authenticating user mphan for service https://my.cmems-du.eu/motu-web/Motu\n2023-07-11 04:44:23.488 [ INFO] The product is ready for download\n2023-07-11 04:44:23.488 [ INFO] Downloading file (this can take a while)...\n2023-07-11 04:44:24.223 [ INFO] File type: application/x-netcdf\n2023-07-11 04:44:24.223 [ INFO] File size: 3.3 MB (3260684 B)\n2023-07-11 04:44:24.223 [ INFO] Downloading file /home/jovyan/shared/minh-notebooks/motu/cmems_obs-sl_glo_phy-ssh_my_allsat-l4-duacs-0.25deg_P1D/200110.nc\n2023-07-11 04:44:24.568 [ INFO] Progress -   3.3 MB (2.0%)\n2023-07-11 04:44:24.740 [ INFO] Progress -   3.3 MB (4.0%)\n2023-07-11 04:44:24.741 [ INFO] Progress -   3.3 MB (6.0%)\n2023-07-11 04:44:24.913 [ INFO] Progress -   3.3 MB (8.0%)\n2023-07-11 04:44:24.913 [ INFO] Progress -   3.3 MB (10.0%)\n2023-07-11 04:44:24.914 [ INFO] Progress -   3.3 MB (12.1%)\n2023-07-11 04:44:25.084 [ INFO] Progress -   3.3 MB (14.1%)\n2023-07-11 04:44:25.085 [ INFO] Progress -   3.3 MB (16.1%)\n2023-07-11 04:44:25.086 [ INFO] Progress -   3.3 MB (18.1%)\n2023-07-11 04:44:25.086 [ INFO] Progress -   3.3 MB (20.1%)\n2023-07-11 04:44:25.086 [ INFO] Progress -   3.3 MB (22.1%)\n2023-07-11 04:44:25.087 [ INFO] Progress -   3.3 MB (24.1%)\n2023-07-11 04:44:25.087 [ INFO] Progress -   3.3 MB (26.1%)\n2023-07-11 04:44:25.257 [ INFO] Progress -   3.3 MB (28.1%)\n2023-07-11 04:44:25.257 [ INFO] Progress -   3.3 MB (30.1%)\n2023-07-11 04:44:25.258 [ INFO] Progress -   3.3 MB (32.2%)\n2023-07-11 04:44:25.259 [ INFO] Progress -   3.3 MB (34.2%)\n2023-07-11 04:44:25.259 [ INFO] Progress -   3.3 MB (36.2%)\n2023-07-11 04:44:25.260 [ INFO] Progress -   3.3 MB (38.2%)\n2023-07-11 04:44:25.260 [ INFO] Progress -   3.3 MB (40.2%)\n2023-07-11 04:44:25.260 [ INFO] Progress -   3.3 MB (42.2%)\n2023-07-11 04:44:25.260 [ INFO] Progress -   3.3 MB (44.2%)\n2023-07-11 04:44:25.261 [ INFO] Progress -   3.3 MB (46.2%)\n2023-07-11 04:44:25.261 [ INFO] Progress -   3.3 MB (48.2%)\n2023-07-11 04:44:25.261 [ INFO] Progress -   3.3 MB (50.2%)\n2023-07-11 04:44:25.261 [ INFO] Progress -   3.3 MB (52.3%)\n2023-07-11 04:44:25.429 [ INFO] Progress -   3.3 MB (54.3%)\n2023-07-11 04:44:25.429 [ INFO] Progress -   3.3 MB (56.3%)\n2023-07-11 04:44:25.430 [ INFO] Progress -   3.3 MB (58.3%)\n2023-07-11 04:44:25.430 [ INFO] Progress -   3.3 MB (60.3%)\n2023-07-11 04:44:25.430 [ INFO] Progress -   3.3 MB (62.3%)\n2023-07-11 04:44:25.431 [ INFO] Progress -   3.3 MB (64.3%)\n2023-07-11 04:44:25.432 [ INFO] Progress -   3.3 MB (66.3%)\n2023-07-11 04:44:25.432 [ INFO] Progress -   3.3 MB (68.3%)\n2023-07-11 04:44:25.432 [ INFO] Progress -   3.3 MB (70.3%)\n2023-07-11 04:44:25.432 [ INFO] Progress -   3.3 MB (72.4%)\n2023-07-11 04:44:25.433 [ INFO] Progress -   3.3 MB (74.4%)\n2023-07-11 04:44:25.433 [ INFO] Progress -   3.3 MB (76.4%)\n2023-07-11 04:44:25.433 [ INFO] Progress -   3.3 MB (78.4%)\n2023-07-11 04:44:25.433 [ INFO] Progress -   3.3 MB (80.4%)\n2023-07-11 04:44:25.434 [ INFO] Progress -   3.3 MB (82.4%)\n2023-07-11 04:44:25.434 [ INFO] Progress -   3.3 MB (84.4%)\n2023-07-11 04:44:25.434 [ INFO] Progress -   3.3 MB (86.4%)\n2023-07-11 04:44:25.435 [ INFO] Progress -   3.3 MB (88.4%)\n2023-07-11 04:44:25.435 [ INFO] Progress -   3.3 MB (90.4%)\n2023-07-11 04:44:25.435 [ INFO] Progress -   3.3 MB (92.5%)\n2023-07-11 04:44:25.435 [ INFO] Progress -   3.3 MB (94.5%)\n2023-07-11 04:44:25.436 [ INFO] Progress -   3.3 MB (96.5%)\n2023-07-11 04:44:25.436 [ INFO] Progress -   3.3 MB (98.5%)\n2023-07-11 04:44:25.437 [ INFO] Progress -   3.3 MB (100.0%)\n2023-07-11 04:44:25.437 [ INFO] Processing  time : 0:00:34.702582\n2023-07-11 04:44:25.437 [ INFO] Downloading time : 0:00:01.213662\n2023-07-11 04:44:25.437 [ INFO] Total time       : 0:00:35.916244\n2023-07-11 04:44:25.437 [ INFO] Download rate    : 1.7 MB/s\n2023-07-11 04:44:25.437 [ INFO] Save into        : motu/cmems_obs-sl_glo_phy-ssh_my_allsat-l4-duacs-0.25deg_P1D/200110.nc\n2023-07-11 04:44:25.467 [ INFO] Done\n2023-07-11 04:44:25.708 [ INFO] Asynchronous mode set\n2023-07-11 04:44:25.709 [ INFO] Authenticating user mphan for service https://my.cmems-du.eu/motu-web/Motu\n2023-07-11 04:44:33.978 [ INFO] Requesting file to download (this can take a while)...\n2023-07-11 04:44:41.900 [ INFO] Authenticating user mphan for service https://my.cmems-du.eu/motu-web/Motu\n2023-07-11 04:44:56.540 [ INFO] The product is ready for download\n2023-07-11 04:44:56.540 [ INFO] Downloading file (this can take a while)...\n2023-07-11 04:44:57.296 [ INFO] File type: application/x-netcdf\n2023-07-11 04:44:57.297 [ INFO] File size: 3.2 MB (3155704 B)\n2023-07-11 04:44:57.297 [ INFO] Downloading file /home/jovyan/shared/minh-notebooks/motu/cmems_obs-sl_glo_phy-ssh_my_allsat-l4-duacs-0.25deg_P1D/200111.nc\n2023-07-11 04:44:57.640 [ INFO] Progress -   3.2 MB (2.1%)\n2023-07-11 04:44:57.813 [ INFO] Progress -   3.2 MB (4.2%)\n2023-07-11 04:44:57.985 [ INFO] Progress -   3.2 MB (6.2%)\n2023-07-11 04:44:57.986 [ INFO] Progress -   3.2 MB (8.3%)\n2023-07-11 04:44:58.157 [ INFO] Progress -   3.2 MB (10.4%)\n2023-07-11 04:44:58.158 [ INFO] Progress -   3.2 MB (12.5%)\n2023-07-11 04:44:58.158 [ INFO] Progress -   3.2 MB (14.5%)\n2023-07-11 04:44:58.158 [ INFO] Progress -   3.2 MB (16.6%)\n2023-07-11 04:44:58.159 [ INFO] Progress -   3.2 MB (18.7%)\n2023-07-11 04:44:58.330 [ INFO] Progress -   3.2 MB (20.8%)\n2023-07-11 04:44:58.331 [ INFO] Progress -   3.2 MB (22.8%)\n2023-07-11 04:44:58.331 [ INFO] Progress -   3.2 MB (24.9%)\n2023-07-11 04:44:58.331 [ INFO] Progress -   3.2 MB (27.0%)\n2023-07-11 04:44:58.332 [ INFO] Progress -   3.2 MB (29.1%)\n2023-07-11 04:44:58.332 [ INFO] Progress -   3.2 MB (31.2%)\n2023-07-11 04:44:58.332 [ INFO] Progress -   3.2 MB (33.2%)\n2023-07-11 04:44:58.333 [ INFO] Progress -   3.2 MB (35.3%)\n2023-07-11 04:44:58.333 [ INFO] Progress -   3.2 MB (37.4%)\n2023-07-11 04:44:58.333 [ INFO] Progress -   3.2 MB (39.5%)\n2023-07-11 04:44:58.502 [ INFO] Progress -   3.2 MB (41.5%)\n2023-07-11 04:44:58.503 [ INFO] Progress -   3.2 MB (43.6%)\n2023-07-11 04:44:58.503 [ INFO] Progress -   3.2 MB (45.7%)\n2023-07-11 04:44:58.503 [ INFO] Progress -   3.2 MB (47.8%)\n2023-07-11 04:44:58.504 [ INFO] Progress -   3.2 MB (49.8%)\n2023-07-11 04:44:58.504 [ INFO] Progress -   3.2 MB (51.9%)\n2023-07-11 04:44:58.504 [ INFO] Progress -   3.2 MB (54.0%)\n2023-07-11 04:44:58.505 [ INFO] Progress -   3.2 MB (56.1%)\n2023-07-11 04:44:58.505 [ INFO] Progress -   3.2 MB (58.1%)\n2023-07-11 04:44:58.505 [ INFO] Progress -   3.2 MB (60.2%)\n2023-07-11 04:44:58.505 [ INFO] Progress -   3.2 MB (62.3%)\n2023-07-11 04:44:58.506 [ INFO] Progress -   3.2 MB (64.4%)\n2023-07-11 04:44:58.506 [ INFO] Progress -   3.2 MB (66.5%)\n2023-07-11 04:44:58.507 [ INFO] Progress -   3.2 MB (68.5%)\n2023-07-11 04:44:58.507 [ INFO] Progress -   3.2 MB (70.6%)\n2023-07-11 04:44:58.507 [ INFO] Progress -   3.2 MB (72.7%)\n2023-07-11 04:44:58.507 [ INFO] Progress -   3.2 MB (74.8%)\n2023-07-11 04:44:58.508 [ INFO] Progress -   3.2 MB (76.8%)\n2023-07-11 04:44:58.508 [ INFO] Progress -   3.2 MB (78.9%)\n2023-07-11 04:44:58.508 [ INFO] Progress -   3.2 MB (81.0%)\n2023-07-11 04:44:58.675 [ INFO] Progress -   3.2 MB (83.1%)\n2023-07-11 04:44:58.675 [ INFO] Progress -   3.2 MB (85.1%)\n2023-07-11 04:44:58.676 [ INFO] Progress -   3.2 MB (87.2%)\n2023-07-11 04:44:58.676 [ INFO] Progress -   3.2 MB (89.3%)\n2023-07-11 04:44:58.676 [ INFO] Progress -   3.2 MB (91.4%)\n2023-07-11 04:44:58.676 [ INFO] Progress -   3.2 MB (93.5%)\n2023-07-11 04:44:58.677 [ INFO] Progress -   3.2 MB (95.5%)\n2023-07-11 04:44:58.677 [ INFO] Progress -   3.2 MB (97.6%)\n2023-07-11 04:44:58.677 [ INFO] Progress -   3.2 MB (99.7%)\n2023-07-11 04:44:58.678 [ INFO] Progress -   3.2 MB (100.0%)\n2023-07-11 04:44:58.678 [ INFO] Processing  time : 0:00:31.590883\n2023-07-11 04:44:58.678 [ INFO] Downloading time : 0:00:01.381213\n2023-07-11 04:44:58.678 [ INFO] Total time       : 0:00:32.972096\n2023-07-11 04:44:58.678 [ INFO] Download rate    : 1.5 MB/s\n2023-07-11 04:44:58.678 [ INFO] Save into        : motu/cmems_obs-sl_glo_phy-ssh_my_allsat-l4-duacs-0.25deg_P1D/200111.nc\n2023-07-11 04:44:58.710 [ INFO] Done\n2023-07-11 04:44:58.961 [ INFO] Asynchronous mode set\n2023-07-11 04:44:58.961 [ INFO] Authenticating user mphan for service https://my.cmems-du.eu/motu-web/Motu\n2023-07-11 04:45:04.292 [ INFO] Requesting file to download (this can take a while)...\n2023-07-11 04:45:11.513 [ INFO] Authenticating user mphan for service https://my.cmems-du.eu/motu-web/Motu\n2023-07-11 04:45:26.798 [ INFO] The product is ready for download\n2023-07-11 04:45:26.798 [ INFO] Downloading file (this can take a while)...\n2023-07-11 04:45:27.551 [ INFO] File type: application/x-netcdf\n2023-07-11 04:45:27.551 [ INFO] File size: 3.3 MB (3260684 B)\n2023-07-11 04:45:27.551 [ INFO] Downloading file /home/jovyan/shared/minh-notebooks/motu/cmems_obs-sl_glo_phy-ssh_my_allsat-l4-duacs-0.25deg_P1D/200112.nc\n2023-07-11 04:45:27.895 [ INFO] Progress -   3.3 MB (2.0%)\n2023-07-11 04:45:28.067 [ INFO] Progress -   3.3 MB (4.0%)\n2023-07-11 04:45:28.069 [ INFO] Progress -   3.3 MB (6.0%)\n2023-07-11 04:45:28.240 [ INFO] Progress -   3.3 MB (8.0%)\n2023-07-11 04:45:28.240 [ INFO] Progress -   3.3 MB (10.0%)\n2023-07-11 04:45:28.241 [ INFO] Progress -   3.3 MB (12.1%)\n2023-07-11 04:45:28.412 [ INFO] Progress -   3.3 MB (14.1%)\n2023-07-11 04:45:28.413 [ INFO] Progress -   3.3 MB (16.1%)\n2023-07-11 04:45:28.413 [ INFO] Progress -   3.3 MB (18.1%)\n2023-07-11 04:45:28.413 [ INFO] Progress -   3.3 MB (20.1%)\n2023-07-11 04:45:28.414 [ INFO] Progress -   3.3 MB (22.1%)\n2023-07-11 04:45:28.414 [ INFO] Progress -   3.3 MB (24.1%)\n2023-07-11 04:45:28.414 [ INFO] Progress -   3.3 MB (26.1%)\n2023-07-11 04:45:28.585 [ INFO] Progress -   3.3 MB (28.1%)\n2023-07-11 04:45:28.585 [ INFO] Progress -   3.3 MB (30.1%)\n2023-07-11 04:45:28.586 [ INFO] Progress -   3.3 MB (32.2%)\n2023-07-11 04:45:28.587 [ INFO] Progress -   3.3 MB (34.2%)\n2023-07-11 04:45:28.587 [ INFO] Progress -   3.3 MB (36.2%)\n2023-07-11 04:45:28.587 [ INFO] Progress -   3.3 MB (38.2%)\n2023-07-11 04:45:28.587 [ INFO] Progress -   3.3 MB (40.2%)\n2023-07-11 04:45:28.588 [ INFO] Progress -   3.3 MB (42.2%)\n2023-07-11 04:45:28.588 [ INFO] Progress -   3.3 MB (44.2%)\n2023-07-11 04:45:28.588 [ INFO] Progress -   3.3 MB (46.2%)\n2023-07-11 04:45:28.588 [ INFO] Progress -   3.3 MB (48.2%)\n2023-07-11 04:45:28.588 [ INFO] Progress -   3.3 MB (50.2%)\n2023-07-11 04:45:28.589 [ INFO] Progress -   3.3 MB (52.3%)\n2023-07-11 04:45:28.589 [ INFO] Progress -   3.3 MB (54.3%)\n2023-07-11 04:45:28.757 [ INFO] Progress -   3.3 MB (56.3%)\n2023-07-11 04:45:28.758 [ INFO] Progress -   3.3 MB (58.3%)\n2023-07-11 04:45:28.758 [ INFO] Progress -   3.3 MB (60.3%)\n2023-07-11 04:45:28.758 [ INFO] Progress -   3.3 MB (62.3%)\n2023-07-11 04:45:28.758 [ INFO] Progress -   3.3 MB (64.3%)\n2023-07-11 04:45:28.759 [ INFO] Progress -   3.3 MB (66.3%)\n2023-07-11 04:45:28.759 [ INFO] Progress -   3.3 MB (68.3%)\n2023-07-11 04:45:28.760 [ INFO] Progress -   3.3 MB (70.3%)\n2023-07-11 04:45:28.760 [ INFO] Progress -   3.3 MB (72.4%)\n2023-07-11 04:45:28.760 [ INFO] Progress -   3.3 MB (74.4%)\n2023-07-11 04:45:28.760 [ INFO] Progress -   3.3 MB (76.4%)\n2023-07-11 04:45:28.761 [ INFO] Progress -   3.3 MB (78.4%)\n2023-07-11 04:45:28.761 [ INFO] Progress -   3.3 MB (80.4%)\n2023-07-11 04:45:28.761 [ INFO] Progress -   3.3 MB (82.4%)\n2023-07-11 04:45:28.761 [ INFO] Progress -   3.3 MB (84.4%)\n2023-07-11 04:45:28.762 [ INFO] Progress -   3.3 MB (86.4%)\n2023-07-11 04:45:28.762 [ INFO] Progress -   3.3 MB (88.4%)\n2023-07-11 04:45:28.762 [ INFO] Progress -   3.3 MB (90.4%)\n2023-07-11 04:45:28.762 [ INFO] Progress -   3.3 MB (92.5%)\n2023-07-11 04:45:28.762 [ INFO] Progress -   3.3 MB (94.5%)\n2023-07-11 04:45:28.763 [ INFO] Progress -   3.3 MB (96.5%)\n2023-07-11 04:45:28.763 [ INFO] Progress -   3.3 MB (98.5%)\n2023-07-11 04:45:28.764 [ INFO] Progress -   3.3 MB (100.0%)\n2023-07-11 04:45:28.764 [ INFO] Processing  time : 0:00:28.592514\n2023-07-11 04:45:28.764 [ INFO] Downloading time : 0:00:01.212567\n2023-07-11 04:45:28.764 [ INFO] Total time       : 0:00:29.805081\n2023-07-11 04:45:28.764 [ INFO] Download rate    : 1.7 MB/s\n2023-07-11 04:45:28.764 [ INFO] Save into        : motu/cmems_obs-sl_glo_phy-ssh_my_allsat-l4-duacs-0.25deg_P1D/200112.nc\n2023-07-11 04:45:28.818 [ INFO] Done\n\n\nDISCLAIMER: Downloading time may be extremely slow due to processing time from Motu for each request. We can increase temporal range for each one (6 months or 1 year, for example) but it may exceed the size limit MOTU allows. Feel free to modify the prompt generation as it fits to balance speed and size.\n\n\n\nimage.png"
  },
  {
    "objectID": "python-notebooks/01_MOTU_Downloader.html#combine-data",
    "href": "python-notebooks/01_MOTU_Downloader.html#combine-data",
    "title": "Download sliced data using MOTU-Client in Copernicus",
    "section": "Combine data",
    "text": "Combine data\n\nds = xr.open_mfdataset('demonstrated data/motu/cmems_obs-sl_glo_phy-ssh_my_allsat-l4-duacs-0.25deg_P1D//*.nc')\n\n\nds\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:    (time: 731, latitude: 81, longitude: 81)\nCoordinates:\n  * latitude   (latitude) float32 4.875 5.125 5.375 5.625 ... 24.38 24.62 24.88\n  * time       (time) datetime64[ns] 2000-01-01 2000-01-02 ... 2001-12-31\n  * longitude  (longitude) float32 59.88 60.12 60.38 60.62 ... 79.38 79.62 79.88\nData variables:\n    adt        (time, latitude, longitude) float64 dask.array&lt;chunksize=(31, 81, 81), meta=np.ndarray&gt;\n    crs        (time) int32 -2147483647 -2147483647 ... -2147483647 -2147483647\n    sla        (time, latitude, longitude) float64 dask.array&lt;chunksize=(31, 81, 81), meta=np.ndarray&gt;\nAttributes: (12/45)\n    Conventions:                                    CF-1.6\n    FROM_ORIGINAL_FILE__Metadata_Conventions:       Unidata Dataset Discovery...\n    cdm_data_type:                                  Grid\n    comment:                                        Sea Surface Height measur...\n    contact:                                        servicedesk.cmems@mercato...\n    creator_email:                                  servicedesk.cmems@mercato...\n    ...                                             ...\n    time_coverage_duration:                         P1D\n    time_coverage_end:                              2022-08-04T12:00:00Z\n    time_coverage_resolution:                       P1D\n    time_coverage_start:                            2022-08-03T12:00:00Z\n    title:                                          DT merged all satellites ...\n    _CoordSysBuilder:                               ucar.nc2.dataset.conv.CF1...xarray.DatasetDimensions:time: 731latitude: 81longitude: 81Coordinates: (3)latitude(latitude)float324.875 5.125 5.375 ... 24.62 24.88axis :Ybounds :lat_bndslong_name :Latitudestandard_name :latitudeunits :degrees_northvalid_max :24.875valid_min :4.875_ChunkSizes :50_CoordinateAxisType :Latarray([ 4.875,  5.125,  5.375,  5.625,  5.875,  6.125,  6.375,  6.625,  6.875,\n        7.125,  7.375,  7.625,  7.875,  8.125,  8.375,  8.625,  8.875,  9.125,\n        9.375,  9.625,  9.875, 10.125, 10.375, 10.625, 10.875, 11.125, 11.375,\n       11.625, 11.875, 12.125, 12.375, 12.625, 12.875, 13.125, 13.375, 13.625,\n       13.875, 14.125, 14.375, 14.625, 14.875, 15.125, 15.375, 15.625, 15.875,\n       16.125, 16.375, 16.625, 16.875, 17.125, 17.375, 17.625, 17.875, 18.125,\n       18.375, 18.625, 18.875, 19.125, 19.375, 19.625, 19.875, 20.125, 20.375,\n       20.625, 20.875, 21.125, 21.375, 21.625, 21.875, 22.125, 22.375, 22.625,\n       22.875, 23.125, 23.375, 23.625, 23.875, 24.125, 24.375, 24.625, 24.875],\n      dtype=float32)time(time)datetime64[ns]2000-01-01 ... 2001-12-31axis :Tlong_name :Timestandard_name :time_ChunkSizes :1_CoordinateAxisType :Timevalid_min :18262.0valid_max :18292.0array(['2000-01-01T00:00:00.000000000', '2000-01-02T00:00:00.000000000',\n       '2000-01-03T00:00:00.000000000', ..., '2001-12-29T00:00:00.000000000',\n       '2001-12-30T00:00:00.000000000', '2001-12-31T00:00:00.000000000'],\n      dtype='datetime64[ns]')longitude(longitude)float3259.88 60.12 60.38 ... 79.62 79.88axis :Xbounds :lon_bndslong_name :Longitudestandard_name :longitudeunits :degrees_eastvalid_max :79.875valid_min :59.875_ChunkSizes :50_CoordinateAxisType :Lonarray([59.875, 60.125, 60.375, 60.625, 60.875, 61.125, 61.375, 61.625, 61.875,\n       62.125, 62.375, 62.625, 62.875, 63.125, 63.375, 63.625, 63.875, 64.125,\n       64.375, 64.625, 64.875, 65.125, 65.375, 65.625, 65.875, 66.125, 66.375,\n       66.625, 66.875, 67.125, 67.375, 67.625, 67.875, 68.125, 68.375, 68.625,\n       68.875, 69.125, 69.375, 69.625, 69.875, 70.125, 70.375, 70.625, 70.875,\n       71.125, 71.375, 71.625, 71.875, 72.125, 72.375, 72.625, 72.875, 73.125,\n       73.375, 73.625, 73.875, 74.125, 74.375, 74.625, 74.875, 75.125, 75.375,\n       75.625, 75.875, 76.125, 76.375, 76.625, 76.875, 77.125, 77.375, 77.625,\n       77.875, 78.125, 78.375, 78.625, 78.875, 79.125, 79.375, 79.625, 79.875],\n      dtype=float32)Data variables: (3)adt(time, latitude, longitude)float64dask.array&lt;chunksize=(31, 81, 81), meta=np.ndarray&gt;comment :The absolute dynamic topography is the sea surface height above geoid; the adt is obtained as follows: adt=sla+mdt where mdt is the mean dynamic topography; see the product user manual for detailsgrid_mapping :crslong_name :Absolute dynamic topographystandard_name :sea_surface_height_above_geoidunits :m_ChunkSizes :[ 1 50 50]\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n36.59 MiB\n1.55 MiB\n\n\nShape\n(731, 81, 81)\n(31, 81, 81)\n\n\nDask graph\n24 chunks in 49 graph layers\n\n\nData type\nfloat64 numpy.ndarray\n\n\n\n\n\n\n\n\ncrs\n\n\n(time)\n\n\nint32\n\n\n-2147483647 ... -2147483647\n\n\n\n\ncomment :\n\nThis is a container variable that describes the grid_mapping used by the data in this file. This variable does not contain any data; only information about the geographic coordinate system.\n\ninverse_flattening :\n\n298.257\n\ngrid_mapping_name :\n\nlatitude_longitude\n\nsemi_major_axis :\n\n6378136.3\n\n_CoordinateTransformType :\n\nProjection\n\n_CoordinateAxisTypes :\n\nGeoX GeoY\n\n\n\n\narray([-2147483647, -2147483647, -2147483647, -2147483647, -2147483647,\n       -2147483647, -2147483647, -2147483647, -2147483647, -2147483647,\n       -2147483647, -2147483647, -2147483647, -2147483647, -2147483647,\n       -2147483647, -2147483647, -2147483647, -2147483647, -2147483647,\n       -2147483647, -2147483647, -2147483647, -2147483647, -2147483647,\n       -2147483647, -2147483647, -2147483647, -2147483647, -2147483647,\n       -2147483647, -2147483647, -2147483647, -2147483647, -2147483647,\n       -2147483647, -2147483647, -2147483647, -2147483647, -2147483647,\n       -2147483647, -2147483647, -2147483647, -2147483647, -2147483647,\n       -2147483647, -2147483647, -2147483647, -2147483647, -2147483647,\n       -2147483647, -2147483647, -2147483647, -2147483647, -2147483647,\n       -2147483647, -2147483647, -2147483647, -2147483647, -2147483647,\n       -2147483647, -2147483647, -2147483647, -2147483647, -2147483647,\n       -2147483647, -2147483647, -2147483647, -2147483647, -2147483647,\n       -2147483647, -2147483647, -2147483647, -2147483647, -2147483647,\n       -2147483647, -2147483647, -2147483647, -2147483647, -2147483647,\n       -2147483647, -2147483647, -2147483647, -2147483647, -2147483647,\n       -2147483647, -2147483647, -2147483647, -2147483647, -2147483647,\n       -2147483647, -2147483647, -2147483647, -2147483647, -2147483647,\n       -2147483647, -2147483647, -2147483647, -2147483647, -2147483647,\n...\n       -2147483647, -2147483647, -2147483647, -2147483647, -2147483647,\n       -2147483647, -2147483647, -2147483647, -2147483647, -2147483647,\n       -2147483647, -2147483647, -2147483647, -2147483647, -2147483647,\n       -2147483647, -2147483647, -2147483647, -2147483647, -2147483647,\n       -2147483647, -2147483647, -2147483647, -2147483647, -2147483647,\n       -2147483647, -2147483647, -2147483647, -2147483647, -2147483647,\n       -2147483647, -2147483647, -2147483647, -2147483647, -2147483647,\n       -2147483647, -2147483647, -2147483647, -2147483647, -2147483647,\n       -2147483647, -2147483647, -2147483647, -2147483647, -2147483647,\n       -2147483647, -2147483647, -2147483647, -2147483647, -2147483647,\n       -2147483647, -2147483647, -2147483647, -2147483647, -2147483647,\n       -2147483647, -2147483647, -2147483647, -2147483647, -2147483647,\n       -2147483647, -2147483647, -2147483647, -2147483647, -2147483647,\n       -2147483647, -2147483647, -2147483647, -2147483647, -2147483647,\n       -2147483647, -2147483647, -2147483647, -2147483647, -2147483647,\n       -2147483647, -2147483647, -2147483647, -2147483647, -2147483647,\n       -2147483647, -2147483647, -2147483647, -2147483647, -2147483647,\n       -2147483647, -2147483647, -2147483647, -2147483647, -2147483647,\n       -2147483647, -2147483647, -2147483647, -2147483647, -2147483647,\n       -2147483647], dtype=int32)\n\n\nsla\n\n\n(time, latitude, longitude)\n\n\nfloat64\n\n\ndask.array&lt;chunksize=(31, 81, 81), meta=np.ndarray&gt;\n\n\n\n\nancillary_variables :\n\nerr_sla\n\ncomment :\n\nThe sea level anomaly is the sea surface height above mean sea surface; it is referenced to the [1993, 2012] period; see the product user manual for details\n\ngrid_mapping :\n\ncrs\n\nlong_name :\n\nSea level anomaly\n\nstandard_name :\n\nsea_surface_height_above_sea_level\n\nunits :\n\nm\n\n_ChunkSizes :\n\n[ 1 50 50]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n36.59 MiB\n1.55 MiB\n\n\nShape\n(731, 81, 81)\n(31, 81, 81)\n\n\nDask graph\n24 chunks in 49 graph layers\n\n\nData type\nfloat64 numpy.ndarray\n\n\n\n\n\n\n\n\n\nAttributes: (45)Conventions :CF-1.6FROM_ORIGINAL_FILE__Metadata_Conventions :Unidata Dataset Discovery v1.0cdm_data_type :Gridcomment :Sea Surface Height measured by Altimetry and derived variablescontact :servicedesk.cmems@mercator-ocean.eucreator_email :servicedesk.cmems@mercator-ocean.eucreator_name :CMEMS - Sea Level Thematic Assembly Centercreator_url :http://marine.copernicus.eudate_created :2023-03-01T17:56:26Zdate_issued :2023-03-01T17:56:26Zdate_modified :2023-03-01T17:56:26ZFROM_ORIGINAL_FILE__geospatial_lat_max :89.875FROM_ORIGINAL_FILE__geospatial_lat_min :-89.875FROM_ORIGINAL_FILE__geospatial_lat_resolution :0.25FROM_ORIGINAL_FILE__geospatial_lat_units :degrees_northFROM_ORIGINAL_FILE__geospatial_lon_max :179.875FROM_ORIGINAL_FILE__geospatial_lon_min :-179.875FROM_ORIGINAL_FILE__geospatial_lon_resolution :0.25FROM_ORIGINAL_FILE__geospatial_lon_units :degrees_eastgeospatial_vertical_max :0.0geospatial_vertical_min :0.0geospatial_vertical_positive :downgeospatial_vertical_resolution :pointgeospatial_vertical_units :mhistory :2023-03-01 17:56:27Z: Creationinstitution :CLS, CNESkeywords :Oceans &gt; Ocean Topography &gt; Sea Surface Heightkeywords_vocabulary :NetCDF COARDS Climate and Forecast Standard Nameslicense :http://marine.copernicus.eu/web/27-service-commitments-and-licence.phpFROM_ORIGINAL_FILE__platform :Altika Drifting Phase, Cryosat-2 New Orbit, Haiyang-2B, Jason-3 Interleaved, Sentinel-3A, Sentinel-3B, Sentinel-6Aprocessing_level :L4FROM_ORIGINAL_FILE__product_version :vDec2021project :COPERNICUS MARINE ENVIRONMENT MONITORING SERVICE (CMEMS)references :http://marine.copernicus.euFROM_ORIGINAL_FILE__software_version :7.1_DUACS_DT2021_baselinesource :Altimetry measurementsssalto_duacs_comment :The reference mission used for the altimeter inter-calibration processing is Topex/Poseidon between 1993-01-01 and 2002-04-23, Jason-1 between 2002-04-24 and 2008-10-18, OSTM/Jason-2 between 2008-10-19 and 2016-06-25, Jason-3 between 2016-06-25 and 2022-02-09, and Sentinel-6A from 2022-02-10.standard_name_vocabulary :NetCDF Climate and Forecast (CF) Metadata Convention Standard Name Table v37summary :SSALTO/DUACS Delayed-Time Level-4 sea surface height and derived variables measured by multi-satellite altimetry observations over Global Ocean.time_coverage_duration :P1Dtime_coverage_end :2022-08-04T12:00:00Ztime_coverage_resolution :P1Dtime_coverage_start :2022-08-03T12:00:00Ztitle :DT merged all satellites Global Ocean Gridded SSALTO/DUACS Sea Surface Height L4 product and derived variables_CoordSysBuilder :ucar.nc2.dataset.conv.CF1Convention"
  },
  {
    "objectID": "python-notebooks/01_OPeNDAP_Downloader.html#import-necessary-libraries",
    "href": "python-notebooks/01_OPeNDAP_Downloader.html#import-necessary-libraries",
    "title": "Download Data using OPeNDAP",
    "section": "Import necessary libraries",
    "text": "Import necessary libraries\n\nimport xarray as xr\nimport getpass\n\nAt the moment, implementing using .netrc is not probable for some reason. Will retry later.\n\nUSERNAME = 'mphan'\nPASSWORD = getpass.getpass('Enter your password: ')\n\nEnter your password:  ¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑\n\n\n\n# change your Dataset ID accordingly\nDATASET_ID = 'cmems_mod_glo_phy-thetao_anfc_0.083deg_P1D-m'\n\n\ndef copernicusmarine_datastore(dataset, username, password):\n    from pydap.client import open_url\n    from pydap.cas.get_cookies import setup_session\n    cas_url = 'https://cmems-cas.cls.fr/cas/login'\n    session = setup_session(cas_url, username, password)\n    session.cookies.set(\"CASTGC\", session.cookies.get_dict()['CASTGC'])\n    database = ['my', 'nrt']\n    url = f'https://{database[0]}.cmems-du.eu/thredds/dodsC/{dataset}'\n    try:\n        data_store = xr.backends.PydapDataStore(open_url(url, session=session, user_charset='utf-8')) # needs PyDAP &gt;= v3.3.0 see https://github.com/pydap/pydap/pull/223/commits \n    except:\n        url = f'https://{database[1]}.cmems-du.eu/thredds/dodsC/{dataset}'\n        data_store = xr.backends.PydapDataStore(open_url(url, session=session, user_charset='utf-8')) # needs PyDAP &gt;= v3.3.0 see https://github.com/pydap/pydap/pull/223/commits\n    return data_store\n\n\ndata_store = copernicusmarine_datastore(DATASET_ID, USERNAME, PASSWORD)\n\nWhen you open a dataset from PyDAP‚Äôs Data Store object, only the ‚Äúshell‚Äù of the dataset is streamed into our local machine. The rest of the data shall be remote, so if we want to process further outside of slicing/inspecting, we need to stream the additional data, which occupies lots of memory. The streaming/downloading speed is also very slow, so proceed with caution.\n\nDS = xr.open_dataset(data_store)\n\n\nDS\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:    (longitude: 4320, latitude: 2041, depth: 50, time: 999)\nCoordinates:\n  * longitude  (longitude) float32 -180.0 -179.9 -179.8 ... 179.8 179.8 179.9\n  * latitude   (latitude) float32 -80.0 -79.92 -79.83 ... 89.83 89.92 90.0\n  * depth      (depth) float32 0.494 1.541 2.646 ... 5.275e+03 5.728e+03\n  * time       (time) datetime64[ns] 2020-11-01T12:00:00 ... 2023-07-27T12:00:00\nData variables:\n    thetao     (time, depth, latitude, longitude) float32 ...\nAttributes:\n    producer:     CMEMS - Global Monitoring and Forecasting Centre\n    title:        daily mean fields from Global Ocean Physics Analysis and Fo...\n    area:         Global\n    Conventions:  CF-1.8\n    credit:       E.U. Copernicus Marine Service Information (CMEMS)\n    contact:      https://marine.copernicus.eu/contact\n    references:   http://marine.copernicus.eu\n    source:       MOI GLO12\n    licence:      http://marine.copernicus.eu/services-portfolio/service-comm...\n    institution:  Mercator Ocean Internationalxarray.DatasetDimensions:longitude: 4320latitude: 2041depth: 50time: 999Coordinates: (4)longitude(longitude)float32-180.0 -179.9 ... 179.8 179.9valid_min :-180.0valid_max :179.91669step :0.08332825units :degrees_eastunit_long :Degrees Eastlong_name :Longitudestandard_name :longitudeaxis :X_ChunkSizes :4320array([-180.     , -179.91667, -179.83333, ...,  179.75   ,  179.83334,\n        179.91669], dtype=float32)latitude(latitude)float32-80.0 -79.92 -79.83 ... 89.92 90.0valid_min :-80.0valid_max :90.0step :0.08333588units :degrees_northunit_long :Degrees Northlong_name :Latitudestandard_name :latitudeaxis :Y_ChunkSizes :2041array([-80.      , -79.916664, -79.833336, ...,  89.83334 ,  89.91667 ,\n        90.      ], dtype=float32)depth(depth)float320.494 1.541 ... 5.275e+03 5.728e+03valid_min :0.494025valid_max :5727.917units :mpositive :downunit_long :Meterslong_name :Depthstandard_name :depthaxis :Z_ChunkSizes :50array([4.940250e-01, 1.541375e+00, 2.645669e+00, 3.819495e+00, 5.078224e+00,\n       6.440614e+00, 7.929560e+00, 9.572997e+00, 1.140500e+01, 1.346714e+01,\n       1.581007e+01, 1.849556e+01, 2.159882e+01, 2.521141e+01, 2.944473e+01,\n       3.443415e+01, 4.034405e+01, 4.737369e+01, 5.576429e+01, 6.580727e+01,\n       7.785385e+01, 9.232607e+01, 1.097293e+02, 1.306660e+02, 1.558507e+02,\n       1.861256e+02, 2.224752e+02, 2.660403e+02, 3.181274e+02, 3.802130e+02,\n       4.539377e+02, 5.410889e+02, 6.435668e+02, 7.633331e+02, 9.023393e+02,\n       1.062440e+03, 1.245291e+03, 1.452251e+03, 1.684284e+03, 1.941893e+03,\n       2.225078e+03, 2.533336e+03, 2.865703e+03, 3.220820e+03, 3.597032e+03,\n       3.992484e+03, 4.405224e+03, 4.833291e+03, 5.274784e+03, 5.727917e+03],\n      dtype=float32)time(time)datetime64[ns]2020-11-01T12:00:00 ... 2023-07-...long_name :Time (hours since 1950-01-01)standard_name :timeaxis :T_ChunkSizes :1024array(['2020-11-01T12:00:00.000000000', '2020-11-02T12:00:00.000000000',\n       '2020-11-03T12:00:00.000000000', ..., '2023-07-25T12:00:00.000000000',\n       '2023-07-26T12:00:00.000000000', '2023-07-27T12:00:00.000000000'],\n      dtype='datetime64[ns]')Data variables: (1)thetao(time, depth, latitude, longitude)float32...long_name :Temperaturestandard_name :sea_water_potential_temperatureunits :degrees_Cunit_long :Degrees Celsiusvalid_min :-10.0valid_max :40.0cell_methods :area: mean_ChunkSizes :[1, 6, 256, 540][440415144000 values with dtype=float32]Attributes: (10)producer :CMEMS - Global Monitoring and Forecasting Centretitle :daily mean fields from Global Ocean Physics Analysis and Forecast updated Dailyarea :GlobalConventions :CF-1.8credit :E.U. Copernicus Marine Service Information (CMEMS)contact :https://marine.copernicus.eu/contactreferences :http://marine.copernicus.eusource :MOI GLO12licence :http://marine.copernicus.eu/services-portfolio/service-commitments-and-licence/institution :Mercator Ocean International"
  },
  {
    "objectID": "python-notebooks/01_earthaccess_Downloader.html#authorize-credentials",
    "href": "python-notebooks/01_earthaccess_Downloader.html#authorize-credentials",
    "title": "NASA Earth Data",
    "section": "Authorize credentials",
    "text": "Authorize credentials\nTo download data from NASA‚Äôs Earth Data database, it‚Äôs recommended that you set up a .netrc credential file so that you don‚Äôt have to manually log in every time you run a downloading script. To do this, consult 2021 Cloud Hackathon‚Äôs tutorial here. Make sure to register an account with Earth Data first before following the tutorial.\nWhen you finished implementing the .netrc file, continue with the tutorial below"
  },
  {
    "objectID": "python-notebooks/01_earthaccess_Downloader.html#import-necessary-libraries",
    "href": "python-notebooks/01_earthaccess_Downloader.html#import-necessary-libraries",
    "title": "NASA Earth Data",
    "section": "Import necessary libraries",
    "text": "Import necessary libraries\n\nimport xarray as xr\nimport earthaccess\nimport numpy as np\nimport pandas as pd\nimport os, glob"
  },
  {
    "objectID": "python-notebooks/01_earthaccess_Downloader.html#stream-data-to-your-local-machine-using-earthaccess-library",
    "href": "python-notebooks/01_earthaccess_Downloader.html#stream-data-to-your-local-machine-using-earthaccess-library",
    "title": "NASA Earth Data",
    "section": "Stream data to your local machine using earthaccess library",
    "text": "Stream data to your local machine using earthaccess library\nEarthaccess library streamlines your downloading, slicing, and searching for granules easier than ever. For cloud-hosted datasets (which is what this tutorial best works with), we choose to download granules to the local machine instead of streaming them to the working Python scripts as some users may not be physically available in the us-west region for streaming to be effective. Local downloading may result in heavy file sizes, but is consistent, and we am also providing some tweaks to save as much as you can, especially if your research interest area requires a long temporal range and does not cover globally.\n\n# Log in using .netrc file\nauth = earthaccess.login(strategy=\"netrc\")\n\nNo .netrc found in /home/rstudio\n\n\nFileNotFoundError: [Errno 2] No such file or directory: '/home/rstudio/.netrc'"
  },
  {
    "objectID": "python-notebooks/01_earthaccess_Downloader.html#download-granules-for-an-extended-period-of-time",
    "href": "python-notebooks/01_earthaccess_Downloader.html#download-granules-for-an-extended-period-of-time",
    "title": "NASA Earth Data",
    "section": "Download granules for an extended period of time",
    "text": "Download granules for an extended period of time\nYou can consult the earthacess library website or their notebooks for code snippets on how to browse and look up collections. For this notebook, we mainly focus on the downloading aspect. First, we need to get the list of granules to download.\n\n# EarthAccess's approach to collecting granules\nresults = earthaccess.search_data(\n    short_name='OSCAR_L4_OC_FINAL_V2.0',\n    cloud_hosted=True,\n    bounding_box = (60, 5, 80, 25),\n    temporal=(\"2000-01\", \"2001-12\")\n)\n\nGranules found: 335\n\n\nSince earthacess does not support spatial slicing, we developed a method to download, slice, combine, and export data yearly, then finally delete temporary downloaded files to save disk space. Assumed that you already knew the temporal, spatial range of the dataset of your chosen, we first download the data by year into a temporary folder, then slice the data and then export the combined data to another folder.\n\n# Our approach\n\ndef download_granules_by_year(short_name, month_start, month_end, lat1=5, lat2=25, lon1=60, lon2=80):\n    for year in range(int(month_start[:4]), int(month_end[:4])+1):      \n        print('Collecting granules')\n        granules = earthaccess.granule_query().short_name(short_name).temporal(f'{year}',f'{year+1}-01').get(366)\n        \n        MAIN_FOLDER = 'demonstrated data/earth_data'\n        TEMP_FOLDER = 'temp'\n        path_temp_folder = os.path.join(MAIN_FOLDER, TEMP_FOLDER)\n        path_processed_folder = os.path.join(MAIN_FOLDER, short_name)\n        # create folder to store data\n        if not os.path.exists(path_temp_folder):\n            os.makedirs(path_temp_folder)\n        if not os.path.exists(path_processed_folder):\n            os.makedirs(path_processed_folder)\n        files = earthaccess.download(granules, path_temp_folder)\n        \n        # grab first file in directory to examine lat and lon values\n        first_file = os.listdir(path_temp_folder)[0]\n        \n        # get bounding box\n        lat1_idx, lat2_idx, lon1_idx, lon2_idx = get_bounding_box(os.path.join(path_temp_folder, first_file), lat1, lat2, lon1, lon2)\n        # combine files together \n        ## for this example collection, coordinate names are 'lat' and 'lon' while their underlying indices are 'latitude' and 'longitude', respectively\n        ## may or may not be applicable for other datasets on the site.\n        \n        ## if dataset coordinates are slice-able, use:\n        ### data = xr.open_mfdataset(f'{path_temp_folder}/*.nc').sel(lat=slice(lat1, lat2+1), longitude=slice(lon1, lon2+1))\n        \n        print('Slicing...')\n        data = xr.open_mfdataset(f'{path_temp_folder}/*.nc').isel(latitude=slice(lat1_idx, lat2_idx+1), longitude=slice(lon1_idx, lon2_idx+1))\n        data.to_netcdf(f'{path_processed_folder}/{year}.nc')\n        \n        # delete files in the temporary folder\n        print('Deleting temporary files...')\n        files = glob.glob(f'{path_temp_folder}/*.*')\n        for f in files:\n            os.remove(f)\n\ndef get_bounding_box(file_path, lat1=0, lat2=30, lon1=60, lon2=80):\n    \"\"\"\n    The dataset we experimented did not have indexed coordinates, \n    so we resorted to slicing using index positions\n    \"\"\"\n    ds = xr.open_dataset(file_path)\n    \n    # modify depending on name of latitude and longitude coordinates\n    lat_vals = ds.lat.values\n    lon_vals = ds.lon.values\n    \n    lat1_idx = np.where(lat_vals==lat1)[0][0]\n    lat2_idx = np.where(lat_vals==lat2)[0][0]\n    lon1_idx = np.where(lon_vals==lon1)[0][0]\n    lon2_idx = np.where(lon_vals==lon2)[0][0]\n    \n    return lat1_idx, lat2_idx, lon1_idx, lon2_idx\n\n\ndownload_granules_by_year(short_name='OSCAR_L4_OC_FINAL_V2.0',\n                          month_start='2000-01', month_end='2001-12', \n                          lat1=5, lat2=25, lon1=60, lon2=80)\n\nCollecting granules\n Getting 366 granules, approx download size: 0.0 GB\nSlicing...\nDeleting temporary files...\nCollecting granules\n Getting 366 granules, approx download size: 0.0 GB\nSlicing..."
  },
  {
    "objectID": "python-notebooks/01_earthaccess_Downloader.html#combine-files-together",
    "href": "python-notebooks/01_earthaccess_Downloader.html#combine-files-together",
    "title": "NASA Earth Data",
    "section": "Combine files together",
    "text": "Combine files together\nNow that we have all netcdf4 files in one place, all spatially sliced, combining the rest of the data is a piece of cake! Note that some of the data will be overlap in the process of combing data every year earlier, so it‚Äôs best practice to remove duplicates (if any)\n\ncombined = xr.open_mfdataset('demonstrated data/earth_data/OSCAR_L4_OC_FINAL_V2.0/*.nc')\n\n# convert CFTimeIndex to datetimeindex\ncombined['time'] = combined.indexes['time'].to_datetimeindex()\n\nunique_time_idxs = np.unique(combined.time, return_index=True)[1]\ncombined = combined.isel(time=unique_time_idxs)\n\n/tmp/ipykernel_46/264036009.py:4: RuntimeWarning: Converting a CFTimeIndex with dates from a non-standard calendar, 'julian', to a pandas.DatetimeIndex, which uses dates from the standard calendar.  This may lead to subtle errors in operations that depend on the length of time between dates.\n  combined['time'] = combined.indexes['time'].to_datetimeindex()\n\n\n\ncombined\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:  (latitude: 177, longitude: 241, time: 732)\nCoordinates:\n    lat      (latitude) float64 dask.array&lt;chunksize=(177,), meta=np.ndarray&gt;\n    lon      (longitude) float64 dask.array&lt;chunksize=(241,), meta=np.ndarray&gt;\n  * time     (time) datetime64[ns] 2000-01-01 2000-01-02 ... 2002-01-01\nDimensions without coordinates: latitude, longitude\nData variables:\n    u        (time, longitude, latitude) float64 dask.array&lt;chunksize=(732, 241, 177), meta=np.ndarray&gt;\n    v        (time, longitude, latitude) float64 dask.array&lt;chunksize=(732, 241, 177), meta=np.ndarray&gt;\n    ug       (time, longitude, latitude) float64 dask.array&lt;chunksize=(732, 241, 177), meta=np.ndarray&gt;\n    vg       (time, longitude, latitude) float64 dask.array&lt;chunksize=(732, 241, 177), meta=np.ndarray&gt;\nAttributes: (12/36)\n    title:                      Ocean Surface Current Analyses Real-time (OSC...\n    summary:                    Global, daily, 0.25 degree geostrophic and to...\n    keywords:                   ocean currents,ocean circulation,surface curr...\n    Conventions:                CF-1.8 Standard Names v77, ACDD-1.3, netcdf 4...\n    id:                         OSCAR_L4_OC_FINAL_V2.0\n    history:                    OSCAR 0.25 degree daily version 2.0 replaces ...\n    ...                         ...\n    geospatial_lon_max:         359.75\n    geospatial_lon_units:       degrees_east\n    geospatial_lon_resolution:  0.25 degree\n    time_coverage_start:        2000-01-01T00:00:00\n    time_coverage_end:          2000-01-01T23:59:59\n    date_created:               2022-01-07xarray.DatasetDimensions:latitude: 177longitude: 241time: 732Coordinates: (3)lat(latitude)float64dask.array&lt;chunksize=(177,), meta=np.ndarray&gt;long_name :latitudestandard_name :latitudeunits :degrees_northaxis :Yvalid_min :-89.75valid_max :89.75bounds :[-89.75,89.75]\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n1.38 kiB\n1.38 kiB\n\n\nShape\n(177,)\n(177,)\n\n\nDask graph\n1 chunks in 2 graph layers\n\n\nData type\nfloat64 numpy.ndarray\n\n\n\n\n\n\n\n\nlon\n\n\n(longitude)\n\n\nfloat64\n\n\ndask.array&lt;chunksize=(241,), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\nlongitude\n\nstandard_name :\n\nlongitude\n\nunits :\n\ndegrees_east\n\naxis :\n\nX\n\nvalid_min :\n\n0.0\n\nvalid_max :\n\n359.75\n\nbounds :\n\n[0,359.75]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n1.88 kiB\n1.88 kiB\n\n\nShape\n(241,)\n(241,)\n\n\nDask graph\n1 chunks in 2 graph layers\n\n\nData type\nfloat64 numpy.ndarray\n\n\n\n\n\n\n\n\n\ntime\n\n\n(time)\n\n\ndatetime64[ns]\n\n\n2000-01-01 ... 2002-01-01\n\n\n\n\n\n\n\narray(['2000-01-01T00:00:00.000000000', '2000-01-02T00:00:00.000000000',\n       '2000-01-03T00:00:00.000000000', ..., '2001-12-30T00:00:00.000000000',\n       '2001-12-31T00:00:00.000000000', '2002-01-01T00:00:00.000000000'],\n      dtype='datetime64[ns]')\n\nData variables: (4)\n\n\n\n\n\nu\n\n\n(time, longitude, latitude)\n\n\nfloat64\n\n\ndask.array&lt;chunksize=(732, 241, 177), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\nzonal total surface current\n\nstandard_name :\n\neastward_sea_water_velocity\n\nunits :\n\nm s-1\n\ncoverage_content_type :\n\nmodelResult\n\nvalid_min :\n\n-3.0\n\nvalid_max :\n\n3.0\n\ndepth :\n\n15m\n\ncomment :\n\nVelocities are an average over the top 30m of the mixed layer\n\nsource :\n\nSSH source: CMEMS SSALTO/DUACS SEALEVEL_GLO_PHY_L4_MY_008_047 DOI: 10.48670/moi-00148 ; WIND source: ECMWF ERA5 10m wind DOI: 10.24381/cds.adbb2d47 ; SST source: CMC 0.2 deg SST V2.0 DOI: 10.5067/GHCMC-4FM02\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n238.23 MiB\n238.23 MiB\n\n\nShape\n(732, 241, 177)\n(732, 241, 177)\n\n\nDask graph\n1 chunks in 2 graph layers\n\n\nData type\nfloat64 numpy.ndarray\n\n\n\n\n\n\n\n\n\nv\n\n\n(time, longitude, latitude)\n\n\nfloat64\n\n\ndask.array&lt;chunksize=(732, 241, 177), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\nmeridional total surface current\n\nstandard_name :\n\nnorthward_sea_water_velocity\n\nunits :\n\nm s-1\n\ncoverage_content_type :\n\nmodelResult\n\nvalid_min :\n\n-3.0\n\nvalid_max :\n\n3.0\n\ndepth :\n\n15m\n\ncomment :\n\nVelocities are an average over the top 30m of the mixed layer\n\nsource :\n\nSSH source: CMEMS SSALTO/DUACS SEALEVEL_GLO_PHY_L4_MY_008_047 DOI: 10.48670/moi-00148 ; WIND source: ECMWF ERA5 10m wind DOI: 10.24381/cds.adbb2d47 ; SST source: CMC 0.2 deg SST V2.0 DOI: 10.5067/GHCMC-4FM02\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n238.23 MiB\n238.23 MiB\n\n\nShape\n(732, 241, 177)\n(732, 241, 177)\n\n\nDask graph\n1 chunks in 2 graph layers\n\n\nData type\nfloat64 numpy.ndarray\n\n\n\n\n\n\n\n\n\nug\n\n\n(time, longitude, latitude)\n\n\nfloat64\n\n\ndask.array&lt;chunksize=(732, 241, 177), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\nzonal geostrophic surface current\n\nstandard_name :\n\ngeostrophic_eastward_sea_water_velocity\n\nunits :\n\nm s-1\n\nvalid_min :\n\n-3.0\n\nvalid_max :\n\n3.0\n\ndepth :\n\n15m\n\ncomment :\n\nGeostrophic velocities calculated from absolute dynamic topography\n\nsource :\n\nSSH source: CMEMS SSALTO/DUACS SEALEVEL_GLO_PHY_L4_MY_008_047 DOI: 10.48670/moi-00148\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n238.23 MiB\n238.23 MiB\n\n\nShape\n(732, 241, 177)\n(732, 241, 177)\n\n\nDask graph\n1 chunks in 2 graph layers\n\n\nData type\nfloat64 numpy.ndarray\n\n\n\n\n\n\n\n\n\nvg\n\n\n(time, longitude, latitude)\n\n\nfloat64\n\n\ndask.array&lt;chunksize=(732, 241, 177), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\nmeridional geostrophic surface current\n\nstandard_name :\n\ngeostrophic_northward_sea_water_velocity\n\nunits :\n\nm s-1\n\nvalid_min :\n\n-3.0\n\nvalid_max :\n\n3.0\n\ndepth :\n\n15m\n\ncomment :\n\nGeostrophic velocities calculated from absolute dynamic topography\n\nsource :\n\nSSH source: CMEMS SSALTO/DUACS SEALEVEL_GLO_PHY_L4_MY_008_047 DOI: 10.48670/moi-00148\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n238.23 MiB\n238.23 MiB\n\n\nShape\n(732, 241, 177)\n(732, 241, 177)\n\n\nDask graph\n1 chunks in 2 graph layers\n\n\nData type\nfloat64 numpy.ndarray\n\n\n\n\n\n\n\n\n\nAttributes: (36)title :Ocean Surface Current Analyses Real-time (OSCAR) Surface Currents - Final 0.25 Degree (Version 2.0)summary :Global, daily, 0.25 degree geostrophic and total mixed layer currents averaged over the top 30m. Highest quality OSCAR product.keywords :ocean currents,ocean circulation,surface currents,ekman,geostrophicConventions :CF-1.8 Standard Names v77, ACDD-1.3, netcdf 4.7.3, hdf5 1.8.12id :OSCAR_L4_OC_FINAL_V2.0history :OSCAR 0.25 degree daily version 2.0 replaces OSCAR third degree 5 daysource :OSCAR is based on simplified physics using satellite data; SSH source: CMEMS SSALTO/DUACS SEALEVEL_GLO_PHY_L4_MY_008_047 DOI: 10.48670/moi-00148 ; WIND source: ECMWF ERA5 10m wind DOI: 10.24381/cds.adbb2d47 ; SST source: CMC 0.2 deg SST V2.0 DOI: 10.5067/GHCMC-4FM02processing_level :L4standard_name_vocabulary :NetCDF Climate and Forecast (CF) Metadata Conventionacknowledgment :OSCAR products are supported by NASA and may be freely distributed.product_version :v2.0creator_name :Kathleen Dohancreator_email :kdohan@esr.orgcreator_url :www.esr.org/research/oscar/creator_type :personcreator_institution :ESRinstitution :Earth & Space Researchreferences :www.esr.org/research/oscar/, PO.DAAC user guide, DOI: 10.5067/OSCAR-25F20project :Ocean Surface Current Analyses Real-time (OSCAR)program :OSCARpublisher_name :NASA Physical Oceanography Distributed Active Archive Center (PO.DAAC)publisher_email :podaac@podaac.jpl.nasa.govpublisher_url :podaac.jpl.nasa.govpublisher_type :institutionpublisher_institution :PO.DAACgeospatial_lat_min :-89.75geospatial_lat_max :89.75geospatial_lat_units :degrees_northgeospatial_lat_resolution :0.25 degreegeospatial_lon_min :0.0geospatial_lon_max :359.75geospatial_lon_units :degrees_eastgeospatial_lon_resolution :0.25 degreetime_coverage_start :2000-01-01T00:00:00time_coverage_end :2000-01-01T23:59:59date_created :2022-01-07"
  },
  {
    "objectID": "python-notebooks/02_Get_Points.html",
    "href": "python-notebooks/02_Get_Points.html",
    "title": "Getting Environmental Variables‚Äô Data at a Time-Space instance",
    "section": "",
    "text": "You have a pandas dataframe with time, lat, lon that you got from say reading a csv file.\nYou have a xarray dataset from reading in the zarr file\nGoal is a pandas data from with time, lat, lon, values for all the environmental varables at that time, lat, lon\n\n\nimport xarray as xr\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport holoviews as hv\nimport hvplot.xarray\n\n\n\n\n\n\n\n\n\n\n\n\n# Change the file path accordingly\nda = xr.open_zarr('/home/jovyan/shared/data/INDIAN_OCEAN_025GRID_DAILY.zarr/')\n\n\n# Create some points to select.  These have to be DataArray objects to do vectorized subsetting\nptime = xr.DataArray(['2023-08-09'], dims=['time']) # data is from 1979-01-01 to 2022-12-31\nplat = xr.DataArray([51.5072, 48.8566, 40.7128, 35.6762], dims=['point'])  # Points to select need common dimensions\nplon = xr.DataArray([0.1276, 2.3522, 74.0060, 139.6503], dims=['point'])\n\nda.sel(time=ptime, lat=plat, lon=plon, method='nearest').squeeze().to_pandas()  # Squeeze to drop single time export as pandas series\n\n\n\n\n\n\n\n\nCHL\nCHL_uncertainty\nadt\nair_temp\ncurr_dir\ncurr_speed\nlat\nlon\nmlotst\nsla\n...\ntime\ntopo\nu_curr\nu_wind\nug_curr\nv_curr\nv_wind\nvg_curr\nwind_dir\nwind_speed\n\n\npoint\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\nNaN\nNaN\nNaN\n280.632812\nNaN\nNaN\n32.0\n42.0\nNaN\nNaN\n...\n2022-12-31\n349.0\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n1.909171\n\n\n1\nNaN\nNaN\nNaN\n280.632812\nNaN\nNaN\n32.0\n42.0\nNaN\nNaN\n...\n2022-12-31\n349.0\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n1.909171\n\n\n2\nNaN\nNaN\nNaN\n285.416656\nNaN\nNaN\n32.0\n74.0\nNaN\nNaN\n...\n2022-12-31\n213.0\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n2.412539\n\n\n3\nNaN\nNaN\nNaN\n262.005219\nNaN\nNaN\n32.0\n102.0\nNaN\nNaN\n...\n2022-12-31\n2786.0\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n1.095335\n\n\n\n\n4 rows √ó 22 columns\n\n\n\nProblems\n\nThe points will be a pandas data frame with columns time, lat, lon. How to get the xr.DataArrays that his solution needs.\nSomething off with his code. Probably columns have different names for lat and lon\n\nExperiment with this point csv.\n/home/jovyan/shared/data/species_occ/io-sea-turtles.csv\nNote that the lat and lon column names are weird: decimalLatitude"
  },
  {
    "objectID": "python-notebooks/02_Graphing_Data.html#import-necessary-libraries",
    "href": "python-notebooks/02_Graphing_Data.html#import-necessary-libraries",
    "title": "Graphing Data from our final product",
    "section": "Import necessary libraries",
    "text": "Import necessary libraries\n\n! pip install cmocean\n\nCollecting cmocean\n  Downloading cmocean-3.0.3-py3-none-any.whl (222 kB)\n     ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 222.1/222.1 kB 9.2 MB/s eta 0:00:00\nRequirement already satisfied: matplotlib in /srv/conda/envs/notebook/lib/python3.9/site-packages (from cmocean) (3.7.1)\nRequirement already satisfied: numpy in /srv/conda/envs/notebook/lib/python3.9/site-packages (from cmocean) (1.23.5)\nRequirement already satisfied: packaging in /srv/conda/envs/notebook/lib/python3.9/site-packages (from cmocean) (23.1)\nRequirement already satisfied: contourpy&gt;=1.0.1 in /srv/conda/envs/notebook/lib/python3.9/site-packages (from matplotlib-&gt;cmocean) (1.0.7)\nRequirement already satisfied: cycler&gt;=0.10 in /srv/conda/envs/notebook/lib/python3.9/site-packages (from matplotlib-&gt;cmocean) (0.11.0)\nRequirement already satisfied: fonttools&gt;=4.22.0 in /srv/conda/envs/notebook/lib/python3.9/site-packages (from matplotlib-&gt;cmocean) (4.39.4)\nRequirement already satisfied: kiwisolver&gt;=1.0.1 in /srv/conda/envs/notebook/lib/python3.9/site-packages (from matplotlib-&gt;cmocean) (1.4.4)\nRequirement already satisfied: pillow&gt;=6.2.0 in /srv/conda/envs/notebook/lib/python3.9/site-packages (from matplotlib-&gt;cmocean) (9.5.0)\nRequirement already satisfied: pyparsing&gt;=2.3.1 in /srv/conda/envs/notebook/lib/python3.9/site-packages (from matplotlib-&gt;cmocean) (3.0.9)\nRequirement already satisfied: python-dateutil&gt;=2.7 in /srv/conda/envs/notebook/lib/python3.9/site-packages (from matplotlib-&gt;cmocean) (2.8.2)\nRequirement already satisfied: importlib-resources&gt;=3.2.0 in /srv/conda/envs/notebook/lib/python3.9/site-packages (from matplotlib-&gt;cmocean) (5.12.0)\nRequirement already satisfied: zipp&gt;=3.1.0 in /srv/conda/envs/notebook/lib/python3.9/site-packages (from importlib-resources&gt;=3.2.0-&gt;matplotlib-&gt;cmocean) (3.15.0)\nRequirement already satisfied: six&gt;=1.5 in /srv/conda/envs/notebook/lib/python3.9/site-packages (from python-dateutil&gt;=2.7-&gt;matplotlib-&gt;cmocean) (1.16.0)\nInstalling collected packages: cmocean\nSuccessfully installed cmocean-3.0.3\n\n\n\n! conda install --channel conda-forge pygmt -y\n\nCollecting package metadata (current_repodata.json): done\nSolving environment: done\n\n\n==&gt; WARNING: A newer version of conda exists. &lt;==\n  current version: 22.9.0\n  latest version: 23.5.2\n\nPlease update conda by running\n\n    $ conda update -n base -c conda-forge conda\n\n\n\n## Package Plan ##\n\n  environment location: /srv/conda/envs/notebook\n\n  added / updated specs:\n    - pygmt\n\n\nThe following packages will be downloaded:\n\n    package                    |            build\n    ---------------------------|-----------------\n    dcw-gmt-2.1.1              |       ha770c72_0        21.0 MB  conda-forge\n    fftw-3.3.10                |nompi_hc118613_108         1.9 MB  conda-forge\n    ghostscript-9.54.0         |       h27087fc_2        57.1 MB  conda-forge\n    gmt-6.4.0                  |      h4733502_10        31.0 MB  conda-forge\n    gshhg-gmt-2.3.7            |    ha770c72_1003        54.6 MB  conda-forge\n    openssl-3.1.1              |       hd590300_1         2.5 MB  conda-forge\n    pcre-8.45                  |       h9c3ff4c_0         253 KB  conda-forge\n    pygmt-0.9.0                |     pyhd8ed1ab_0         225 KB  conda-forge\n    ------------------------------------------------------------\n                                           Total:       168.6 MB\n\nThe following NEW packages will be INSTALLED:\n\n  dcw-gmt            conda-forge/linux-64::dcw-gmt-2.1.1-ha770c72_0 None\n  fftw               conda-forge/linux-64::fftw-3.3.10-nompi_hc118613_108 None\n  ghostscript        conda-forge/linux-64::ghostscript-9.54.0-h27087fc_2 None\n  gmt                conda-forge/linux-64::gmt-6.4.0-h4733502_10 None\n  gshhg-gmt          conda-forge/linux-64::gshhg-gmt-2.3.7-ha770c72_1003 None\n  pcre               conda-forge/linux-64::pcre-8.45-h9c3ff4c_0 None\n  pygmt              conda-forge/noarch::pygmt-0.9.0-pyhd8ed1ab_0 None\n\nThe following packages will be UPDATED:\n\n  openssl                                  3.1.0-hd590300_3 --&gt; 3.1.1-hd590300_1 None\n\n\n\nDownloading and Extracting Packages\nfftw-3.3.10          | 1.9 MB    | ##################################### | 100% \ngmt-6.4.0            | 31.0 MB   | ##################################### | 100% \nghostscript-9.54.0   | 57.1 MB   | ##################################### | 100% \npygmt-0.9.0          | 225 KB    | ##################################### | 100% \ngshhg-gmt-2.3.7      | 54.6 MB   | ##################################### | 100% \ndcw-gmt-2.1.1        | 21.0 MB   | ##################################### | 100% \nopenssl-3.1.1        | 2.5 MB    | ##################################### | 100% \npcre-8.45            | 253 KB    | ##################################### | 100% \nPreparing transaction: done\nVerifying transaction: done\nExecuting transaction: done\nRetrieving notices: ...working... done\n\n\n\nimport xarray as xr\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport holoviews as hv\nimport hvplot.xarray\nimport cmocean\nimport cartopy\n\n\n\n\n\n\n\n\n\n\n\n\nimport pygmt"
  },
  {
    "objectID": "python-notebooks/02_Graphing_Data.html#read-data",
    "href": "python-notebooks/02_Graphing_Data.html#read-data",
    "title": "Graphing Data from our final product",
    "section": "Read data",
    "text": "Read data\n\n# Change the file path accordingly\nds = xr.open_zarr('../data/FINAL_IO_025GRID_DAILY.zarr/')\n\n# unsorted time, will fix it later\nds = ds.sortby('time')"
  },
  {
    "objectID": "python-notebooks/02_Graphing_Data.html#slicing-data",
    "href": "python-notebooks/02_Graphing_Data.html#slicing-data",
    "title": "Graphing Data from our final product",
    "section": "Slicing data",
    "text": "Slicing data\n\nds\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:          (time: 8523, lat: 177, lon: 241)\nCoordinates:\n  * lat              (lat) float32 32.0 31.75 31.5 31.25 ... -11.5 -11.75 -12.0\n  * lon              (lon) float32 42.0 42.25 42.5 42.75 ... 101.5 101.8 102.0\n  * time             (time) datetime64[ns] 1997-09-01 1997-09-02 ... 2020-12-31\nData variables: (12/14)\n    CHL              (time, lat, lon) float32 dask.array&lt;chunksize=(29, 177, 241), meta=np.ndarray&gt;\n    CHL_uncertainty  (time, lat, lon) float32 dask.array&lt;chunksize=(29, 177, 241), meta=np.ndarray&gt;\n    adt              (time, lat, lon) float32 dask.array&lt;chunksize=(29, 177, 241), meta=np.ndarray&gt;\n    air_temp         (time, lat, lon) float32 dask.array&lt;chunksize=(29, 177, 241), meta=np.ndarray&gt;\n    direction        (time, lat, lon) float32 dask.array&lt;chunksize=(29, 177, 241), meta=np.ndarray&gt;\n    sla              (time, lat, lon) float32 dask.array&lt;chunksize=(29, 177, 241), meta=np.ndarray&gt;\n    ...               ...\n    u_curr           (time, lat, lon) float32 dask.array&lt;chunksize=(29, 177, 241), meta=np.ndarray&gt;\n    u_wind           (time, lat, lon) float32 dask.array&lt;chunksize=(29, 177, 241), meta=np.ndarray&gt;\n    ug_curr          (time, lat, lon) float32 dask.array&lt;chunksize=(29, 177, 241), meta=np.ndarray&gt;\n    v_curr           (time, lat, lon) float32 dask.array&lt;chunksize=(29, 177, 241), meta=np.ndarray&gt;\n    v_wind           (time, lat, lon) float32 dask.array&lt;chunksize=(29, 177, 241), meta=np.ndarray&gt;\n    vg_curr          (time, lat, lon) float32 dask.array&lt;chunksize=(29, 177, 241), meta=np.ndarray&gt;\nAttributes: (12/17)\n    creator_email:              minhphan@uw.edu\n    creator_name:               Minh Phan\n    creator_type:               person\n    date_created:               2023-07-07\n    geospatial_lat_max:         32.0\n    geospatial_lat_min:         -12.0\n    ...                         ...\n    geospatial_lon_units:       degrees_east\n    source:                     OSCAR, ERA5 Reanalysis, Copernicus Climate Ch...\n    summary:                    Daily mean of 0.25 x 0.25 degrees gridded dat...\n    time_coverage_end:          2020-12-31T23:59:59\n    time_coverage_start:        2000-01-01T00:00:00\n    title:                      Climate Data for Coastal Upwelling Machine Le...xarray.DatasetDimensions:time: 8523lat: 177lon: 241Coordinates: (3)lat(lat)float3232.0 31.75 31.5 ... -11.75 -12.0long_name :latitudestandard_name :latitudeunits :degrees_northarray([ 32.  ,  31.75,  31.5 ,  31.25,  31.  ,  30.75,  30.5 ,  30.25,  30.  ,\n        29.75,  29.5 ,  29.25,  29.  ,  28.75,  28.5 ,  28.25,  28.  ,  27.75,\n        27.5 ,  27.25,  27.  ,  26.75,  26.5 ,  26.25,  26.  ,  25.75,  25.5 ,\n        25.25,  25.  ,  24.75,  24.5 ,  24.25,  24.  ,  23.75,  23.5 ,  23.25,\n        23.  ,  22.75,  22.5 ,  22.25,  22.  ,  21.75,  21.5 ,  21.25,  21.  ,\n        20.75,  20.5 ,  20.25,  20.  ,  19.75,  19.5 ,  19.25,  19.  ,  18.75,\n        18.5 ,  18.25,  18.  ,  17.75,  17.5 ,  17.25,  17.  ,  16.75,  16.5 ,\n        16.25,  16.  ,  15.75,  15.5 ,  15.25,  15.  ,  14.75,  14.5 ,  14.25,\n        14.  ,  13.75,  13.5 ,  13.25,  13.  ,  12.75,  12.5 ,  12.25,  12.  ,\n        11.75,  11.5 ,  11.25,  11.  ,  10.75,  10.5 ,  10.25,  10.  ,   9.75,\n         9.5 ,   9.25,   9.  ,   8.75,   8.5 ,   8.25,   8.  ,   7.75,   7.5 ,\n         7.25,   7.  ,   6.75,   6.5 ,   6.25,   6.  ,   5.75,   5.5 ,   5.25,\n         5.  ,   4.75,   4.5 ,   4.25,   4.  ,   3.75,   3.5 ,   3.25,   3.  ,\n         2.75,   2.5 ,   2.25,   2.  ,   1.75,   1.5 ,   1.25,   1.  ,   0.75,\n         0.5 ,   0.25,   0.  ,  -0.25,  -0.5 ,  -0.75,  -1.  ,  -1.25,  -1.5 ,\n        -1.75,  -2.  ,  -2.25,  -2.5 ,  -2.75,  -3.  ,  -3.25,  -3.5 ,  -3.75,\n        -4.  ,  -4.25,  -4.5 ,  -4.75,  -5.  ,  -5.25,  -5.5 ,  -5.75,  -6.  ,\n        -6.25,  -6.5 ,  -6.75,  -7.  ,  -7.25,  -7.5 ,  -7.75,  -8.  ,  -8.25,\n        -8.5 ,  -8.75,  -9.  ,  -9.25,  -9.5 ,  -9.75, -10.  , -10.25, -10.5 ,\n       -10.75, -11.  , -11.25, -11.5 , -11.75, -12.  ], dtype=float32)lon(lon)float3242.0 42.25 42.5 ... 101.8 102.0long_name :longitudestandard_name :longitudeunits :degrees_eastarray([ 42.  ,  42.25,  42.5 , ..., 101.5 , 101.75, 102.  ], dtype=float32)time(time)datetime64[ns]1997-09-01 ... 2020-12-31axis :Tcomment :Data is averaged over the daylong_name :time centered on the daystandard_name :timetime_bounds :2000-01-01 00:00:00 to 2000-01-01 23:59:59array(['1997-09-01T00:00:00.000000000', '1997-09-02T00:00:00.000000000',\n       '1997-09-03T00:00:00.000000000', ..., '2020-12-29T00:00:00.000000000',\n       '2020-12-30T00:00:00.000000000', '2020-12-31T00:00:00.000000000'],\n      dtype='datetime64[ns]')Data variables: (14)CHL(time, lat, lon)float32dask.array&lt;chunksize=(29, 177, 241), meta=np.ndarray&gt;_ChunkSizes :[1, 256, 256]ancillary_variables :flags CHL_uncertaintycoverage_content_type :modelResultinput_files_reprocessings :Processors versions: MODIS R2022.0NRT/VIIRSN R2022.0NRT/OLCIA 07.02/VIIRSJ1 R2022.0NRT/OLCIB 07.02long_name :Chlorophyll-a concentration - Mean of the binned pixelsstandard_name :mass_concentration_of_chlorophyll_a_in_sea_watertype :surfaceunits :milligram m-3valid_max :1000.0valid_min :0.0\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n1.35 GiB\n16.27 MiB\n\n\nShape\n(8523, 177, 241)\n(100, 177, 241)\n\n\nDask graph\n87 chunks in 3 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\nCHL_uncertainty\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(29, 177, 241), meta=np.ndarray&gt;\n\n\n\n\n_ChunkSizes :\n\n[1, 256, 256]\n\ncoverage_content_type :\n\nqualityInformation\n\nlong_name :\n\nChlorophyll-a concentration - Uncertainty estimation\n\nunits :\n\n%\n\nvalid_max :\n\n32767\n\nvalid_min :\n\n0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n1.35 GiB\n16.27 MiB\n\n\nShape\n(8523, 177, 241)\n(100, 177, 241)\n\n\nDask graph\n87 chunks in 3 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nadt\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(29, 177, 241), meta=np.ndarray&gt;\n\n\n\n\ncomment :\n\nThe absolute dynamic topography is the sea surface height above geoid; the adt is obtained as follows: adt=sla+mdt where mdt is the mean dynamic topography; see the product user manual for details\n\ngrid_mapping :\n\ncrs\n\nlong_name :\n\nAbsolute dynamic topography\n\nstandard_name :\n\nsea_surface_height_above_geoid\n\nunits :\n\nm\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n1.35 GiB\n16.27 MiB\n\n\nShape\n(8523, 177, 241)\n(100, 177, 241)\n\n\nDask graph\n87 chunks in 3 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nair_temp\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(29, 177, 241), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\n2 metre temperature\n\nnameCDM :\n\n2_metre_temperature_surface\n\nnameECMWF :\n\n2 metre temperature\n\nproduct_type :\n\nanalysis\n\nshortNameECMWF :\n\n2t\n\nstandard_name :\n\nair_temperature\n\nunits :\n\nK\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n1.35 GiB\n16.27 MiB\n\n\nShape\n(8523, 177, 241)\n(100, 177, 241)\n\n\nDask graph\n87 chunks in 3 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\ndirection\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(29, 177, 241), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\n10 metre wind direction\n\nunits :\n\n¬∞C\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n1.35 GiB\n16.27 MiB\n\n\nShape\n(8523, 177, 241)\n(100, 177, 241)\n\n\nDask graph\n87 chunks in 3 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nsla\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(29, 177, 241), meta=np.ndarray&gt;\n\n\n\n\nancillary_variables :\n\nerr_sla\n\ncomment :\n\nThe sea level anomaly is the sea surface height above mean sea surface; it is referenced to the [1993, 2012] period; see the product user manual for details\n\ngrid_mapping :\n\ncrs\n\nlong_name :\n\nSea level anomaly\n\nstandard_name :\n\nsea_surface_height_above_sea_level\n\nunits :\n\nm\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n1.35 GiB\n16.27 MiB\n\n\nShape\n(8523, 177, 241)\n(100, 177, 241)\n\n\nDask graph\n87 chunks in 3 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nspeed\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(29, 177, 241), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\n10 metre absolute speed\n\nunits :\n\nm s**-1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n1.35 GiB\n16.27 MiB\n\n\nShape\n(8523, 177, 241)\n(100, 177, 241)\n\n\nDask graph\n87 chunks in 3 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nsst\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(29, 177, 241), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\nSea surface temperature\n\nnameCDM :\n\nSea_surface_temperature_surface\n\nnameECMWF :\n\nSea surface temperature\n\nproduct_type :\n\nanalysis\n\nshortNameECMWF :\n\nsst\n\nstandard_name :\n\nsea_surface_temperature\n\nunits :\n\nK\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n1.35 GiB\n16.27 MiB\n\n\nShape\n(8523, 177, 241)\n(100, 177, 241)\n\n\nDask graph\n87 chunks in 3 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nu_curr\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(29, 177, 241), meta=np.ndarray&gt;\n\n\n\n\ncomment :\n\nVelocities are an average over the top 30m of the mixed layer\n\ncoverage_content_type :\n\nmodelResult\n\ndepth :\n\n15m\n\nlong_name :\n\nzonal total surface current\n\nsource :\n\nSSH source: CMEMS SSALTO/DUACS SEALEVEL_GLO_PHY_L4_MY_008_047 DOI: 10.48670/moi-00148 ; WIND source: ECMWF ERA5 10m wind DOI: 10.24381/cds.adbb2d47 ; SST source: CMC 0.2 deg SST V2.0 DOI: 10.5067/GHCMC-4FM02\n\nstandard_name :\n\neastward_sea_water_velocity\n\nunits :\n\nm s-1\n\nvalid_max :\n\n3.0\n\nvalid_min :\n\n-3.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n1.35 GiB\n16.27 MiB\n\n\nShape\n(8523, 177, 241)\n(100, 177, 241)\n\n\nDask graph\n87 chunks in 3 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nu_wind\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(29, 177, 241), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\n10 metre U wind component\n\nnameCDM :\n\n10_metre_U_wind_component_surface\n\nnameECMWF :\n\n10 metre U wind component\n\nproduct_type :\n\nanalysis\n\nshortNameECMWF :\n\n10u\n\nstandard_name :\n\neastward_wind\n\nunits :\n\nm s**-1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n1.35 GiB\n16.27 MiB\n\n\nShape\n(8523, 177, 241)\n(100, 177, 241)\n\n\nDask graph\n87 chunks in 3 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nug_curr\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(29, 177, 241), meta=np.ndarray&gt;\n\n\n\n\ncomment :\n\nGeostrophic velocities calculated from absolute dynamic topography\n\ndepth :\n\n15m\n\nlong_name :\n\nzonal geostrophic surface current\n\nsource :\n\nSSH source: CMEMS SSALTO/DUACS SEALEVEL_GLO_PHY_L4_MY_008_047 DOI: 10.48670/moi-00148\n\nstandard_name :\n\ngeostrophic_eastward_sea_water_velocity\n\nunits :\n\nm s-1\n\nvalid_max :\n\n3.0\n\nvalid_min :\n\n-3.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n1.35 GiB\n16.27 MiB\n\n\nShape\n(8523, 177, 241)\n(100, 177, 241)\n\n\nDask graph\n87 chunks in 3 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nv_curr\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(29, 177, 241), meta=np.ndarray&gt;\n\n\n\n\ncomment :\n\nVelocities are an average over the top 30m of the mixed layer\n\ncoverage_content_type :\n\nmodelResult\n\ndepth :\n\n15m\n\nlong_name :\n\nmeridional total surface current\n\nsource :\n\nSSH source: CMEMS SSALTO/DUACS SEALEVEL_GLO_PHY_L4_MY_008_047 DOI: 10.48670/moi-00148 ; WIND source: ECMWF ERA5 10m wind DOI: 10.24381/cds.adbb2d47 ; SST source: CMC 0.2 deg SST V2.0 DOI: 10.5067/GHCMC-4FM02\n\nstandard_name :\n\nnorthward_sea_water_velocity\n\nunits :\n\nm s-1\n\nvalid_max :\n\n3.0\n\nvalid_min :\n\n-3.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n1.35 GiB\n16.27 MiB\n\n\nShape\n(8523, 177, 241)\n(100, 177, 241)\n\n\nDask graph\n87 chunks in 3 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nv_wind\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(29, 177, 241), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\n10 metre V wind component\n\nnameCDM :\n\n10_metre_V_wind_component_surface\n\nnameECMWF :\n\n10 metre V wind component\n\nproduct_type :\n\nanalysis\n\nshortNameECMWF :\n\n10v\n\nstandard_name :\n\nnorthward_wind\n\nunits :\n\nm s**-1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n1.35 GiB\n16.27 MiB\n\n\nShape\n(8523, 177, 241)\n(100, 177, 241)\n\n\nDask graph\n87 chunks in 3 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nvg_curr\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(29, 177, 241), meta=np.ndarray&gt;\n\n\n\n\ncomment :\n\nGeostrophic velocities calculated from absolute dynamic topography\n\ndepth :\n\n15m\n\nlong_name :\n\nmeridional geostrophic surface current\n\nsource :\n\nSSH source: CMEMS SSALTO/DUACS SEALEVEL_GLO_PHY_L4_MY_008_047 DOI: 10.48670/moi-00148\n\nstandard_name :\n\ngeostrophic_northward_sea_water_velocity\n\nunits :\n\nm s-1\n\nvalid_max :\n\n3.0\n\nvalid_min :\n\n-3.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n1.35 GiB\n16.27 MiB\n\n\nShape\n(8523, 177, 241)\n(100, 177, 241)\n\n\nDask graph\n87 chunks in 3 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\nAttributes: (17)creator_email :minhphan@uw.educreator_name :Minh Phancreator_type :persondate_created :2023-07-07geospatial_lat_max :32.0geospatial_lat_min :-12.0geospatial_lat_resolution :0.25geospatial_lat_units :degrees_northgeospatial_lon_max :102.0geospatial_lon_min :42.0geospatial_lon_resolution :0.25geospatial_lon_units :degrees_eastsource :OSCAR, ERA5 Reanalysis, Copernicus Climate Change Service (C3S), Copernicus Marine Environment Monitoring Service (CMEMS)summary :Daily mean of 0.25 x 0.25 degrees gridded data from multiple climate variables that may influence the patterns of coastal upwelling in the focused areatime_coverage_end :2020-12-31T23:59:59time_coverage_start :2000-01-01T00:00:00title :Climate Data for Coastal Upwelling Machine Learning Project in Indian Ocean\n\n\nWe can slice data by the dimensions (latitude, longitude, time) and data variables.\n\n# slice by latitude\n# notice how we specify the range in reverse\nds.sel(lat=slice(0, -12))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:          (time: 8523, lat: 49, lon: 241)\nCoordinates:\n  * lat              (lat) float32 0.0 -0.25 -0.5 -0.75 ... -11.5 -11.75 -12.0\n  * lon              (lon) float32 42.0 42.25 42.5 42.75 ... 101.5 101.8 102.0\n  * time             (time) datetime64[ns] 1997-09-01 1997-09-02 ... 2020-12-31\nData variables: (12/14)\n    CHL              (time, lat, lon) float32 dask.array&lt;chunksize=(29, 49, 241), meta=np.ndarray&gt;\n    CHL_uncertainty  (time, lat, lon) float32 dask.array&lt;chunksize=(29, 49, 241), meta=np.ndarray&gt;\n    adt              (time, lat, lon) float32 dask.array&lt;chunksize=(29, 49, 241), meta=np.ndarray&gt;\n    air_temp         (time, lat, lon) float32 dask.array&lt;chunksize=(29, 49, 241), meta=np.ndarray&gt;\n    direction        (time, lat, lon) float32 dask.array&lt;chunksize=(29, 49, 241), meta=np.ndarray&gt;\n    sla              (time, lat, lon) float32 dask.array&lt;chunksize=(29, 49, 241), meta=np.ndarray&gt;\n    ...               ...\n    u_curr           (time, lat, lon) float32 dask.array&lt;chunksize=(29, 49, 241), meta=np.ndarray&gt;\n    u_wind           (time, lat, lon) float32 dask.array&lt;chunksize=(29, 49, 241), meta=np.ndarray&gt;\n    ug_curr          (time, lat, lon) float32 dask.array&lt;chunksize=(29, 49, 241), meta=np.ndarray&gt;\n    v_curr           (time, lat, lon) float32 dask.array&lt;chunksize=(29, 49, 241), meta=np.ndarray&gt;\n    v_wind           (time, lat, lon) float32 dask.array&lt;chunksize=(29, 49, 241), meta=np.ndarray&gt;\n    vg_curr          (time, lat, lon) float32 dask.array&lt;chunksize=(29, 49, 241), meta=np.ndarray&gt;\nAttributes: (12/17)\n    creator_email:              minhphan@uw.edu\n    creator_name:               Minh Phan\n    creator_type:               person\n    date_created:               2023-07-07\n    geospatial_lat_max:         32.0\n    geospatial_lat_min:         -12.0\n    ...                         ...\n    geospatial_lon_units:       degrees_east\n    source:                     OSCAR, ERA5 Reanalysis, Copernicus Climate Ch...\n    summary:                    Daily mean of 0.25 x 0.25 degrees gridded dat...\n    time_coverage_end:          2020-12-31T23:59:59\n    time_coverage_start:        2000-01-01T00:00:00\n    title:                      Climate Data for Coastal Upwelling Machine Le...xarray.DatasetDimensions:time: 8523lat: 49lon: 241Coordinates: (3)lat(lat)float320.0 -0.25 -0.5 ... -11.75 -12.0long_name :latitudestandard_name :latitudeunits :degrees_northarray([  0.  ,  -0.25,  -0.5 ,  -0.75,  -1.  ,  -1.25,  -1.5 ,  -1.75,  -2.  ,\n        -2.25,  -2.5 ,  -2.75,  -3.  ,  -3.25,  -3.5 ,  -3.75,  -4.  ,  -4.25,\n        -4.5 ,  -4.75,  -5.  ,  -5.25,  -5.5 ,  -5.75,  -6.  ,  -6.25,  -6.5 ,\n        -6.75,  -7.  ,  -7.25,  -7.5 ,  -7.75,  -8.  ,  -8.25,  -8.5 ,  -8.75,\n        -9.  ,  -9.25,  -9.5 ,  -9.75, -10.  , -10.25, -10.5 , -10.75, -11.  ,\n       -11.25, -11.5 , -11.75, -12.  ], dtype=float32)lon(lon)float3242.0 42.25 42.5 ... 101.8 102.0long_name :longitudestandard_name :longitudeunits :degrees_eastarray([ 42.  ,  42.25,  42.5 , ..., 101.5 , 101.75, 102.  ], dtype=float32)time(time)datetime64[ns]1997-09-01 ... 2020-12-31axis :Tcomment :Data is averaged over the daylong_name :time centered on the daystandard_name :timetime_bounds :2000-01-01 00:00:00 to 2000-01-01 23:59:59array(['1997-09-01T00:00:00.000000000', '1997-09-02T00:00:00.000000000',\n       '1997-09-03T00:00:00.000000000', ..., '2020-12-29T00:00:00.000000000',\n       '2020-12-30T00:00:00.000000000', '2020-12-31T00:00:00.000000000'],\n      dtype='datetime64[ns]')Data variables: (14)CHL(time, lat, lon)float32dask.array&lt;chunksize=(29, 49, 241), meta=np.ndarray&gt;_ChunkSizes :[1, 256, 256]ancillary_variables :flags CHL_uncertaintycoverage_content_type :modelResultinput_files_reprocessings :Processors versions: MODIS R2022.0NRT/VIIRSN R2022.0NRT/OLCIA 07.02/VIIRSJ1 R2022.0NRT/OLCIB 07.02long_name :Chlorophyll-a concentration - Mean of the binned pixelsstandard_name :mass_concentration_of_chlorophyll_a_in_sea_watertype :surfaceunits :milligram m-3valid_max :1000.0valid_min :0.0\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n383.94 MiB\n4.50 MiB\n\n\nShape\n(8523, 49, 241)\n(100, 49, 241)\n\n\nDask graph\n87 chunks in 4 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\nCHL_uncertainty\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(29, 49, 241), meta=np.ndarray&gt;\n\n\n\n\n_ChunkSizes :\n\n[1, 256, 256]\n\ncoverage_content_type :\n\nqualityInformation\n\nlong_name :\n\nChlorophyll-a concentration - Uncertainty estimation\n\nunits :\n\n%\n\nvalid_max :\n\n32767\n\nvalid_min :\n\n0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n383.94 MiB\n4.50 MiB\n\n\nShape\n(8523, 49, 241)\n(100, 49, 241)\n\n\nDask graph\n87 chunks in 4 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nadt\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(29, 49, 241), meta=np.ndarray&gt;\n\n\n\n\ncomment :\n\nThe absolute dynamic topography is the sea surface height above geoid; the adt is obtained as follows: adt=sla+mdt where mdt is the mean dynamic topography; see the product user manual for details\n\ngrid_mapping :\n\ncrs\n\nlong_name :\n\nAbsolute dynamic topography\n\nstandard_name :\n\nsea_surface_height_above_geoid\n\nunits :\n\nm\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n383.94 MiB\n4.50 MiB\n\n\nShape\n(8523, 49, 241)\n(100, 49, 241)\n\n\nDask graph\n87 chunks in 4 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nair_temp\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(29, 49, 241), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\n2 metre temperature\n\nnameCDM :\n\n2_metre_temperature_surface\n\nnameECMWF :\n\n2 metre temperature\n\nproduct_type :\n\nanalysis\n\nshortNameECMWF :\n\n2t\n\nstandard_name :\n\nair_temperature\n\nunits :\n\nK\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n383.94 MiB\n4.50 MiB\n\n\nShape\n(8523, 49, 241)\n(100, 49, 241)\n\n\nDask graph\n87 chunks in 4 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\ndirection\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(29, 49, 241), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\n10 metre wind direction\n\nunits :\n\n¬∞C\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n383.94 MiB\n4.50 MiB\n\n\nShape\n(8523, 49, 241)\n(100, 49, 241)\n\n\nDask graph\n87 chunks in 4 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nsla\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(29, 49, 241), meta=np.ndarray&gt;\n\n\n\n\nancillary_variables :\n\nerr_sla\n\ncomment :\n\nThe sea level anomaly is the sea surface height above mean sea surface; it is referenced to the [1993, 2012] period; see the product user manual for details\n\ngrid_mapping :\n\ncrs\n\nlong_name :\n\nSea level anomaly\n\nstandard_name :\n\nsea_surface_height_above_sea_level\n\nunits :\n\nm\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n383.94 MiB\n4.50 MiB\n\n\nShape\n(8523, 49, 241)\n(100, 49, 241)\n\n\nDask graph\n87 chunks in 4 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nspeed\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(29, 49, 241), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\n10 metre absolute speed\n\nunits :\n\nm s**-1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n383.94 MiB\n4.50 MiB\n\n\nShape\n(8523, 49, 241)\n(100, 49, 241)\n\n\nDask graph\n87 chunks in 4 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nsst\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(29, 49, 241), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\nSea surface temperature\n\nnameCDM :\n\nSea_surface_temperature_surface\n\nnameECMWF :\n\nSea surface temperature\n\nproduct_type :\n\nanalysis\n\nshortNameECMWF :\n\nsst\n\nstandard_name :\n\nsea_surface_temperature\n\nunits :\n\nK\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n383.94 MiB\n4.50 MiB\n\n\nShape\n(8523, 49, 241)\n(100, 49, 241)\n\n\nDask graph\n87 chunks in 4 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nu_curr\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(29, 49, 241), meta=np.ndarray&gt;\n\n\n\n\ncomment :\n\nVelocities are an average over the top 30m of the mixed layer\n\ncoverage_content_type :\n\nmodelResult\n\ndepth :\n\n15m\n\nlong_name :\n\nzonal total surface current\n\nsource :\n\nSSH source: CMEMS SSALTO/DUACS SEALEVEL_GLO_PHY_L4_MY_008_047 DOI: 10.48670/moi-00148 ; WIND source: ECMWF ERA5 10m wind DOI: 10.24381/cds.adbb2d47 ; SST source: CMC 0.2 deg SST V2.0 DOI: 10.5067/GHCMC-4FM02\n\nstandard_name :\n\neastward_sea_water_velocity\n\nunits :\n\nm s-1\n\nvalid_max :\n\n3.0\n\nvalid_min :\n\n-3.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n383.94 MiB\n4.50 MiB\n\n\nShape\n(8523, 49, 241)\n(100, 49, 241)\n\n\nDask graph\n87 chunks in 4 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nu_wind\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(29, 49, 241), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\n10 metre U wind component\n\nnameCDM :\n\n10_metre_U_wind_component_surface\n\nnameECMWF :\n\n10 metre U wind component\n\nproduct_type :\n\nanalysis\n\nshortNameECMWF :\n\n10u\n\nstandard_name :\n\neastward_wind\n\nunits :\n\nm s**-1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n383.94 MiB\n4.50 MiB\n\n\nShape\n(8523, 49, 241)\n(100, 49, 241)\n\n\nDask graph\n87 chunks in 4 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nug_curr\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(29, 49, 241), meta=np.ndarray&gt;\n\n\n\n\ncomment :\n\nGeostrophic velocities calculated from absolute dynamic topography\n\ndepth :\n\n15m\n\nlong_name :\n\nzonal geostrophic surface current\n\nsource :\n\nSSH source: CMEMS SSALTO/DUACS SEALEVEL_GLO_PHY_L4_MY_008_047 DOI: 10.48670/moi-00148\n\nstandard_name :\n\ngeostrophic_eastward_sea_water_velocity\n\nunits :\n\nm s-1\n\nvalid_max :\n\n3.0\n\nvalid_min :\n\n-3.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n383.94 MiB\n4.50 MiB\n\n\nShape\n(8523, 49, 241)\n(100, 49, 241)\n\n\nDask graph\n87 chunks in 4 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nv_curr\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(29, 49, 241), meta=np.ndarray&gt;\n\n\n\n\ncomment :\n\nVelocities are an average over the top 30m of the mixed layer\n\ncoverage_content_type :\n\nmodelResult\n\ndepth :\n\n15m\n\nlong_name :\n\nmeridional total surface current\n\nsource :\n\nSSH source: CMEMS SSALTO/DUACS SEALEVEL_GLO_PHY_L4_MY_008_047 DOI: 10.48670/moi-00148 ; WIND source: ECMWF ERA5 10m wind DOI: 10.24381/cds.adbb2d47 ; SST source: CMC 0.2 deg SST V2.0 DOI: 10.5067/GHCMC-4FM02\n\nstandard_name :\n\nnorthward_sea_water_velocity\n\nunits :\n\nm s-1\n\nvalid_max :\n\n3.0\n\nvalid_min :\n\n-3.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n383.94 MiB\n4.50 MiB\n\n\nShape\n(8523, 49, 241)\n(100, 49, 241)\n\n\nDask graph\n87 chunks in 4 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nv_wind\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(29, 49, 241), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\n10 metre V wind component\n\nnameCDM :\n\n10_metre_V_wind_component_surface\n\nnameECMWF :\n\n10 metre V wind component\n\nproduct_type :\n\nanalysis\n\nshortNameECMWF :\n\n10v\n\nstandard_name :\n\nnorthward_wind\n\nunits :\n\nm s**-1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n383.94 MiB\n4.50 MiB\n\n\nShape\n(8523, 49, 241)\n(100, 49, 241)\n\n\nDask graph\n87 chunks in 4 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nvg_curr\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(29, 49, 241), meta=np.ndarray&gt;\n\n\n\n\ncomment :\n\nGeostrophic velocities calculated from absolute dynamic topography\n\ndepth :\n\n15m\n\nlong_name :\n\nmeridional geostrophic surface current\n\nsource :\n\nSSH source: CMEMS SSALTO/DUACS SEALEVEL_GLO_PHY_L4_MY_008_047 DOI: 10.48670/moi-00148\n\nstandard_name :\n\ngeostrophic_northward_sea_water_velocity\n\nunits :\n\nm s-1\n\nvalid_max :\n\n3.0\n\nvalid_min :\n\n-3.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n383.94 MiB\n4.50 MiB\n\n\nShape\n(8523, 49, 241)\n(100, 49, 241)\n\n\nDask graph\n87 chunks in 4 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\nAttributes: (17)creator_email :minhphan@uw.educreator_name :Minh Phancreator_type :persondate_created :2023-07-07geospatial_lat_max :32.0geospatial_lat_min :-12.0geospatial_lat_resolution :0.25geospatial_lat_units :degrees_northgeospatial_lon_max :102.0geospatial_lon_min :42.0geospatial_lon_resolution :0.25geospatial_lon_units :degrees_eastsource :OSCAR, ERA5 Reanalysis, Copernicus Climate Change Service (C3S), Copernicus Marine Environment Monitoring Service (CMEMS)summary :Daily mean of 0.25 x 0.25 degrees gridded data from multiple climate variables that may influence the patterns of coastal upwelling in the focused areatime_coverage_end :2020-12-31T23:59:59time_coverage_start :2000-01-01T00:00:00title :Climate Data for Coastal Upwelling Machine Learning Project in Indian Ocean\n\n\n\n# slice by longitude\nds.sel(lon=slice(42, 45))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:          (time: 8523, lat: 177, lon: 13)\nCoordinates:\n  * lat              (lat) float32 32.0 31.75 31.5 31.25 ... -11.5 -11.75 -12.0\n  * lon              (lon) float32 42.0 42.25 42.5 42.75 ... 44.5 44.75 45.0\n  * time             (time) datetime64[ns] 1997-09-01 1997-09-02 ... 2020-12-31\nData variables: (12/14)\n    CHL              (time, lat, lon) float32 dask.array&lt;chunksize=(29, 177, 13), meta=np.ndarray&gt;\n    CHL_uncertainty  (time, lat, lon) float32 dask.array&lt;chunksize=(29, 177, 13), meta=np.ndarray&gt;\n    adt              (time, lat, lon) float32 dask.array&lt;chunksize=(29, 177, 13), meta=np.ndarray&gt;\n    air_temp         (time, lat, lon) float32 dask.array&lt;chunksize=(29, 177, 13), meta=np.ndarray&gt;\n    direction        (time, lat, lon) float32 dask.array&lt;chunksize=(29, 177, 13), meta=np.ndarray&gt;\n    sla              (time, lat, lon) float32 dask.array&lt;chunksize=(29, 177, 13), meta=np.ndarray&gt;\n    ...               ...\n    u_curr           (time, lat, lon) float32 dask.array&lt;chunksize=(29, 177, 13), meta=np.ndarray&gt;\n    u_wind           (time, lat, lon) float32 dask.array&lt;chunksize=(29, 177, 13), meta=np.ndarray&gt;\n    ug_curr          (time, lat, lon) float32 dask.array&lt;chunksize=(29, 177, 13), meta=np.ndarray&gt;\n    v_curr           (time, lat, lon) float32 dask.array&lt;chunksize=(29, 177, 13), meta=np.ndarray&gt;\n    v_wind           (time, lat, lon) float32 dask.array&lt;chunksize=(29, 177, 13), meta=np.ndarray&gt;\n    vg_curr          (time, lat, lon) float32 dask.array&lt;chunksize=(29, 177, 13), meta=np.ndarray&gt;\nAttributes: (12/17)\n    creator_email:              minhphan@uw.edu\n    creator_name:               Minh Phan\n    creator_type:               person\n    date_created:               2023-07-07\n    geospatial_lat_max:         32.0\n    geospatial_lat_min:         -12.0\n    ...                         ...\n    geospatial_lon_units:       degrees_east\n    source:                     OSCAR, ERA5 Reanalysis, Copernicus Climate Ch...\n    summary:                    Daily mean of 0.25 x 0.25 degrees gridded dat...\n    time_coverage_end:          2020-12-31T23:59:59\n    time_coverage_start:        2000-01-01T00:00:00\n    title:                      Climate Data for Coastal Upwelling Machine Le...xarray.DatasetDimensions:time: 8523lat: 177lon: 13Coordinates: (3)lat(lat)float3232.0 31.75 31.5 ... -11.75 -12.0long_name :latitudestandard_name :latitudeunits :degrees_northarray([ 32.  ,  31.75,  31.5 ,  31.25,  31.  ,  30.75,  30.5 ,  30.25,  30.  ,\n        29.75,  29.5 ,  29.25,  29.  ,  28.75,  28.5 ,  28.25,  28.  ,  27.75,\n        27.5 ,  27.25,  27.  ,  26.75,  26.5 ,  26.25,  26.  ,  25.75,  25.5 ,\n        25.25,  25.  ,  24.75,  24.5 ,  24.25,  24.  ,  23.75,  23.5 ,  23.25,\n        23.  ,  22.75,  22.5 ,  22.25,  22.  ,  21.75,  21.5 ,  21.25,  21.  ,\n        20.75,  20.5 ,  20.25,  20.  ,  19.75,  19.5 ,  19.25,  19.  ,  18.75,\n        18.5 ,  18.25,  18.  ,  17.75,  17.5 ,  17.25,  17.  ,  16.75,  16.5 ,\n        16.25,  16.  ,  15.75,  15.5 ,  15.25,  15.  ,  14.75,  14.5 ,  14.25,\n        14.  ,  13.75,  13.5 ,  13.25,  13.  ,  12.75,  12.5 ,  12.25,  12.  ,\n        11.75,  11.5 ,  11.25,  11.  ,  10.75,  10.5 ,  10.25,  10.  ,   9.75,\n         9.5 ,   9.25,   9.  ,   8.75,   8.5 ,   8.25,   8.  ,   7.75,   7.5 ,\n         7.25,   7.  ,   6.75,   6.5 ,   6.25,   6.  ,   5.75,   5.5 ,   5.25,\n         5.  ,   4.75,   4.5 ,   4.25,   4.  ,   3.75,   3.5 ,   3.25,   3.  ,\n         2.75,   2.5 ,   2.25,   2.  ,   1.75,   1.5 ,   1.25,   1.  ,   0.75,\n         0.5 ,   0.25,   0.  ,  -0.25,  -0.5 ,  -0.75,  -1.  ,  -1.25,  -1.5 ,\n        -1.75,  -2.  ,  -2.25,  -2.5 ,  -2.75,  -3.  ,  -3.25,  -3.5 ,  -3.75,\n        -4.  ,  -4.25,  -4.5 ,  -4.75,  -5.  ,  -5.25,  -5.5 ,  -5.75,  -6.  ,\n        -6.25,  -6.5 ,  -6.75,  -7.  ,  -7.25,  -7.5 ,  -7.75,  -8.  ,  -8.25,\n        -8.5 ,  -8.75,  -9.  ,  -9.25,  -9.5 ,  -9.75, -10.  , -10.25, -10.5 ,\n       -10.75, -11.  , -11.25, -11.5 , -11.75, -12.  ], dtype=float32)lon(lon)float3242.0 42.25 42.5 ... 44.5 44.75 45.0long_name :longitudestandard_name :longitudeunits :degrees_eastarray([42.  , 42.25, 42.5 , 42.75, 43.  , 43.25, 43.5 , 43.75, 44.  , 44.25,\n       44.5 , 44.75, 45.  ], dtype=float32)time(time)datetime64[ns]1997-09-01 ... 2020-12-31axis :Tcomment :Data is averaged over the daylong_name :time centered on the daystandard_name :timetime_bounds :2000-01-01 00:00:00 to 2000-01-01 23:59:59array(['1997-09-01T00:00:00.000000000', '1997-09-02T00:00:00.000000000',\n       '1997-09-03T00:00:00.000000000', ..., '2020-12-29T00:00:00.000000000',\n       '2020-12-30T00:00:00.000000000', '2020-12-31T00:00:00.000000000'],\n      dtype='datetime64[ns]')Data variables: (14)CHL(time, lat, lon)float32dask.array&lt;chunksize=(29, 177, 13), meta=np.ndarray&gt;_ChunkSizes :[1, 256, 256]ancillary_variables :flags CHL_uncertaintycoverage_content_type :modelResultinput_files_reprocessings :Processors versions: MODIS R2022.0NRT/VIIRSN R2022.0NRT/OLCIA 07.02/VIIRSJ1 R2022.0NRT/OLCIB 07.02long_name :Chlorophyll-a concentration - Mean of the binned pixelsstandard_name :mass_concentration_of_chlorophyll_a_in_sea_watertype :surfaceunits :milligram m-3valid_max :1000.0valid_min :0.0\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n74.81 MiB\n898.83 kiB\n\n\nShape\n(8523, 177, 13)\n(100, 177, 13)\n\n\nDask graph\n87 chunks in 4 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\nCHL_uncertainty\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(29, 177, 13), meta=np.ndarray&gt;\n\n\n\n\n_ChunkSizes :\n\n[1, 256, 256]\n\ncoverage_content_type :\n\nqualityInformation\n\nlong_name :\n\nChlorophyll-a concentration - Uncertainty estimation\n\nunits :\n\n%\n\nvalid_max :\n\n32767\n\nvalid_min :\n\n0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n74.81 MiB\n898.83 kiB\n\n\nShape\n(8523, 177, 13)\n(100, 177, 13)\n\n\nDask graph\n87 chunks in 4 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nadt\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(29, 177, 13), meta=np.ndarray&gt;\n\n\n\n\ncomment :\n\nThe absolute dynamic topography is the sea surface height above geoid; the adt is obtained as follows: adt=sla+mdt where mdt is the mean dynamic topography; see the product user manual for details\n\ngrid_mapping :\n\ncrs\n\nlong_name :\n\nAbsolute dynamic topography\n\nstandard_name :\n\nsea_surface_height_above_geoid\n\nunits :\n\nm\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n74.81 MiB\n898.83 kiB\n\n\nShape\n(8523, 177, 13)\n(100, 177, 13)\n\n\nDask graph\n87 chunks in 4 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nair_temp\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(29, 177, 13), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\n2 metre temperature\n\nnameCDM :\n\n2_metre_temperature_surface\n\nnameECMWF :\n\n2 metre temperature\n\nproduct_type :\n\nanalysis\n\nshortNameECMWF :\n\n2t\n\nstandard_name :\n\nair_temperature\n\nunits :\n\nK\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n74.81 MiB\n898.83 kiB\n\n\nShape\n(8523, 177, 13)\n(100, 177, 13)\n\n\nDask graph\n87 chunks in 4 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\ndirection\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(29, 177, 13), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\n10 metre wind direction\n\nunits :\n\n¬∞C\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n74.81 MiB\n898.83 kiB\n\n\nShape\n(8523, 177, 13)\n(100, 177, 13)\n\n\nDask graph\n87 chunks in 4 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nsla\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(29, 177, 13), meta=np.ndarray&gt;\n\n\n\n\nancillary_variables :\n\nerr_sla\n\ncomment :\n\nThe sea level anomaly is the sea surface height above mean sea surface; it is referenced to the [1993, 2012] period; see the product user manual for details\n\ngrid_mapping :\n\ncrs\n\nlong_name :\n\nSea level anomaly\n\nstandard_name :\n\nsea_surface_height_above_sea_level\n\nunits :\n\nm\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n74.81 MiB\n898.83 kiB\n\n\nShape\n(8523, 177, 13)\n(100, 177, 13)\n\n\nDask graph\n87 chunks in 4 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nspeed\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(29, 177, 13), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\n10 metre absolute speed\n\nunits :\n\nm s**-1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n74.81 MiB\n898.83 kiB\n\n\nShape\n(8523, 177, 13)\n(100, 177, 13)\n\n\nDask graph\n87 chunks in 4 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nsst\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(29, 177, 13), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\nSea surface temperature\n\nnameCDM :\n\nSea_surface_temperature_surface\n\nnameECMWF :\n\nSea surface temperature\n\nproduct_type :\n\nanalysis\n\nshortNameECMWF :\n\nsst\n\nstandard_name :\n\nsea_surface_temperature\n\nunits :\n\nK\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n74.81 MiB\n898.83 kiB\n\n\nShape\n(8523, 177, 13)\n(100, 177, 13)\n\n\nDask graph\n87 chunks in 4 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nu_curr\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(29, 177, 13), meta=np.ndarray&gt;\n\n\n\n\ncomment :\n\nVelocities are an average over the top 30m of the mixed layer\n\ncoverage_content_type :\n\nmodelResult\n\ndepth :\n\n15m\n\nlong_name :\n\nzonal total surface current\n\nsource :\n\nSSH source: CMEMS SSALTO/DUACS SEALEVEL_GLO_PHY_L4_MY_008_047 DOI: 10.48670/moi-00148 ; WIND source: ECMWF ERA5 10m wind DOI: 10.24381/cds.adbb2d47 ; SST source: CMC 0.2 deg SST V2.0 DOI: 10.5067/GHCMC-4FM02\n\nstandard_name :\n\neastward_sea_water_velocity\n\nunits :\n\nm s-1\n\nvalid_max :\n\n3.0\n\nvalid_min :\n\n-3.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n74.81 MiB\n898.83 kiB\n\n\nShape\n(8523, 177, 13)\n(100, 177, 13)\n\n\nDask graph\n87 chunks in 4 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nu_wind\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(29, 177, 13), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\n10 metre U wind component\n\nnameCDM :\n\n10_metre_U_wind_component_surface\n\nnameECMWF :\n\n10 metre U wind component\n\nproduct_type :\n\nanalysis\n\nshortNameECMWF :\n\n10u\n\nstandard_name :\n\neastward_wind\n\nunits :\n\nm s**-1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n74.81 MiB\n898.83 kiB\n\n\nShape\n(8523, 177, 13)\n(100, 177, 13)\n\n\nDask graph\n87 chunks in 4 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nug_curr\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(29, 177, 13), meta=np.ndarray&gt;\n\n\n\n\ncomment :\n\nGeostrophic velocities calculated from absolute dynamic topography\n\ndepth :\n\n15m\n\nlong_name :\n\nzonal geostrophic surface current\n\nsource :\n\nSSH source: CMEMS SSALTO/DUACS SEALEVEL_GLO_PHY_L4_MY_008_047 DOI: 10.48670/moi-00148\n\nstandard_name :\n\ngeostrophic_eastward_sea_water_velocity\n\nunits :\n\nm s-1\n\nvalid_max :\n\n3.0\n\nvalid_min :\n\n-3.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n74.81 MiB\n898.83 kiB\n\n\nShape\n(8523, 177, 13)\n(100, 177, 13)\n\n\nDask graph\n87 chunks in 4 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nv_curr\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(29, 177, 13), meta=np.ndarray&gt;\n\n\n\n\ncomment :\n\nVelocities are an average over the top 30m of the mixed layer\n\ncoverage_content_type :\n\nmodelResult\n\ndepth :\n\n15m\n\nlong_name :\n\nmeridional total surface current\n\nsource :\n\nSSH source: CMEMS SSALTO/DUACS SEALEVEL_GLO_PHY_L4_MY_008_047 DOI: 10.48670/moi-00148 ; WIND source: ECMWF ERA5 10m wind DOI: 10.24381/cds.adbb2d47 ; SST source: CMC 0.2 deg SST V2.0 DOI: 10.5067/GHCMC-4FM02\n\nstandard_name :\n\nnorthward_sea_water_velocity\n\nunits :\n\nm s-1\n\nvalid_max :\n\n3.0\n\nvalid_min :\n\n-3.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n74.81 MiB\n898.83 kiB\n\n\nShape\n(8523, 177, 13)\n(100, 177, 13)\n\n\nDask graph\n87 chunks in 4 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nv_wind\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(29, 177, 13), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\n10 metre V wind component\n\nnameCDM :\n\n10_metre_V_wind_component_surface\n\nnameECMWF :\n\n10 metre V wind component\n\nproduct_type :\n\nanalysis\n\nshortNameECMWF :\n\n10v\n\nstandard_name :\n\nnorthward_wind\n\nunits :\n\nm s**-1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n74.81 MiB\n898.83 kiB\n\n\nShape\n(8523, 177, 13)\n(100, 177, 13)\n\n\nDask graph\n87 chunks in 4 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nvg_curr\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(29, 177, 13), meta=np.ndarray&gt;\n\n\n\n\ncomment :\n\nGeostrophic velocities calculated from absolute dynamic topography\n\ndepth :\n\n15m\n\nlong_name :\n\nmeridional geostrophic surface current\n\nsource :\n\nSSH source: CMEMS SSALTO/DUACS SEALEVEL_GLO_PHY_L4_MY_008_047 DOI: 10.48670/moi-00148\n\nstandard_name :\n\ngeostrophic_northward_sea_water_velocity\n\nunits :\n\nm s-1\n\nvalid_max :\n\n3.0\n\nvalid_min :\n\n-3.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n74.81 MiB\n898.83 kiB\n\n\nShape\n(8523, 177, 13)\n(100, 177, 13)\n\n\nDask graph\n87 chunks in 4 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\nAttributes: (17)creator_email :minhphan@uw.educreator_name :Minh Phancreator_type :persondate_created :2023-07-07geospatial_lat_max :32.0geospatial_lat_min :-12.0geospatial_lat_resolution :0.25geospatial_lat_units :degrees_northgeospatial_lon_max :102.0geospatial_lon_min :42.0geospatial_lon_resolution :0.25geospatial_lon_units :degrees_eastsource :OSCAR, ERA5 Reanalysis, Copernicus Climate Change Service (C3S), Copernicus Marine Environment Monitoring Service (CMEMS)summary :Daily mean of 0.25 x 0.25 degrees gridded data from multiple climate variables that may influence the patterns of coastal upwelling in the focused areatime_coverage_end :2020-12-31T23:59:59time_coverage_start :2000-01-01T00:00:00title :Climate Data for Coastal Upwelling Machine Learning Project in Indian Ocean\n\n\n\n# slice by time\nds.sel(time=slice('1998', '1999'))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:          (time: 730, lat: 177, lon: 241)\nCoordinates:\n  * lat              (lat) float32 32.0 31.75 31.5 31.25 ... -11.5 -11.75 -12.0\n  * lon              (lon) float32 42.0 42.25 42.5 42.75 ... 101.5 101.8 102.0\n  * time             (time) datetime64[ns] 1998-01-01 1998-01-02 ... 1999-12-31\nData variables: (12/14)\n    CHL              (time, lat, lon) float32 dask.array&lt;chunksize=(7, 177, 241), meta=np.ndarray&gt;\n    CHL_uncertainty  (time, lat, lon) float32 dask.array&lt;chunksize=(7, 177, 241), meta=np.ndarray&gt;\n    adt              (time, lat, lon) float32 dask.array&lt;chunksize=(7, 177, 241), meta=np.ndarray&gt;\n    air_temp         (time, lat, lon) float32 dask.array&lt;chunksize=(7, 177, 241), meta=np.ndarray&gt;\n    direction        (time, lat, lon) float32 dask.array&lt;chunksize=(7, 177, 241), meta=np.ndarray&gt;\n    sla              (time, lat, lon) float32 dask.array&lt;chunksize=(7, 177, 241), meta=np.ndarray&gt;\n    ...               ...\n    u_curr           (time, lat, lon) float32 dask.array&lt;chunksize=(7, 177, 241), meta=np.ndarray&gt;\n    u_wind           (time, lat, lon) float32 dask.array&lt;chunksize=(7, 177, 241), meta=np.ndarray&gt;\n    ug_curr          (time, lat, lon) float32 dask.array&lt;chunksize=(7, 177, 241), meta=np.ndarray&gt;\n    v_curr           (time, lat, lon) float32 dask.array&lt;chunksize=(7, 177, 241), meta=np.ndarray&gt;\n    v_wind           (time, lat, lon) float32 dask.array&lt;chunksize=(7, 177, 241), meta=np.ndarray&gt;\n    vg_curr          (time, lat, lon) float32 dask.array&lt;chunksize=(7, 177, 241), meta=np.ndarray&gt;\nAttributes: (12/17)\n    creator_email:              minhphan@uw.edu\n    creator_name:               Minh Phan\n    creator_type:               person\n    date_created:               2023-07-07\n    geospatial_lat_max:         32.0\n    geospatial_lat_min:         -12.0\n    ...                         ...\n    geospatial_lon_units:       degrees_east\n    source:                     OSCAR, ERA5 Reanalysis, Copernicus Climate Ch...\n    summary:                    Daily mean of 0.25 x 0.25 degrees gridded dat...\n    time_coverage_end:          2020-12-31T23:59:59\n    time_coverage_start:        2000-01-01T00:00:00\n    title:                      Climate Data for Coastal Upwelling Machine Le...xarray.DatasetDimensions:time: 730lat: 177lon: 241Coordinates: (3)lat(lat)float3232.0 31.75 31.5 ... -11.75 -12.0long_name :latitudestandard_name :latitudeunits :degrees_northarray([ 32.  ,  31.75,  31.5 ,  31.25,  31.  ,  30.75,  30.5 ,  30.25,  30.  ,\n        29.75,  29.5 ,  29.25,  29.  ,  28.75,  28.5 ,  28.25,  28.  ,  27.75,\n        27.5 ,  27.25,  27.  ,  26.75,  26.5 ,  26.25,  26.  ,  25.75,  25.5 ,\n        25.25,  25.  ,  24.75,  24.5 ,  24.25,  24.  ,  23.75,  23.5 ,  23.25,\n        23.  ,  22.75,  22.5 ,  22.25,  22.  ,  21.75,  21.5 ,  21.25,  21.  ,\n        20.75,  20.5 ,  20.25,  20.  ,  19.75,  19.5 ,  19.25,  19.  ,  18.75,\n        18.5 ,  18.25,  18.  ,  17.75,  17.5 ,  17.25,  17.  ,  16.75,  16.5 ,\n        16.25,  16.  ,  15.75,  15.5 ,  15.25,  15.  ,  14.75,  14.5 ,  14.25,\n        14.  ,  13.75,  13.5 ,  13.25,  13.  ,  12.75,  12.5 ,  12.25,  12.  ,\n        11.75,  11.5 ,  11.25,  11.  ,  10.75,  10.5 ,  10.25,  10.  ,   9.75,\n         9.5 ,   9.25,   9.  ,   8.75,   8.5 ,   8.25,   8.  ,   7.75,   7.5 ,\n         7.25,   7.  ,   6.75,   6.5 ,   6.25,   6.  ,   5.75,   5.5 ,   5.25,\n         5.  ,   4.75,   4.5 ,   4.25,   4.  ,   3.75,   3.5 ,   3.25,   3.  ,\n         2.75,   2.5 ,   2.25,   2.  ,   1.75,   1.5 ,   1.25,   1.  ,   0.75,\n         0.5 ,   0.25,   0.  ,  -0.25,  -0.5 ,  -0.75,  -1.  ,  -1.25,  -1.5 ,\n        -1.75,  -2.  ,  -2.25,  -2.5 ,  -2.75,  -3.  ,  -3.25,  -3.5 ,  -3.75,\n        -4.  ,  -4.25,  -4.5 ,  -4.75,  -5.  ,  -5.25,  -5.5 ,  -5.75,  -6.  ,\n        -6.25,  -6.5 ,  -6.75,  -7.  ,  -7.25,  -7.5 ,  -7.75,  -8.  ,  -8.25,\n        -8.5 ,  -8.75,  -9.  ,  -9.25,  -9.5 ,  -9.75, -10.  , -10.25, -10.5 ,\n       -10.75, -11.  , -11.25, -11.5 , -11.75, -12.  ], dtype=float32)lon(lon)float3242.0 42.25 42.5 ... 101.8 102.0long_name :longitudestandard_name :longitudeunits :degrees_eastarray([ 42.  ,  42.25,  42.5 , ..., 101.5 , 101.75, 102.  ], dtype=float32)time(time)datetime64[ns]1998-01-01 ... 1999-12-31axis :Tcomment :Data is averaged over the daylong_name :time centered on the daystandard_name :timetime_bounds :2000-01-01 00:00:00 to 2000-01-01 23:59:59array(['1998-01-01T00:00:00.000000000', '1998-01-02T00:00:00.000000000',\n       '1998-01-03T00:00:00.000000000', ..., '1999-12-29T00:00:00.000000000',\n       '1999-12-30T00:00:00.000000000', '1999-12-31T00:00:00.000000000'],\n      dtype='datetime64[ns]')Data variables: (14)CHL(time, lat, lon)float32dask.array&lt;chunksize=(7, 177, 241), meta=np.ndarray&gt;_ChunkSizes :[1, 256, 256]ancillary_variables :flags CHL_uncertaintycoverage_content_type :modelResultinput_files_reprocessings :Processors versions: MODIS R2022.0NRT/VIIRSN R2022.0NRT/OLCIA 07.02/VIIRSJ1 R2022.0NRT/OLCIB 07.02long_name :Chlorophyll-a concentration - Mean of the binned pixelsstandard_name :mass_concentration_of_chlorophyll_a_in_sea_watertype :surfaceunits :milligram m-3valid_max :1000.0valid_min :0.0\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n118.79 MiB\n16.27 MiB\n\n\nShape\n(730, 177, 241)\n(100, 177, 241)\n\n\nDask graph\n9 chunks in 4 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\nCHL_uncertainty\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(7, 177, 241), meta=np.ndarray&gt;\n\n\n\n\n_ChunkSizes :\n\n[1, 256, 256]\n\ncoverage_content_type :\n\nqualityInformation\n\nlong_name :\n\nChlorophyll-a concentration - Uncertainty estimation\n\nunits :\n\n%\n\nvalid_max :\n\n32767\n\nvalid_min :\n\n0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n118.79 MiB\n16.27 MiB\n\n\nShape\n(730, 177, 241)\n(100, 177, 241)\n\n\nDask graph\n9 chunks in 4 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nadt\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(7, 177, 241), meta=np.ndarray&gt;\n\n\n\n\ncomment :\n\nThe absolute dynamic topography is the sea surface height above geoid; the adt is obtained as follows: adt=sla+mdt where mdt is the mean dynamic topography; see the product user manual for details\n\ngrid_mapping :\n\ncrs\n\nlong_name :\n\nAbsolute dynamic topography\n\nstandard_name :\n\nsea_surface_height_above_geoid\n\nunits :\n\nm\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n118.79 MiB\n16.27 MiB\n\n\nShape\n(730, 177, 241)\n(100, 177, 241)\n\n\nDask graph\n9 chunks in 4 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nair_temp\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(7, 177, 241), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\n2 metre temperature\n\nnameCDM :\n\n2_metre_temperature_surface\n\nnameECMWF :\n\n2 metre temperature\n\nproduct_type :\n\nanalysis\n\nshortNameECMWF :\n\n2t\n\nstandard_name :\n\nair_temperature\n\nunits :\n\nK\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n118.79 MiB\n16.27 MiB\n\n\nShape\n(730, 177, 241)\n(100, 177, 241)\n\n\nDask graph\n9 chunks in 4 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\ndirection\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(7, 177, 241), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\n10 metre wind direction\n\nunits :\n\n¬∞C\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n118.79 MiB\n16.27 MiB\n\n\nShape\n(730, 177, 241)\n(100, 177, 241)\n\n\nDask graph\n9 chunks in 4 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nsla\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(7, 177, 241), meta=np.ndarray&gt;\n\n\n\n\nancillary_variables :\n\nerr_sla\n\ncomment :\n\nThe sea level anomaly is the sea surface height above mean sea surface; it is referenced to the [1993, 2012] period; see the product user manual for details\n\ngrid_mapping :\n\ncrs\n\nlong_name :\n\nSea level anomaly\n\nstandard_name :\n\nsea_surface_height_above_sea_level\n\nunits :\n\nm\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n118.79 MiB\n16.27 MiB\n\n\nShape\n(730, 177, 241)\n(100, 177, 241)\n\n\nDask graph\n9 chunks in 4 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nspeed\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(7, 177, 241), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\n10 metre absolute speed\n\nunits :\n\nm s**-1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n118.79 MiB\n16.27 MiB\n\n\nShape\n(730, 177, 241)\n(100, 177, 241)\n\n\nDask graph\n9 chunks in 4 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nsst\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(7, 177, 241), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\nSea surface temperature\n\nnameCDM :\n\nSea_surface_temperature_surface\n\nnameECMWF :\n\nSea surface temperature\n\nproduct_type :\n\nanalysis\n\nshortNameECMWF :\n\nsst\n\nstandard_name :\n\nsea_surface_temperature\n\nunits :\n\nK\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n118.79 MiB\n16.27 MiB\n\n\nShape\n(730, 177, 241)\n(100, 177, 241)\n\n\nDask graph\n9 chunks in 4 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nu_curr\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(7, 177, 241), meta=np.ndarray&gt;\n\n\n\n\ncomment :\n\nVelocities are an average over the top 30m of the mixed layer\n\ncoverage_content_type :\n\nmodelResult\n\ndepth :\n\n15m\n\nlong_name :\n\nzonal total surface current\n\nsource :\n\nSSH source: CMEMS SSALTO/DUACS SEALEVEL_GLO_PHY_L4_MY_008_047 DOI: 10.48670/moi-00148 ; WIND source: ECMWF ERA5 10m wind DOI: 10.24381/cds.adbb2d47 ; SST source: CMC 0.2 deg SST V2.0 DOI: 10.5067/GHCMC-4FM02\n\nstandard_name :\n\neastward_sea_water_velocity\n\nunits :\n\nm s-1\n\nvalid_max :\n\n3.0\n\nvalid_min :\n\n-3.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n118.79 MiB\n16.27 MiB\n\n\nShape\n(730, 177, 241)\n(100, 177, 241)\n\n\nDask graph\n9 chunks in 4 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nu_wind\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(7, 177, 241), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\n10 metre U wind component\n\nnameCDM :\n\n10_metre_U_wind_component_surface\n\nnameECMWF :\n\n10 metre U wind component\n\nproduct_type :\n\nanalysis\n\nshortNameECMWF :\n\n10u\n\nstandard_name :\n\neastward_wind\n\nunits :\n\nm s**-1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n118.79 MiB\n16.27 MiB\n\n\nShape\n(730, 177, 241)\n(100, 177, 241)\n\n\nDask graph\n9 chunks in 4 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nug_curr\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(7, 177, 241), meta=np.ndarray&gt;\n\n\n\n\ncomment :\n\nGeostrophic velocities calculated from absolute dynamic topography\n\ndepth :\n\n15m\n\nlong_name :\n\nzonal geostrophic surface current\n\nsource :\n\nSSH source: CMEMS SSALTO/DUACS SEALEVEL_GLO_PHY_L4_MY_008_047 DOI: 10.48670/moi-00148\n\nstandard_name :\n\ngeostrophic_eastward_sea_water_velocity\n\nunits :\n\nm s-1\n\nvalid_max :\n\n3.0\n\nvalid_min :\n\n-3.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n118.79 MiB\n16.27 MiB\n\n\nShape\n(730, 177, 241)\n(100, 177, 241)\n\n\nDask graph\n9 chunks in 4 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nv_curr\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(7, 177, 241), meta=np.ndarray&gt;\n\n\n\n\ncomment :\n\nVelocities are an average over the top 30m of the mixed layer\n\ncoverage_content_type :\n\nmodelResult\n\ndepth :\n\n15m\n\nlong_name :\n\nmeridional total surface current\n\nsource :\n\nSSH source: CMEMS SSALTO/DUACS SEALEVEL_GLO_PHY_L4_MY_008_047 DOI: 10.48670/moi-00148 ; WIND source: ECMWF ERA5 10m wind DOI: 10.24381/cds.adbb2d47 ; SST source: CMC 0.2 deg SST V2.0 DOI: 10.5067/GHCMC-4FM02\n\nstandard_name :\n\nnorthward_sea_water_velocity\n\nunits :\n\nm s-1\n\nvalid_max :\n\n3.0\n\nvalid_min :\n\n-3.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n118.79 MiB\n16.27 MiB\n\n\nShape\n(730, 177, 241)\n(100, 177, 241)\n\n\nDask graph\n9 chunks in 4 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nv_wind\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(7, 177, 241), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\n10 metre V wind component\n\nnameCDM :\n\n10_metre_V_wind_component_surface\n\nnameECMWF :\n\n10 metre V wind component\n\nproduct_type :\n\nanalysis\n\nshortNameECMWF :\n\n10v\n\nstandard_name :\n\nnorthward_wind\n\nunits :\n\nm s**-1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n118.79 MiB\n16.27 MiB\n\n\nShape\n(730, 177, 241)\n(100, 177, 241)\n\n\nDask graph\n9 chunks in 4 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nvg_curr\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(7, 177, 241), meta=np.ndarray&gt;\n\n\n\n\ncomment :\n\nGeostrophic velocities calculated from absolute dynamic topography\n\ndepth :\n\n15m\n\nlong_name :\n\nmeridional geostrophic surface current\n\nsource :\n\nSSH source: CMEMS SSALTO/DUACS SEALEVEL_GLO_PHY_L4_MY_008_047 DOI: 10.48670/moi-00148\n\nstandard_name :\n\ngeostrophic_northward_sea_water_velocity\n\nunits :\n\nm s-1\n\nvalid_max :\n\n3.0\n\nvalid_min :\n\n-3.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n118.79 MiB\n16.27 MiB\n\n\nShape\n(730, 177, 241)\n(100, 177, 241)\n\n\nDask graph\n9 chunks in 4 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\nAttributes: (17)creator_email :minhphan@uw.educreator_name :Minh Phancreator_type :persondate_created :2023-07-07geospatial_lat_max :32.0geospatial_lat_min :-12.0geospatial_lat_resolution :0.25geospatial_lat_units :degrees_northgeospatial_lon_max :102.0geospatial_lon_min :42.0geospatial_lon_resolution :0.25geospatial_lon_units :degrees_eastsource :OSCAR, ERA5 Reanalysis, Copernicus Climate Change Service (C3S), Copernicus Marine Environment Monitoring Service (CMEMS)summary :Daily mean of 0.25 x 0.25 degrees gridded data from multiple climate variables that may influence the patterns of coastal upwelling in the focused areatime_coverage_end :2020-12-31T23:59:59time_coverage_start :2000-01-01T00:00:00title :Climate Data for Coastal Upwelling Machine Learning Project in Indian Ocean\n\n\n\n# slice by variable\nds[['u_curr', 'u_wind']]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:  (time: 8523, lat: 177, lon: 241)\nCoordinates:\n  * lat      (lat) float32 32.0 31.75 31.5 31.25 ... -11.25 -11.5 -11.75 -12.0\n  * lon      (lon) float32 42.0 42.25 42.5 42.75 ... 101.2 101.5 101.8 102.0\n  * time     (time) datetime64[ns] 1997-09-01 1997-09-02 ... 2020-12-31\nData variables:\n    u_curr   (time, lat, lon) float32 dask.array&lt;chunksize=(29, 177, 241), meta=np.ndarray&gt;\n    u_wind   (time, lat, lon) float32 dask.array&lt;chunksize=(29, 177, 241), meta=np.ndarray&gt;\nAttributes: (12/17)\n    creator_email:              minhphan@uw.edu\n    creator_name:               Minh Phan\n    creator_type:               person\n    date_created:               2023-07-07\n    geospatial_lat_max:         32.0\n    geospatial_lat_min:         -12.0\n    ...                         ...\n    geospatial_lon_units:       degrees_east\n    source:                     OSCAR, ERA5 Reanalysis, Copernicus Climate Ch...\n    summary:                    Daily mean of 0.25 x 0.25 degrees gridded dat...\n    time_coverage_end:          2020-12-31T23:59:59\n    time_coverage_start:        2000-01-01T00:00:00\n    title:                      Climate Data for Coastal Upwelling Machine Le...xarray.DatasetDimensions:time: 8523lat: 177lon: 241Coordinates: (3)lat(lat)float3232.0 31.75 31.5 ... -11.75 -12.0long_name :latitudestandard_name :latitudeunits :degrees_northarray([ 32.  ,  31.75,  31.5 ,  31.25,  31.  ,  30.75,  30.5 ,  30.25,  30.  ,\n        29.75,  29.5 ,  29.25,  29.  ,  28.75,  28.5 ,  28.25,  28.  ,  27.75,\n        27.5 ,  27.25,  27.  ,  26.75,  26.5 ,  26.25,  26.  ,  25.75,  25.5 ,\n        25.25,  25.  ,  24.75,  24.5 ,  24.25,  24.  ,  23.75,  23.5 ,  23.25,\n        23.  ,  22.75,  22.5 ,  22.25,  22.  ,  21.75,  21.5 ,  21.25,  21.  ,\n        20.75,  20.5 ,  20.25,  20.  ,  19.75,  19.5 ,  19.25,  19.  ,  18.75,\n        18.5 ,  18.25,  18.  ,  17.75,  17.5 ,  17.25,  17.  ,  16.75,  16.5 ,\n        16.25,  16.  ,  15.75,  15.5 ,  15.25,  15.  ,  14.75,  14.5 ,  14.25,\n        14.  ,  13.75,  13.5 ,  13.25,  13.  ,  12.75,  12.5 ,  12.25,  12.  ,\n        11.75,  11.5 ,  11.25,  11.  ,  10.75,  10.5 ,  10.25,  10.  ,   9.75,\n         9.5 ,   9.25,   9.  ,   8.75,   8.5 ,   8.25,   8.  ,   7.75,   7.5 ,\n         7.25,   7.  ,   6.75,   6.5 ,   6.25,   6.  ,   5.75,   5.5 ,   5.25,\n         5.  ,   4.75,   4.5 ,   4.25,   4.  ,   3.75,   3.5 ,   3.25,   3.  ,\n         2.75,   2.5 ,   2.25,   2.  ,   1.75,   1.5 ,   1.25,   1.  ,   0.75,\n         0.5 ,   0.25,   0.  ,  -0.25,  -0.5 ,  -0.75,  -1.  ,  -1.25,  -1.5 ,\n        -1.75,  -2.  ,  -2.25,  -2.5 ,  -2.75,  -3.  ,  -3.25,  -3.5 ,  -3.75,\n        -4.  ,  -4.25,  -4.5 ,  -4.75,  -5.  ,  -5.25,  -5.5 ,  -5.75,  -6.  ,\n        -6.25,  -6.5 ,  -6.75,  -7.  ,  -7.25,  -7.5 ,  -7.75,  -8.  ,  -8.25,\n        -8.5 ,  -8.75,  -9.  ,  -9.25,  -9.5 ,  -9.75, -10.  , -10.25, -10.5 ,\n       -10.75, -11.  , -11.25, -11.5 , -11.75, -12.  ], dtype=float32)lon(lon)float3242.0 42.25 42.5 ... 101.8 102.0long_name :longitudestandard_name :longitudeunits :degrees_eastarray([ 42.  ,  42.25,  42.5 , ..., 101.5 , 101.75, 102.  ], dtype=float32)time(time)datetime64[ns]1997-09-01 ... 2020-12-31axis :Tcomment :Data is averaged over the daylong_name :time centered on the daystandard_name :timetime_bounds :2000-01-01 00:00:00 to 2000-01-01 23:59:59array(['1997-09-01T00:00:00.000000000', '1997-09-02T00:00:00.000000000',\n       '1997-09-03T00:00:00.000000000', ..., '2020-12-29T00:00:00.000000000',\n       '2020-12-30T00:00:00.000000000', '2020-12-31T00:00:00.000000000'],\n      dtype='datetime64[ns]')Data variables: (2)u_curr(time, lat, lon)float32dask.array&lt;chunksize=(29, 177, 241), meta=np.ndarray&gt;comment :Velocities are an average over the top 30m of the mixed layercoverage_content_type :modelResultdepth :15mlong_name :zonal total surface currentsource :SSH source: CMEMS SSALTO/DUACS SEALEVEL_GLO_PHY_L4_MY_008_047 DOI: 10.48670/moi-00148 ; WIND source: ECMWF ERA5 10m wind DOI: 10.24381/cds.adbb2d47 ; SST source: CMC 0.2 deg SST V2.0 DOI: 10.5067/GHCMC-4FM02standard_name :eastward_sea_water_velocityunits :m s-1valid_max :3.0valid_min :-3.0\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n1.35 GiB\n16.27 MiB\n\n\nShape\n(8523, 177, 241)\n(100, 177, 241)\n\n\nDask graph\n87 chunks in 3 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\nu_wind\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(29, 177, 241), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\n10 metre U wind component\n\nnameCDM :\n\n10_metre_U_wind_component_surface\n\nnameECMWF :\n\n10 metre U wind component\n\nproduct_type :\n\nanalysis\n\nshortNameECMWF :\n\n10u\n\nstandard_name :\n\neastward_wind\n\nunits :\n\nm s**-1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n1.35 GiB\n16.27 MiB\n\n\nShape\n(8523, 177, 241)\n(100, 177, 241)\n\n\nDask graph\n87 chunks in 3 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\nAttributes: (17)creator_email :minhphan@uw.educreator_name :Minh Phancreator_type :persondate_created :2023-07-07geospatial_lat_max :32.0geospatial_lat_min :-12.0geospatial_lat_resolution :0.25geospatial_lat_units :degrees_northgeospatial_lon_max :102.0geospatial_lon_min :42.0geospatial_lon_resolution :0.25geospatial_lon_units :degrees_eastsource :OSCAR, ERA5 Reanalysis, Copernicus Climate Change Service (C3S), Copernicus Marine Environment Monitoring Service (CMEMS)summary :Daily mean of 0.25 x 0.25 degrees gridded data from multiple climate variables that may influence the patterns of coastal upwelling in the focused areatime_coverage_end :2020-12-31T23:59:59time_coverage_start :2000-01-01T00:00:00title :Climate Data for Coastal Upwelling Machine Learning Project in Indian Ocean\n\n\n\n# combine multiple slicing options all at once\nds[['u_curr', 'u_wind']].sel(time=slice('1998', '1999'), \n                             lat=slice(0, -12), \n                             lon=slice(42, 45))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:  (time: 730, lat: 49, lon: 13)\nCoordinates:\n  * lat      (lat) float32 0.0 -0.25 -0.5 -0.75 ... -11.25 -11.5 -11.75 -12.0\n  * lon      (lon) float32 42.0 42.25 42.5 42.75 43.0 ... 44.25 44.5 44.75 45.0\n  * time     (time) datetime64[ns] 1998-01-01 1998-01-02 ... 1999-12-31\nData variables:\n    u_curr   (time, lat, lon) float32 dask.array&lt;chunksize=(7, 49, 13), meta=np.ndarray&gt;\n    u_wind   (time, lat, lon) float32 dask.array&lt;chunksize=(7, 49, 13), meta=np.ndarray&gt;\nAttributes: (12/17)\n    creator_email:              minhphan@uw.edu\n    creator_name:               Minh Phan\n    creator_type:               person\n    date_created:               2023-07-07\n    geospatial_lat_max:         32.0\n    geospatial_lat_min:         -12.0\n    ...                         ...\n    geospatial_lon_units:       degrees_east\n    source:                     OSCAR, ERA5 Reanalysis, Copernicus Climate Ch...\n    summary:                    Daily mean of 0.25 x 0.25 degrees gridded dat...\n    time_coverage_end:          2020-12-31T23:59:59\n    time_coverage_start:        2000-01-01T00:00:00\n    title:                      Climate Data for Coastal Upwelling Machine Le...xarray.DatasetDimensions:time: 730lat: 49lon: 13Coordinates: (3)lat(lat)float320.0 -0.25 -0.5 ... -11.75 -12.0long_name :latitudestandard_name :latitudeunits :degrees_northarray([  0.  ,  -0.25,  -0.5 ,  -0.75,  -1.  ,  -1.25,  -1.5 ,  -1.75,  -2.  ,\n        -2.25,  -2.5 ,  -2.75,  -3.  ,  -3.25,  -3.5 ,  -3.75,  -4.  ,  -4.25,\n        -4.5 ,  -4.75,  -5.  ,  -5.25,  -5.5 ,  -5.75,  -6.  ,  -6.25,  -6.5 ,\n        -6.75,  -7.  ,  -7.25,  -7.5 ,  -7.75,  -8.  ,  -8.25,  -8.5 ,  -8.75,\n        -9.  ,  -9.25,  -9.5 ,  -9.75, -10.  , -10.25, -10.5 , -10.75, -11.  ,\n       -11.25, -11.5 , -11.75, -12.  ], dtype=float32)lon(lon)float3242.0 42.25 42.5 ... 44.5 44.75 45.0long_name :longitudestandard_name :longitudeunits :degrees_eastarray([42.  , 42.25, 42.5 , 42.75, 43.  , 43.25, 43.5 , 43.75, 44.  , 44.25,\n       44.5 , 44.75, 45.  ], dtype=float32)time(time)datetime64[ns]1998-01-01 ... 1999-12-31axis :Tcomment :Data is averaged over the daylong_name :time centered on the daystandard_name :timetime_bounds :2000-01-01 00:00:00 to 2000-01-01 23:59:59array(['1998-01-01T00:00:00.000000000', '1998-01-02T00:00:00.000000000',\n       '1998-01-03T00:00:00.000000000', ..., '1999-12-29T00:00:00.000000000',\n       '1999-12-30T00:00:00.000000000', '1999-12-31T00:00:00.000000000'],\n      dtype='datetime64[ns]')Data variables: (2)u_curr(time, lat, lon)float32dask.array&lt;chunksize=(7, 49, 13), meta=np.ndarray&gt;comment :Velocities are an average over the top 30m of the mixed layercoverage_content_type :modelResultdepth :15mlong_name :zonal total surface currentsource :SSH source: CMEMS SSALTO/DUACS SEALEVEL_GLO_PHY_L4_MY_008_047 DOI: 10.48670/moi-00148 ; WIND source: ECMWF ERA5 10m wind DOI: 10.24381/cds.adbb2d47 ; SST source: CMC 0.2 deg SST V2.0 DOI: 10.5067/GHCMC-4FM02standard_name :eastward_sea_water_velocityunits :m s-1valid_max :3.0valid_min :-3.0\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n1.77 MiB\n248.83 kiB\n\n\nShape\n(730, 49, 13)\n(100, 49, 13)\n\n\nDask graph\n9 chunks in 4 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\nu_wind\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(7, 49, 13), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\n10 metre U wind component\n\nnameCDM :\n\n10_metre_U_wind_component_surface\n\nnameECMWF :\n\n10 metre U wind component\n\nproduct_type :\n\nanalysis\n\nshortNameECMWF :\n\n10u\n\nstandard_name :\n\neastward_wind\n\nunits :\n\nm s**-1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n1.77 MiB\n248.83 kiB\n\n\nShape\n(730, 49, 13)\n(100, 49, 13)\n\n\nDask graph\n9 chunks in 4 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\nAttributes: (17)creator_email :minhphan@uw.educreator_name :Minh Phancreator_type :persondate_created :2023-07-07geospatial_lat_max :32.0geospatial_lat_min :-12.0geospatial_lat_resolution :0.25geospatial_lat_units :degrees_northgeospatial_lon_max :102.0geospatial_lon_min :42.0geospatial_lon_resolution :0.25geospatial_lon_units :degrees_eastsource :OSCAR, ERA5 Reanalysis, Copernicus Climate Change Service (C3S), Copernicus Marine Environment Monitoring Service (CMEMS)summary :Daily mean of 0.25 x 0.25 degrees gridded data from multiple climate variables that may influence the patterns of coastal upwelling in the focused areatime_coverage_end :2020-12-31T23:59:59time_coverage_start :2000-01-01T00:00:00title :Climate Data for Coastal Upwelling Machine Learning Project in Indian Ocean"
  },
  {
    "objectID": "python-notebooks/02_Graphing_Data.html#basic-data-graphing",
    "href": "python-notebooks/02_Graphing_Data.html#basic-data-graphing",
    "title": "Graphing Data from our final product",
    "section": "Basic data graphing",
    "text": "Basic data graphing\nWe can also graph the data right from slicing, especially heatmaps from 2D arrays, or line charts. This is especially useful when we want to inspect elements on the go.\n\n# make sure that the array you slice for a heatmap visualization is a 2D array\nheatmap_arr = ds['speed'].sel(time='2000-01-02')\nheatmap_arr\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.DataArray 'speed' (lat: 177, lon: 241)&gt;\ndask.array&lt;getitem, shape=(177, 241), dtype=float32, chunksize=(177, 241), chunktype=numpy.ndarray&gt;\nCoordinates:\n  * lat      (lat) float32 32.0 31.75 31.5 31.25 ... -11.25 -11.5 -11.75 -12.0\n  * lon      (lon) float32 42.0 42.25 42.5 42.75 ... 101.2 101.5 101.8 102.0\n    time     datetime64[ns] 2000-01-02\nAttributes:\n    long_name:  10 metre absolute speed\n    units:      m s**-1xarray.DataArray'speed'lat: 177lon: 241dask.array&lt;chunksize=(177, 241), meta=np.ndarray&gt;\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n166.63 kiB\n166.63 kiB\n\n\nShape\n(177, 241)\n(177, 241)\n\n\nDask graph\n1 chunks in 4 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\nCoordinates: (3)lat(lat)float3232.0 31.75 31.5 ... -11.75 -12.0long_name :latitudestandard_name :latitudeunits :degrees_northarray([ 32.  ,  31.75,  31.5 ,  31.25,  31.  ,  30.75,  30.5 ,  30.25,  30.  ,\n        29.75,  29.5 ,  29.25,  29.  ,  28.75,  28.5 ,  28.25,  28.  ,  27.75,\n        27.5 ,  27.25,  27.  ,  26.75,  26.5 ,  26.25,  26.  ,  25.75,  25.5 ,\n        25.25,  25.  ,  24.75,  24.5 ,  24.25,  24.  ,  23.75,  23.5 ,  23.25,\n        23.  ,  22.75,  22.5 ,  22.25,  22.  ,  21.75,  21.5 ,  21.25,  21.  ,\n        20.75,  20.5 ,  20.25,  20.  ,  19.75,  19.5 ,  19.25,  19.  ,  18.75,\n        18.5 ,  18.25,  18.  ,  17.75,  17.5 ,  17.25,  17.  ,  16.75,  16.5 ,\n        16.25,  16.  ,  15.75,  15.5 ,  15.25,  15.  ,  14.75,  14.5 ,  14.25,\n        14.  ,  13.75,  13.5 ,  13.25,  13.  ,  12.75,  12.5 ,  12.25,  12.  ,\n        11.75,  11.5 ,  11.25,  11.  ,  10.75,  10.5 ,  10.25,  10.  ,   9.75,\n         9.5 ,   9.25,   9.  ,   8.75,   8.5 ,   8.25,   8.  ,   7.75,   7.5 ,\n         7.25,   7.  ,   6.75,   6.5 ,   6.25,   6.  ,   5.75,   5.5 ,   5.25,\n         5.  ,   4.75,   4.5 ,   4.25,   4.  ,   3.75,   3.5 ,   3.25,   3.  ,\n         2.75,   2.5 ,   2.25,   2.  ,   1.75,   1.5 ,   1.25,   1.  ,   0.75,\n         0.5 ,   0.25,   0.  ,  -0.25,  -0.5 ,  -0.75,  -1.  ,  -1.25,  -1.5 ,\n        -1.75,  -2.  ,  -2.25,  -2.5 ,  -2.75,  -3.  ,  -3.25,  -3.5 ,  -3.75,\n        -4.  ,  -4.25,  -4.5 ,  -4.75,  -5.  ,  -5.25,  -5.5 ,  -5.75,  -6.  ,\n        -6.25,  -6.5 ,  -6.75,  -7.  ,  -7.25,  -7.5 ,  -7.75,  -8.  ,  -8.25,\n        -8.5 ,  -8.75,  -9.  ,  -9.25,  -9.5 ,  -9.75, -10.  , -10.25, -10.5 ,\n       -10.75, -11.  , -11.25, -11.5 , -11.75, -12.  ], dtype=float32)lon(lon)float3242.0 42.25 42.5 ... 101.8 102.0long_name :longitudestandard_name :longitudeunits :degrees_eastarray([ 42.  ,  42.25,  42.5 , ..., 101.5 , 101.75, 102.  ], dtype=float32)time()datetime64[ns]2000-01-02axis :Tcomment :Data is averaged over the daylong_name :time centered on the daystandard_name :timetime_bounds :2000-01-01 00:00:00 to 2000-01-01 23:59:59array('2000-01-02T00:00:00.000000000', dtype='datetime64[ns]')Attributes: (2)long_name :10 metre absolute speedunits :m s**-1\n\n\n\n2D array graphing with matplotlib\nBy default, graphing arrays with Xarray is done using matplotlib.\nFor 2D arrays we have multiple options to choose for our graphs\n\nHeatmaps\n\nheatmap_arr.plot.imshow()\n\n&lt;matplotlib.image.AxesImage at 0x7f55c4c574c0&gt;\n\n\n\n\n\n\n\nContour maps\n\n# contour map with no filling\nheatmap_arr.plot.contour()\n\n&lt;matplotlib.contour.QuadContourSet at 0x7f55c41ead60&gt;\n\n\n\n\n\n\n# contour map with color filling\nheatmap_arr.plot.contourf()\n\n&lt;matplotlib.contour.QuadContourSet at 0x7f55c40b8a90&gt;\n\n\n\n\n\n\n\nSurface plot\n\nheatmap_arr.plot.surface()\n\n&lt;mpl_toolkits.mplot3d.art3d.Poly3DCollection at 0x7f55b4f46fd0&gt;\n\n\n\n\n\n\n\n\n1D array graphing with Matplotlib\nWe can also plot line graphs if our data is presented in 1D arrays. For the example below, we average our wind speed over the whole area and plot it over time. Matplotlib automatically infers what graph to create if you don‚Äôt explicitly call which one to. This piece of code below is a demonstration:\n\nds['speed'].mean(dim=['lat', 'lon']).plot(figsize=(10, 5))\n\n\n\n\nWe can add in parameters to customize our graphs, as additional arguments are passed to the underlying matplotlib plot() function.\n\nds['air_temp'].mean(dim=['lat', 'lon']).sel(time=slice('2007', '2009')).plot.line('r-o', figsize=(10,5), markersize=1)\n\n\n\n\n\n# creating a new Axe object if there is no currently\n# available one\nax = plt.gca() \nds['direction'].plot.hist(ax = ax)\nax.set_xlabel('10 metre wind direction (degrees east)')\nax.set_ylabel('frequency')\nax.set_title('Daily average wind direction distribution over covered area (1979-2022)')\n\nText(0.5, 1.0, 'Daily average wind direction distribution over covered area (1979-2022)')\n\n\n\n\n\n\n\nGraphing with holoviews\nXarray also support graphing using holoviews if you want interactive visualizations.\n\n# scroll along the axes to stretch the graph\nheatmap_arr.hvplot().options(cmap='bgy', width=600, height=500)\n\n\n\n\n\n  \n\n\n\n\n\n# resampling is having issues, so this is a temporary solution using Pandas \n# to perform resampling by month on one range...\n\n# choose a small range just in case overloadding happens...\n\nds_to_resample = ds['CHL'].sel(lat=slice(10, 5), lon=slice(75, 80)).to_dataframe()\n\n\ndf_resampled = ds_to_resample.groupby([pd.Grouper(freq='1M', level='time'),\n                        pd.Grouper(level='lon'),\n                        pd.Grouper(level='lat')]).mean()\n\n\nds_resampled = xr.Dataset.from_dataframe(df_resampled)\n\nWe can see that after resampling, our time dimension size is reduced from 8523 (days) to 280 (months). Resampling is successful!\n\n# original ds_to_resample object before converting to dataframe\nds['CHL'].sel(lat=slice(10, 5), lon=slice(75, 80))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.DataArray 'CHL' (time: 8523, lat: 21, lon: 21)&gt;\ndask.array&lt;getitem, shape=(8523, 21, 21), dtype=float32, chunksize=(100, 21, 21), chunktype=numpy.ndarray&gt;\nCoordinates:\n  * lat      (lat) float32 10.0 9.75 9.5 9.25 9.0 8.75 ... 6.0 5.75 5.5 5.25 5.0\n  * lon      (lon) float32 75.0 75.25 75.5 75.75 76.0 ... 79.25 79.5 79.75 80.0\n  * time     (time) datetime64[ns] 1997-09-01 1997-09-02 ... 2020-12-31\nAttributes:\n    _ChunkSizes:                [1, 256, 256]\n    ancillary_variables:        flags CHL_uncertainty\n    coverage_content_type:      modelResult\n    input_files_reprocessings:  Processors versions: MODIS R2022.0NRT/VIIRSN ...\n    long_name:                  Chlorophyll-a concentration - Mean of the bin...\n    standard_name:              mass_concentration_of_chlorophyll_a_in_sea_water\n    type:                       surface\n    units:                      milligram m-3\n    valid_max:                  1000.0\n    valid_min:                  0.0xarray.DataArray'CHL'time: 8523lat: 21lon: 21dask.array&lt;chunksize=(29, 21, 21), meta=np.ndarray&gt;\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n14.34 MiB\n172.27 kiB\n\n\nShape\n(8523, 21, 21)\n(100, 21, 21)\n\n\nDask graph\n87 chunks in 4 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\nCoordinates: (3)lat(lat)float3210.0 9.75 9.5 9.25 ... 5.5 5.25 5.0long_name :latitudestandard_name :latitudeunits :degrees_northarray([10.  ,  9.75,  9.5 ,  9.25,  9.  ,  8.75,  8.5 ,  8.25,  8.  ,  7.75,\n        7.5 ,  7.25,  7.  ,  6.75,  6.5 ,  6.25,  6.  ,  5.75,  5.5 ,  5.25,\n        5.  ], dtype=float32)lon(lon)float3275.0 75.25 75.5 ... 79.5 79.75 80.0long_name :longitudestandard_name :longitudeunits :degrees_eastarray([75.  , 75.25, 75.5 , 75.75, 76.  , 76.25, 76.5 , 76.75, 77.  , 77.25,\n       77.5 , 77.75, 78.  , 78.25, 78.5 , 78.75, 79.  , 79.25, 79.5 , 79.75,\n       80.  ], dtype=float32)time(time)datetime64[ns]1997-09-01 ... 2020-12-31axis :Tcomment :Data is averaged over the daylong_name :time centered on the daystandard_name :timetime_bounds :2000-01-01 00:00:00 to 2000-01-01 23:59:59array(['1997-09-01T00:00:00.000000000', '1997-09-02T00:00:00.000000000',\n       '1997-09-03T00:00:00.000000000', ..., '2020-12-29T00:00:00.000000000',\n       '2020-12-30T00:00:00.000000000', '2020-12-31T00:00:00.000000000'],\n      dtype='datetime64[ns]')Attributes: (10)_ChunkSizes :[1, 256, 256]ancillary_variables :flags CHL_uncertaintycoverage_content_type :modelResultinput_files_reprocessings :Processors versions: MODIS R2022.0NRT/VIIRSN R2022.0NRT/OLCIA 07.02/VIIRSJ1 R2022.0NRT/OLCIB 07.02long_name :Chlorophyll-a concentration - Mean of the binned pixelsstandard_name :mass_concentration_of_chlorophyll_a_in_sea_watertype :surfaceunits :milligram m-3valid_max :1000.0valid_min :0.0\n\n\n\nds_resampled\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:  (time: 280, lon: 21, lat: 21)\nCoordinates:\n  * time     (time) datetime64[ns] 1997-09-30 1997-10-31 ... 2020-12-31\n  * lon      (lon) float32 75.0 75.25 75.5 75.75 76.0 ... 79.25 79.5 79.75 80.0\n  * lat      (lat) float32 5.0 5.25 5.5 5.75 6.0 6.25 ... 9.0 9.25 9.5 9.75 10.0\nData variables:\n    CHL      (time, lon, lat) float32 0.1385 0.1499 0.1564 ... 3.708 nan 1.711xarray.DatasetDimensions:time: 280lon: 21lat: 21Coordinates: (3)time(time)datetime64[ns]1997-09-30 ... 2020-12-31array(['1997-09-30T00:00:00.000000000', '1997-10-31T00:00:00.000000000',\n       '1997-11-30T00:00:00.000000000', ..., '2020-10-31T00:00:00.000000000',\n       '2020-11-30T00:00:00.000000000', '2020-12-31T00:00:00.000000000'],\n      dtype='datetime64[ns]')lon(lon)float3275.0 75.25 75.5 ... 79.5 79.75 80.0array([75.  , 75.25, 75.5 , 75.75, 76.  , 76.25, 76.5 , 76.75, 77.  , 77.25,\n       77.5 , 77.75, 78.  , 78.25, 78.5 , 78.75, 79.  , 79.25, 79.5 , 79.75,\n       80.  ], dtype=float32)lat(lat)float325.0 5.25 5.5 5.75 ... 9.5 9.75 10.0array([ 5.  ,  5.25,  5.5 ,  5.75,  6.  ,  6.25,  6.5 ,  6.75,  7.  ,  7.25,\n        7.5 ,  7.75,  8.  ,  8.25,  8.5 ,  8.75,  9.  ,  9.25,  9.5 ,  9.75,\n       10.  ], dtype=float32)Data variables: (1)CHL(time, lon, lat)float320.1385 0.1499 0.1564 ... nan 1.711array([[[0.1385212 , 0.1498749 , 0.1563529 , ..., 0.3523786 ,\n         0.3302194 , 0.27931017],\n        [0.13932636, 0.15005617, 0.16188657, ..., 0.27985424,\n         0.25826713, 0.25897202],\n        [0.13675058, 0.15252402, 0.16407087, ..., 0.27715033,\n         0.29253623, 0.3230303 ],\n        ...,\n        [0.1495098 , 0.15891236, 0.18904588, ..., 0.8308414 ,\n         0.74546653, 0.86624825],\n        [0.15241794, 0.16238719, 0.18823716, ..., 0.79390526,\n         0.7422508 , 0.7233521 ],\n        [0.1451448 , 0.16036132, 0.18141416, ..., 0.8997232 ,\n                nan, 0.96131516]],\n\n       [[0.1093621 , 0.10374813, 0.10539079, ..., 0.13424906,\n         0.13703308, 0.14298904],\n        [0.10377687, 0.10544709, 0.10046278, ..., 0.13290247,\n         0.15486094, 0.1702798 ],\n        [0.10687282, 0.10397465, 0.1069003 , ..., 0.15223369,\n         0.1741167 , 0.20661627],\n...\n        [0.5205713 , 0.36632097, 0.2877642 , ..., 1.2882708 ,\n         1.2678039 , 1.5669655 ],\n        [0.51227796, 0.28432006, 0.2710863 , ..., 1.7268424 ,\n         1.5777267 , 1.7181929 ],\n        [0.39916685, 0.2676246 , 0.27991247, ..., 3.0547936 ,\n                nan, 1.5532995 ]],\n\n       [[0.18839231, 0.19221735, 0.19571806, ..., 0.17631547,\n         0.18033697, 0.17666994],\n        [0.1838335 , 0.18939696, 0.20410095, ..., 0.17700717,\n         0.17362022, 0.178996  ],\n        [0.18872349, 0.19384259, 0.19978735, ..., 0.18237141,\n         0.18065988, 0.18640748],\n        ...,\n        [0.21531856, 0.22947444, 0.2684734 , ..., 1.6615558 ,\n         1.8347846 , 1.9687383 ],\n        [0.234376  , 0.25239286, 0.28643745, ..., 2.0614278 ,\n         1.6890424 , 1.7758049 ],\n        [0.25885618, 0.27874196, 0.30844975, ..., 3.7082324 ,\n                nan, 1.7107744 ]]], dtype=float32)Attributes: (0)\n\n\n‚Ä¶ and of course we can graph this data, too!\n\nCHL_month = ds_resampled.mean(dim=['lat', 'lon']).hvplot(label='monthly resampling').options(color='red', )\n\n\nCHL_day = ds['CHL'].sel(lat=slice(10, 5), lon=slice(75, 80)).mean(dim=['lat', 'lon']).hvplot(label='daily resampling').options(color='blue')\n\n\n(CHL_day*CHL_month).options(title='Monthly vs Daily resampling of chlorophyll-a levels', xlabel='year')"
  },
  {
    "objectID": "python-notebooks/02_Graphing_Data.html#contour-mapping",
    "href": "python-notebooks/02_Graphing_Data.html#contour-mapping",
    "title": "Graphing Data from our final product",
    "section": "Contour mapping",
    "text": "Contour mapping\nSometimes we want to identify areas in which our data may behave differently. One of the best ways to do this is to create contour maps.\n\nCoastline mapping\nCoastlines can help us separate land and ocean area. We can plot the coastline for our region of interest without using our data.\n\ngeo_axes = plt.axes(projection=cartopy.crs.PlateCarree())\n# add stock image\n# geo_axes.stock_img()\ngeo_axes.set_extent([42, 102, -12, 32])\ngeo_axes.coastlines()\n\n&lt;cartopy.mpl.feature_artist.FeatureArtist at 0x7f075b7164f0&gt;\n\n\n\n\n\nWe can also apply the coastline onto our data. The example below shows a heatmap with the coastline drawn on top of it\n\ntopo = xr.open_dataset('../data/finalized/topography.nc')\n\n\nfig, ax = plt.subplots(subplot_kw=dict(projection=cartopy.crs.PlateCarree()))\ntopo.topo.plot.imshow(ax=ax)\nax.add_feature(cartopy.feature.COASTLINE)\n\n&lt;cartopy.mpl.feature_artist.FeatureArtist at 0x7f17db906580&gt;\n\n\n\n\n\n\n\nTopography mapping\nWe also have a topography dataset that spans the same grid as our final dataset. At the moment of writing this moment, this dataset has not been incoporated into the latter one yet, as you have seen earlier in this notebook that we have to import it separately.\nWe can use this dataset to visualize the topography through contour maps.\n\ntopo\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:  (lon: 241, lat: 177)\nCoordinates:\n  * lon      (lon) float32 42.0 42.25 42.5 42.75 ... 101.2 101.5 101.8 102.0\n  * lat      (lat) float32 32.0 31.75 31.5 31.25 ... -11.25 -11.5 -11.75 -12.0\nData variables:\n    topo     (lat, lon) float64 349.0 307.0 292.0 ... -3.285e+03 -3.727e+03xarray.DatasetDimensions:lon: 241lat: 177Coordinates: (2)lon(lon)float3242.0 42.25 42.5 ... 101.8 102.0_CoordinateAxisType :Lonactual_range :[ 42. 102.]axis :Xioos_category :Locationlong_name :Longitudestandard_name :longitudeunits :degrees_eastarray([ 42.  ,  42.25,  42.5 , ..., 101.5 , 101.75, 102.  ], dtype=float32)lat(lat)float3232.0 31.75 31.5 ... -11.75 -12.0_CoordinateAxisType :Latactual_range :[-12.  32.]axis :Yioos_category :Locationlong_name :Latitudestandard_name :latitudeunits :degrees_northarray([ 32.  ,  31.75,  31.5 ,  31.25,  31.  ,  30.75,  30.5 ,  30.25,  30.  ,\n        29.75,  29.5 ,  29.25,  29.  ,  28.75,  28.5 ,  28.25,  28.  ,  27.75,\n        27.5 ,  27.25,  27.  ,  26.75,  26.5 ,  26.25,  26.  ,  25.75,  25.5 ,\n        25.25,  25.  ,  24.75,  24.5 ,  24.25,  24.  ,  23.75,  23.5 ,  23.25,\n        23.  ,  22.75,  22.5 ,  22.25,  22.  ,  21.75,  21.5 ,  21.25,  21.  ,\n        20.75,  20.5 ,  20.25,  20.  ,  19.75,  19.5 ,  19.25,  19.  ,  18.75,\n        18.5 ,  18.25,  18.  ,  17.75,  17.5 ,  17.25,  17.  ,  16.75,  16.5 ,\n        16.25,  16.  ,  15.75,  15.5 ,  15.25,  15.  ,  14.75,  14.5 ,  14.25,\n        14.  ,  13.75,  13.5 ,  13.25,  13.  ,  12.75,  12.5 ,  12.25,  12.  ,\n        11.75,  11.5 ,  11.25,  11.  ,  10.75,  10.5 ,  10.25,  10.  ,   9.75,\n         9.5 ,   9.25,   9.  ,   8.75,   8.5 ,   8.25,   8.  ,   7.75,   7.5 ,\n         7.25,   7.  ,   6.75,   6.5 ,   6.25,   6.  ,   5.75,   5.5 ,   5.25,\n         5.  ,   4.75,   4.5 ,   4.25,   4.  ,   3.75,   3.5 ,   3.25,   3.  ,\n         2.75,   2.5 ,   2.25,   2.  ,   1.75,   1.5 ,   1.25,   1.  ,   0.75,\n         0.5 ,   0.25,   0.  ,  -0.25,  -0.5 ,  -0.75,  -1.  ,  -1.25,  -1.5 ,\n        -1.75,  -2.  ,  -2.25,  -2.5 ,  -2.75,  -3.  ,  -3.25,  -3.5 ,  -3.75,\n        -4.  ,  -4.25,  -4.5 ,  -4.75,  -5.  ,  -5.25,  -5.5 ,  -5.75,  -6.  ,\n        -6.25,  -6.5 ,  -6.75,  -7.  ,  -7.25,  -7.5 ,  -7.75,  -8.  ,  -8.25,\n        -8.5 ,  -8.75,  -9.  ,  -9.25,  -9.5 ,  -9.75, -10.  , -10.25, -10.5 ,\n       -10.75, -11.  , -11.25, -11.5 , -11.75, -12.  ], dtype=float32)Data variables: (1)topo(lat, lon)float64...colorBarMaximum :8000.0colorBarMinimum :-8000.0colorBarPalette :Topographygrid_mapping :GDAL_Geographicsioos_category :Locationlong_name :Topographystandard_name :altitudeunits :metersarray([[  349.,   307.,   292., ...,  4056.,  4074.,  2786.],\n       [  350.,   312.,   311., ...,  3193.,  3800.,  2354.],\n       [  340.,   312.,   290., ...,  4439.,  4363.,  3235.],\n       ...,\n       [-2268., -2762., -2922., ..., -4937., -5166., -4983.],\n       [-2485., -2815., -3090., ..., -4672., -5028., -4680.],\n       [-2658., -2950., -3186., ..., -4438., -3285., -3727.]])Attributes: (0)\n\n\n\nfig, (ax1, ax2) = plt.subplots(2,1, figsize=(8, 12))\ntopo_contour = topo.topo.plot.contour(levels=12, ax=ax1, cmap='coolwarm')\ntopo_contourf = topo.topo.plot.contourf(levels=12, ax=ax2, cmap='coolwarm', label='')\n# add label in line\n# ax.clabel(topo_contour, inline=1, fontsize=10)\n\nhue1, color1 = topo_contour.legend_elements()\nhue2, color2 = topo_contourf.legend_elements()\nax1.legend(hue1, color1, loc='center left', bbox_to_anchor=(1, 0.5))\nax1.set_aspect('equal')\nax2.set_aspect('equal')\n# ax2.get_legend().set_visible(False)\n\n\n\n\nExporting the contour lines to graph on other datasets:\n\n# extract lines from contour paths\nlines = []\nfor contour_path in topo_contour.collections:\n    for path in contour_path.get_paths():\n        lines.extend(path.to_polygons())\n\nIn the example below, we graph the contour lines back onto the original contour maps.\n\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 7))\ntopo.topo.plot.imshow(ax=ax1)\nfor contour in topo_contour.collections[2:9]:\n    for path in contour.get_paths():\n        for line in path.to_polygons():\n            ax1.scatter(line[:,0], line[:, 1], color='black', s=0.1) # graph some of the contours (as dots)\n\ntopo.topo.plot.imshow(ax=ax2)\nfor line in lines:\n    ax2.scatter(line[:,0], line[:, 1], color='black', s=0.5) # graph all contours (as dots)\n    \nax1.set_aspect('equal')\nax2.set_aspect('equal')\n\n\n\n\n\n# very weird lines\nax = plt.gca()\ntopo.topo.plot.imshow(ax=ax)\nfor line in lines[:1200]: # there is an order of the lines sorted by topography height\n    ax.plot(line[:,0], line[:, 1], color='black', markersize=0.1)\n\n\n\n\n\n\nCreating topography contour maps with pygmt\nBecause of the weird lines caused by the connection of the open-ended paths, we want to experiment with some other packages.\n\n# Load Earth relief grids (topography and bathymetry) in various resolutions.\n# get contour grid\ngrid = pygmt.datasets.load_earth_relief(resolution=\"15m\", region=[42, 102, -12, 32])\nfig = pygmt.Figure()\n# add the heatmap first\nfig.grdimage(topo.topo, region='42/102/-12/32', cmap='topo', projection='M4i')\n# and then the contour map on top of it\nfig.grdcontour(grid=grid,\n              annotation='1000+f6p', # font 6p\n              interval=1000,\n              limit=[-5000, 0],\n              projection='M4i',\n              pen=\"a0.15p\") # 0.15 point\nfig.show()\n\n\n\n\n\n# coastline only\nfig2 = pygmt.Figure()\nfig2.grdimage(topo.topo, region='42/102/-12/32', cmap='topo', projection='M4i')\nfig2.coast(\n    region='42/102/-12/32',\n    projection='M4i',\n    shorelines=True\n)\nfig2.colorbar()\nfig2.show()\n\n\n\n\n\n# wind direction\ngrid = pygmt.datasets.load_earth_relief(resolution=\"15m\", region=[42, 102, -12, 32])\n\nfig3 = pygmt.Figure()\nfig3.grdimage(ds.v_wind.isel(time=0), region='42/102/-12/32', projection='M4i')\nfig3.grdcontour(grid=grid,\n              annotation='1000+f6p', # font 6p\n              interval=1000,\n              limit=[-5000, 0],\n              projection='M4i',\n              pen=\"a0.15p\") # 0.15 point\nfig3.coast(\n    region='42/102/-12/32',\n    projection='M4i',\n    shorelines=\"1p,black,solid\"\n)\nfig3.colorbar()\nfig3.show()\n\n\n\n\n\n# wind direction\nfig3 = pygmt.Figure()\nfig3.grdimage(ds.direction.isel(time=0), region='42/102/-12/32', projection='M4i')\nfig3.coast(\n    region='42/102/-12/32',\n    projection='M4i',\n    shorelines=True\n)\nfig3.colorbar()\nfig3.show()\n\n\nfig, ax = plt.subplots(subplot_kw=dict(projection=cartopy.crs.PlateCarree()))\nds.direction.isel(time=0).plot.imshow(ax=ax)\nax.set_aspect('equal')\nax.add_feature(cartopy.feature.COASTLINE)\n\n&lt;cartopy.mpl.feature_artist.FeatureArtist at 0x7f182e0d1a00&gt;"
  },
  {
    "objectID": "python-notebooks/02_Using_Data.html#about-our-product",
    "href": "python-notebooks/02_Using_Data.html#about-our-product",
    "title": "IO Zarr file",
    "section": "About our product",
    "text": "About our product\nOur final product INDIAN_OCEAN_025GRID_DAILY.zarr is a synthesized dataset formated as a .zarr file, containing daily cleaned and interpolated data from fifteen variables across multiple sources, mostly from processed NASA/NOAA and Copernicus collections: * adt: sea surface height above geoid (m) * air_temp: air temperature (K) * CHL: chlorophyll-a concentration (mg/m3) * CHL_uncertainty: chlorophyll-a concentration uncertainty (%) * mlotst: mean ocean mixed layer thickness (m) * sla: sea level anomaly (m) * so: sea salinity concentration (m-3 or PSL) * sst: sea surface temperature (K) * topo: topography (m) * u_curr: u-component of total surface currents (m/s) * v_curr: v-component of total surface currents (m/s) * ug_curr: u-component of geostrophic surface currents (m/s) * vg_curr: v-component of geostrophic surface currents (m/s) * u_wind: u-component of surface wind (m/s) * v_wind: v-component of surface wind (m/s)\nWe also computed four additional components, namely: * curr_speed: total current speed (m/s) * curr_dir: total current direction (degrees) * wind_speed: surface wind speed (m/s) * wind_dir: surface wind direction (degrees)\nAll variables have been broadcasted to all fit in the temporal range we have. Therefore, not all variable data are available at any time. Check out each individual variable before use."
  },
  {
    "objectID": "python-notebooks/02_Using_Data.html#import-necessary-libraries",
    "href": "python-notebooks/02_Using_Data.html#import-necessary-libraries",
    "title": "IO Zarr file",
    "section": "Import necessary libraries",
    "text": "Import necessary libraries\n\n! pip install cmocean\n\nCollecting cmocean\n  Using cached cmocean-3.0.3-py3-none-any.whl (222 kB)\nRequirement already satisfied: matplotlib in /srv/conda/envs/notebook/lib/python3.9/site-packages (from cmocean) (3.7.1)\nRequirement already satisfied: numpy in /srv/conda/envs/notebook/lib/python3.9/site-packages (from cmocean) (1.23.5)\nRequirement already satisfied: packaging in /srv/conda/envs/notebook/lib/python3.9/site-packages (from cmocean) (23.1)\nRequirement already satisfied: contourpy&gt;=1.0.1 in /srv/conda/envs/notebook/lib/python3.9/site-packages (from matplotlib-&gt;cmocean) (1.0.7)\nRequirement already satisfied: cycler&gt;=0.10 in /srv/conda/envs/notebook/lib/python3.9/site-packages (from matplotlib-&gt;cmocean) (0.11.0)\nRequirement already satisfied: fonttools&gt;=4.22.0 in /srv/conda/envs/notebook/lib/python3.9/site-packages (from matplotlib-&gt;cmocean) (4.39.4)\nRequirement already satisfied: kiwisolver&gt;=1.0.1 in /srv/conda/envs/notebook/lib/python3.9/site-packages (from matplotlib-&gt;cmocean) (1.4.4)\nRequirement already satisfied: pillow&gt;=6.2.0 in /srv/conda/envs/notebook/lib/python3.9/site-packages (from matplotlib-&gt;cmocean) (9.5.0)\nRequirement already satisfied: pyparsing&gt;=2.3.1 in /srv/conda/envs/notebook/lib/python3.9/site-packages (from matplotlib-&gt;cmocean) (3.0.9)\nRequirement already satisfied: python-dateutil&gt;=2.7 in /srv/conda/envs/notebook/lib/python3.9/site-packages (from matplotlib-&gt;cmocean) (2.8.2)\nRequirement already satisfied: importlib-resources&gt;=3.2.0 in /srv/conda/envs/notebook/lib/python3.9/site-packages (from matplotlib-&gt;cmocean) (5.12.0)\nRequirement already satisfied: zipp&gt;=3.1.0 in /srv/conda/envs/notebook/lib/python3.9/site-packages (from importlib-resources&gt;=3.2.0-&gt;matplotlib-&gt;cmocean) (3.15.0)\nRequirement already satisfied: six&gt;=1.5 in /srv/conda/envs/notebook/lib/python3.9/site-packages (from python-dateutil&gt;=2.7-&gt;matplotlib-&gt;cmocean) (1.16.0)\nInstalling collected packages: cmocean\nSuccessfully installed cmocean-3.0.3\n\n\n\nimport xarray as xr\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport holoviews as hv\nimport hvplot.xarray"
  },
  {
    "objectID": "python-notebooks/02_Using_Data.html#read-data",
    "href": "python-notebooks/02_Using_Data.html#read-data",
    "title": "IO Zarr file",
    "section": "Read data",
    "text": "Read data\n\n# Change the file path accordingly\nds = xr.open_zarr('/home/jovyan/shared/data/INDIAN_OCEAN_025GRID_DAILY.zarr/')\n\n\nds\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:          (time: 16071, lat: 177, lon: 241)\nCoordinates:\n  * lat              (lat) float32 32.0 31.75 31.5 31.25 ... -11.5 -11.75 -12.0\n  * lon              (lon) float32 42.0 42.25 42.5 42.75 ... 101.5 101.8 102.0\n  * time             (time) datetime64[ns] 1979-01-01 1979-01-02 ... 2022-12-31\nData variables: (12/19)\n    CHL              (time, lat, lon) float32 dask.array&lt;chunksize=(100, 177, 241), meta=np.ndarray&gt;\n    CHL_uncertainty  (time, lat, lon) float32 dask.array&lt;chunksize=(100, 177, 241), meta=np.ndarray&gt;\n    adt              (time, lat, lon) float32 dask.array&lt;chunksize=(100, 177, 241), meta=np.ndarray&gt;\n    air_temp         (time, lat, lon) float32 dask.array&lt;chunksize=(100, 177, 241), meta=np.ndarray&gt;\n    curr_dir         (time, lat, lon) float32 dask.array&lt;chunksize=(100, 177, 241), meta=np.ndarray&gt;\n    curr_speed       (time, lat, lon) float32 dask.array&lt;chunksize=(100, 177, 241), meta=np.ndarray&gt;\n    ...               ...\n    ug_curr          (time, lat, lon) float32 dask.array&lt;chunksize=(100, 177, 241), meta=np.ndarray&gt;\n    v_curr           (time, lat, lon) float32 dask.array&lt;chunksize=(100, 177, 241), meta=np.ndarray&gt;\n    v_wind           (time, lat, lon) float32 dask.array&lt;chunksize=(100, 177, 241), meta=np.ndarray&gt;\n    vg_curr          (time, lat, lon) float32 dask.array&lt;chunksize=(100, 177, 241), meta=np.ndarray&gt;\n    wind_dir         (time, lat, lon) float32 dask.array&lt;chunksize=(100, 177, 241), meta=np.ndarray&gt;\n    wind_speed       (time, lat, lon) float32 dask.array&lt;chunksize=(100, 177, 241), meta=np.ndarray&gt;\nAttributes: (12/17)\n    creator_email:              minhphan@uw.edu\n    creator_name:               Minh Phan\n    creator_type:               person\n    date_created:               2023-07-19\n    geospatial_lat_max:         32.0\n    geospatial_lat_min:         -12.0\n    ...                         ...\n    geospatial_lon_units:       degrees_east\n    source:                     Earth & Space Research (ESR), Copernicus Clim...\n    summary:                    Daily mean of 0.25 x 0.25 degrees gridded dat...\n    time_coverage_end:          2022-12-31T23:59:59\n    time_coverage_start:        1979-01-01T00:00:00\n    title:                      Climate Data for Coastal Upwelling Machine Le...xarray.DatasetDimensions:time: 16071lat: 177lon: 241Coordinates: (3)lat(lat)float3232.0 31.75 31.5 ... -11.75 -12.0long_name :latitudestandard_name :latitudeunits :degrees_northarray([ 32.  ,  31.75,  31.5 ,  31.25,  31.  ,  30.75,  30.5 ,  30.25,  30.  ,\n        29.75,  29.5 ,  29.25,  29.  ,  28.75,  28.5 ,  28.25,  28.  ,  27.75,\n        27.5 ,  27.25,  27.  ,  26.75,  26.5 ,  26.25,  26.  ,  25.75,  25.5 ,\n        25.25,  25.  ,  24.75,  24.5 ,  24.25,  24.  ,  23.75,  23.5 ,  23.25,\n        23.  ,  22.75,  22.5 ,  22.25,  22.  ,  21.75,  21.5 ,  21.25,  21.  ,\n        20.75,  20.5 ,  20.25,  20.  ,  19.75,  19.5 ,  19.25,  19.  ,  18.75,\n        18.5 ,  18.25,  18.  ,  17.75,  17.5 ,  17.25,  17.  ,  16.75,  16.5 ,\n        16.25,  16.  ,  15.75,  15.5 ,  15.25,  15.  ,  14.75,  14.5 ,  14.25,\n        14.  ,  13.75,  13.5 ,  13.25,  13.  ,  12.75,  12.5 ,  12.25,  12.  ,\n        11.75,  11.5 ,  11.25,  11.  ,  10.75,  10.5 ,  10.25,  10.  ,   9.75,\n         9.5 ,   9.25,   9.  ,   8.75,   8.5 ,   8.25,   8.  ,   7.75,   7.5 ,\n         7.25,   7.  ,   6.75,   6.5 ,   6.25,   6.  ,   5.75,   5.5 ,   5.25,\n         5.  ,   4.75,   4.5 ,   4.25,   4.  ,   3.75,   3.5 ,   3.25,   3.  ,\n         2.75,   2.5 ,   2.25,   2.  ,   1.75,   1.5 ,   1.25,   1.  ,   0.75,\n         0.5 ,   0.25,   0.  ,  -0.25,  -0.5 ,  -0.75,  -1.  ,  -1.25,  -1.5 ,\n        -1.75,  -2.  ,  -2.25,  -2.5 ,  -2.75,  -3.  ,  -3.25,  -3.5 ,  -3.75,\n        -4.  ,  -4.25,  -4.5 ,  -4.75,  -5.  ,  -5.25,  -5.5 ,  -5.75,  -6.  ,\n        -6.25,  -6.5 ,  -6.75,  -7.  ,  -7.25,  -7.5 ,  -7.75,  -8.  ,  -8.25,\n        -8.5 ,  -8.75,  -9.  ,  -9.25,  -9.5 ,  -9.75, -10.  , -10.25, -10.5 ,\n       -10.75, -11.  , -11.25, -11.5 , -11.75, -12.  ], dtype=float32)lon(lon)float3242.0 42.25 42.5 ... 101.8 102.0long_name :longitudestandard_name :longitudeunits :degrees_eastarray([ 42.  ,  42.25,  42.5 , ..., 101.5 , 101.75, 102.  ], dtype=float32)time(time)datetime64[ns]1979-01-01 ... 2022-12-31axis :Tcomment :Data is averaged over the daylong_name :time centered on the daystandard_name :timetime_bounds :2000-01-01 00:00:00 to 2000-01-01 23:59:59array(['1979-01-01T00:00:00.000000000', '1979-01-02T00:00:00.000000000',\n       '1979-01-03T00:00:00.000000000', ..., '2022-12-29T00:00:00.000000000',\n       '2022-12-30T00:00:00.000000000', '2022-12-31T00:00:00.000000000'],\n      dtype='datetime64[ns]')Data variables: (19)CHL(time, lat, lon)float32dask.array&lt;chunksize=(100, 177, 241), meta=np.ndarray&gt;_ChunkSizes :[1, 256, 256]ancillary_variables :flags CHL_uncertaintycoverage_content_type :modelResultinput_files_reprocessings :Processors versions: MODIS R2022.0NRT/VIIRSN R2022.0NRT/OLCIA 07.02/VIIRSJ1 R2022.0NRT/OLCIB 07.02long_name :Chlorophyll-a concentration - Mean of the binned pixelsstandard_name :mass_concentration_of_chlorophyll_a_in_sea_watertype :surfaceunits :milligram m-3valid_max :1000.0valid_min :0.0\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n2.55 GiB\n16.27 MiB\n\n\nShape\n(16071, 177, 241)\n(100, 177, 241)\n\n\nDask graph\n161 chunks in 2 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\nCHL_uncertainty\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(100, 177, 241), meta=np.ndarray&gt;\n\n\n\n\n_ChunkSizes :\n\n[1, 256, 256]\n\ncoverage_content_type :\n\nqualityInformation\n\nlong_name :\n\nChlorophyll-a concentration - Uncertainty estimation\n\nunits :\n\n%\n\nvalid_max :\n\n32767\n\nvalid_min :\n\n0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n2.55 GiB\n16.27 MiB\n\n\nShape\n(16071, 177, 241)\n(100, 177, 241)\n\n\nDask graph\n161 chunks in 2 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nadt\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(100, 177, 241), meta=np.ndarray&gt;\n\n\n\n\ncomment :\n\nThe absolute dynamic topography is the sea surface height above geoid; the adt is obtained as follows: adt=sla+mdt where mdt is the mean dynamic topography; see the product user manual for details\n\ngrid_mapping :\n\ncrs\n\nlong_name :\n\nAbsolute dynamic topography\n\nstandard_name :\n\nsea_surface_height_above_geoid\n\nunits :\n\nm\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n2.55 GiB\n16.27 MiB\n\n\nShape\n(16071, 177, 241)\n(100, 177, 241)\n\n\nDask graph\n161 chunks in 2 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nair_temp\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(100, 177, 241), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\n2 metre temperature\n\nnameCDM :\n\n2_metre_temperature_surface\n\nnameECMWF :\n\n2 metre temperature\n\nproduct_type :\n\nanalysis\n\nshortNameECMWF :\n\n2t\n\nstandard_name :\n\nair_temperature\n\nunits :\n\nK\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n2.55 GiB\n16.27 MiB\n\n\nShape\n(16071, 177, 241)\n(100, 177, 241)\n\n\nDask graph\n161 chunks in 2 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\ncurr_dir\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(100, 177, 241), meta=np.ndarray&gt;\n\n\n\n\ncomments :\n\nComputed from total surface current velocity elements. Velocities are an average over the top 30m of the mixed layer\n\ndepth :\n\n15m\n\nlong_name :\n\naverage direction of total surface currents\n\nunits :\n\ndegrees\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n2.55 GiB\n16.27 MiB\n\n\nShape\n(16071, 177, 241)\n(100, 177, 241)\n\n\nDask graph\n161 chunks in 2 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\ncurr_speed\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(100, 177, 241), meta=np.ndarray&gt;\n\n\n\n\ncomments :\n\nVelocities are an average over the top 30m of the mixed layer\n\ndepth :\n\n15m\n\nlong_name :\n\naverage total surface current speed\n\nunits :\n\nm s**-1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n2.55 GiB\n16.27 MiB\n\n\nShape\n(16071, 177, 241)\n(100, 177, 241)\n\n\nDask graph\n161 chunks in 2 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nmlotst\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(500, 177, 241), meta=np.ndarray&gt;\n\n\n\n\n_ChunkSizes :\n\n[1, 681, 1440]\n\ncell_methods :\n\narea: mean\n\nlong_name :\n\nDensity ocean mixed layer thickness\n\nstandard_name :\n\nocean_mixed_layer_thickness_defined_by_sigma_theta\n\nunit_long :\n\nMeters\n\nunits :\n\nm\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n2.55 GiB\n81.36 MiB\n\n\nShape\n(16071, 177, 241)\n(500, 177, 241)\n\n\nDask graph\n33 chunks in 2 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nsla\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(100, 177, 241), meta=np.ndarray&gt;\n\n\n\n\nancillary_variables :\n\nerr_sla\n\ncomment :\n\nThe sea level anomaly is the sea surface height above mean sea surface; it is referenced to the [1993, 2012] period; see the product user manual for details\n\ngrid_mapping :\n\ncrs\n\nlong_name :\n\nSea level anomaly\n\nstandard_name :\n\nsea_surface_height_above_sea_level\n\nunits :\n\nm\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n2.55 GiB\n16.27 MiB\n\n\nShape\n(16071, 177, 241)\n(100, 177, 241)\n\n\nDask graph\n161 chunks in 2 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nso\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(500, 177, 241), meta=np.ndarray&gt;\n\n\n\n\n_ChunkSizes :\n\n[1, 7, 341, 720]\n\ncell_methods :\n\narea: mean\n\nlong_name :\n\nmean sea water salinity at 0.49 metres below ocean surface\n\nstandard_name :\n\nsea_water_salinity\n\nunit_long :\n\nPractical Salinity Unit\n\nunits :\n\n1e-3\n\nvalid_max :\n\n28336\n\nvalid_min :\n\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n2.55 GiB\n81.36 MiB\n\n\nShape\n(16071, 177, 241)\n(500, 177, 241)\n\n\nDask graph\n33 chunks in 2 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nsst\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(100, 177, 241), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\nSea surface temperature\n\nnameCDM :\n\nSea_surface_temperature_surface\n\nnameECMWF :\n\nSea surface temperature\n\nproduct_type :\n\nanalysis\n\nshortNameECMWF :\n\nsst\n\nstandard_name :\n\nsea_surface_temperature\n\nunits :\n\nK\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n2.55 GiB\n16.27 MiB\n\n\nShape\n(16071, 177, 241)\n(100, 177, 241)\n\n\nDask graph\n161 chunks in 2 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\ntopo\n\n\n(lat, lon)\n\n\nfloat64\n\n\ndask.array&lt;chunksize=(177, 241), meta=np.ndarray&gt;\n\n\n\n\ncolorBarMaximum :\n\n8000.0\n\ncolorBarMinimum :\n\n-8000.0\n\ncolorBarPalette :\n\nTopography\n\ngrid_mapping :\n\nGDAL_Geographics\n\nioos_category :\n\nLocation\n\nlong_name :\n\nTopography\n\nstandard_name :\n\naltitude\n\nunits :\n\nmeters\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n333.26 kiB\n333.26 kiB\n\n\nShape\n(177, 241)\n(177, 241)\n\n\nDask graph\n1 chunks in 2 graph layers\n\n\nData type\nfloat64 numpy.ndarray\n\n\n\n\n\n\n\n\n\nu_curr\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(100, 177, 241), meta=np.ndarray&gt;\n\n\n\n\ncomment :\n\nVelocities are an average over the top 30m of the mixed layer\n\ncoverage_content_type :\n\nmodelResult\n\ndepth :\n\n15m\n\nlong_name :\n\nzonal total surface current\n\nsource :\n\nSSH source: CMEMS SSALTO/DUACS SEALEVEL_GLO_PHY_L4_MY_008_047 DOI: 10.48670/moi-00148 ; WIND source: ECMWF ERA5 10m wind DOI: 10.24381/cds.adbb2d47 ; SST source: CMC 0.2 deg SST V2.0 DOI: 10.5067/GHCMC-4FM02\n\nstandard_name :\n\neastward_sea_water_velocity\n\nunits :\n\nm s-1\n\nvalid_max :\n\n3.0\n\nvalid_min :\n\n-3.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n2.55 GiB\n16.27 MiB\n\n\nShape\n(16071, 177, 241)\n(100, 177, 241)\n\n\nDask graph\n161 chunks in 2 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nu_wind\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(100, 177, 241), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\n10 metre U wind component\n\nnameCDM :\n\n10_metre_U_wind_component_surface\n\nnameECMWF :\n\n10 metre U wind component\n\nproduct_type :\n\nanalysis\n\nshortNameECMWF :\n\n10u\n\nstandard_name :\n\neastward_wind\n\nunits :\n\nm s**-1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n2.55 GiB\n16.27 MiB\n\n\nShape\n(16071, 177, 241)\n(100, 177, 241)\n\n\nDask graph\n161 chunks in 2 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nug_curr\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(100, 177, 241), meta=np.ndarray&gt;\n\n\n\n\ncomment :\n\nGeostrophic velocities calculated from absolute dynamic topography\n\ndepth :\n\n15m\n\nlong_name :\n\nzonal geostrophic surface current\n\nsource :\n\nSSH source: CMEMS SSALTO/DUACS SEALEVEL_GLO_PHY_L4_MY_008_047 DOI: 10.48670/moi-00148\n\nstandard_name :\n\ngeostrophic_eastward_sea_water_velocity\n\nunits :\n\nm s-1\n\nvalid_max :\n\n3.0\n\nvalid_min :\n\n-3.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n2.55 GiB\n16.27 MiB\n\n\nShape\n(16071, 177, 241)\n(100, 177, 241)\n\n\nDask graph\n161 chunks in 2 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nv_curr\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(100, 177, 241), meta=np.ndarray&gt;\n\n\n\n\ncomment :\n\nVelocities are an average over the top 30m of the mixed layer\n\ncoverage_content_type :\n\nmodelResult\n\ndepth :\n\n15m\n\nlong_name :\n\nmeridional total surface current\n\nsource :\n\nSSH source: CMEMS SSALTO/DUACS SEALEVEL_GLO_PHY_L4_MY_008_047 DOI: 10.48670/moi-00148 ; WIND source: ECMWF ERA5 10m wind DOI: 10.24381/cds.adbb2d47 ; SST source: CMC 0.2 deg SST V2.0 DOI: 10.5067/GHCMC-4FM02\n\nstandard_name :\n\nnorthward_sea_water_velocity\n\nunits :\n\nm s-1\n\nvalid_max :\n\n3.0\n\nvalid_min :\n\n-3.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n2.55 GiB\n16.27 MiB\n\n\nShape\n(16071, 177, 241)\n(100, 177, 241)\n\n\nDask graph\n161 chunks in 2 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nv_wind\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(100, 177, 241), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\n10 metre V wind component\n\nnameCDM :\n\n10_metre_V_wind_component_surface\n\nnameECMWF :\n\n10 metre V wind component\n\nproduct_type :\n\nanalysis\n\nshortNameECMWF :\n\n10v\n\nstandard_name :\n\nnorthward_wind\n\nunits :\n\nm s**-1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n2.55 GiB\n16.27 MiB\n\n\nShape\n(16071, 177, 241)\n(100, 177, 241)\n\n\nDask graph\n161 chunks in 2 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nvg_curr\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(100, 177, 241), meta=np.ndarray&gt;\n\n\n\n\ncomment :\n\nGeostrophic velocities calculated from absolute dynamic topography\n\ndepth :\n\n15m\n\nlong_name :\n\nmeridional geostrophic surface current\n\nsource :\n\nSSH source: CMEMS SSALTO/DUACS SEALEVEL_GLO_PHY_L4_MY_008_047 DOI: 10.48670/moi-00148\n\nstandard_name :\n\ngeostrophic_northward_sea_water_velocity\n\nunits :\n\nm s-1\n\nvalid_max :\n\n3.0\n\nvalid_min :\n\n-3.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n2.55 GiB\n16.27 MiB\n\n\nShape\n(16071, 177, 241)\n(100, 177, 241)\n\n\nDask graph\n161 chunks in 2 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nwind_dir\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(100, 177, 241), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\n10 metre wind direction\n\nunits :\n\ndegrees\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n2.55 GiB\n16.27 MiB\n\n\nShape\n(16071, 177, 241)\n(100, 177, 241)\n\n\nDask graph\n161 chunks in 2 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nwind_speed\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(100, 177, 241), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\n10 metre absolute speed\n\nunits :\n\nm s**-1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n2.55 GiB\n16.27 MiB\n\n\nShape\n(16071, 177, 241)\n(100, 177, 241)\n\n\nDask graph\n161 chunks in 2 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\nIndexes: (3)latPandasIndexPandasIndex(Index([  32.0,  31.75,   31.5,  31.25,   31.0,  30.75,   30.5,  30.25,   30.0,\n        29.75,\n       ...\n        -9.75,  -10.0, -10.25,  -10.5, -10.75,  -11.0, -11.25,  -11.5, -11.75,\n        -12.0],\n      dtype='float32', name='lat', length=177))lonPandasIndexPandasIndex(Index([  42.0,  42.25,   42.5,  42.75,   43.0,  43.25,   43.5,  43.75,   44.0,\n        44.25,\n       ...\n        99.75,  100.0, 100.25,  100.5, 100.75,  101.0, 101.25,  101.5, 101.75,\n        102.0],\n      dtype='float32', name='lon', length=241))timePandasIndexPandasIndex(DatetimeIndex(['1979-01-01', '1979-01-02', '1979-01-03', '1979-01-04',\n               '1979-01-05', '1979-01-06', '1979-01-07', '1979-01-08',\n               '1979-01-09', '1979-01-10',\n               ...\n               '2022-12-22', '2022-12-23', '2022-12-24', '2022-12-25',\n               '2022-12-26', '2022-12-27', '2022-12-28', '2022-12-29',\n               '2022-12-30', '2022-12-31'],\n              dtype='datetime64[ns]', name='time', length=16071, freq=None))Attributes: (17)creator_email :minhphan@uw.educreator_name :Minh Phancreator_type :persondate_created :2023-07-19geospatial_lat_max :32.0geospatial_lat_min :-12.0geospatial_lat_resolution :0.25geospatial_lat_units :degrees_northgeospatial_lon_max :102.0geospatial_lon_min :42.0geospatial_lon_resolution :0.25geospatial_lon_units :degrees_eastsource :Earth & Space Research (ESR), Copernicus Climate Change Service (C3S), Copernicus Marine Environment Monitoring Service (CMEMS), United States Geological Survey (USGS)summary :Daily mean of 0.25 x 0.25 degrees gridded data from multiple climate variables that may influence the patterns of coastal upwelling in the focused areatime_coverage_end :2022-12-31T23:59:59time_coverage_start :1979-01-01T00:00:00title :Climate Data for Coastal Upwelling Machine Learning Project in Indian Ocean\n\n\nWe can slice data by the dimensions (latitude, longitude, time) and data variables.\n\n# slice by latitude\n# notice how we specify the range in reverse\nds.sel(lat=slice(0, -12))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:          (time: 16071, lat: 49, lon: 241)\nCoordinates:\n  * lat              (lat) float32 0.0 -0.25 -0.5 -0.75 ... -11.5 -11.75 -12.0\n  * lon              (lon) float32 42.0 42.25 42.5 42.75 ... 101.5 101.8 102.0\n  * time             (time) datetime64[ns] 1979-01-01 1979-01-02 ... 2022-12-31\nData variables: (12/19)\n    CHL              (time, lat, lon) float32 dask.array&lt;chunksize=(100, 49, 241), meta=np.ndarray&gt;\n    CHL_uncertainty  (time, lat, lon) float32 dask.array&lt;chunksize=(100, 49, 241), meta=np.ndarray&gt;\n    adt              (time, lat, lon) float32 dask.array&lt;chunksize=(100, 49, 241), meta=np.ndarray&gt;\n    air_temp         (time, lat, lon) float32 dask.array&lt;chunksize=(100, 49, 241), meta=np.ndarray&gt;\n    curr_dir         (time, lat, lon) float32 dask.array&lt;chunksize=(100, 49, 241), meta=np.ndarray&gt;\n    curr_speed       (time, lat, lon) float32 dask.array&lt;chunksize=(100, 49, 241), meta=np.ndarray&gt;\n    ...               ...\n    ug_curr          (time, lat, lon) float32 dask.array&lt;chunksize=(100, 49, 241), meta=np.ndarray&gt;\n    v_curr           (time, lat, lon) float32 dask.array&lt;chunksize=(100, 49, 241), meta=np.ndarray&gt;\n    v_wind           (time, lat, lon) float32 dask.array&lt;chunksize=(100, 49, 241), meta=np.ndarray&gt;\n    vg_curr          (time, lat, lon) float32 dask.array&lt;chunksize=(100, 49, 241), meta=np.ndarray&gt;\n    wind_dir         (time, lat, lon) float32 dask.array&lt;chunksize=(100, 49, 241), meta=np.ndarray&gt;\n    wind_speed       (time, lat, lon) float32 dask.array&lt;chunksize=(100, 49, 241), meta=np.ndarray&gt;\nAttributes: (12/17)\n    creator_email:              minhphan@uw.edu\n    creator_name:               Minh Phan\n    creator_type:               person\n    date_created:               2023-07-19\n    geospatial_lat_max:         32.0\n    geospatial_lat_min:         -12.0\n    ...                         ...\n    geospatial_lon_units:       degrees_east\n    source:                     Earth & Space Research (ESR), Copernicus Clim...\n    summary:                    Daily mean of 0.25 x 0.25 degrees gridded dat...\n    time_coverage_end:          2022-12-31T23:59:59\n    time_coverage_start:        1979-01-01T00:00:00\n    title:                      Climate Data for Coastal Upwelling Machine Le...xarray.DatasetDimensions:time: 16071lat: 49lon: 241Coordinates: (3)lat(lat)float320.0 -0.25 -0.5 ... -11.75 -12.0long_name :latitudestandard_name :latitudeunits :degrees_northarray([  0.  ,  -0.25,  -0.5 ,  -0.75,  -1.  ,  -1.25,  -1.5 ,  -1.75,  -2.  ,\n        -2.25,  -2.5 ,  -2.75,  -3.  ,  -3.25,  -3.5 ,  -3.75,  -4.  ,  -4.25,\n        -4.5 ,  -4.75,  -5.  ,  -5.25,  -5.5 ,  -5.75,  -6.  ,  -6.25,  -6.5 ,\n        -6.75,  -7.  ,  -7.25,  -7.5 ,  -7.75,  -8.  ,  -8.25,  -8.5 ,  -8.75,\n        -9.  ,  -9.25,  -9.5 ,  -9.75, -10.  , -10.25, -10.5 , -10.75, -11.  ,\n       -11.25, -11.5 , -11.75, -12.  ], dtype=float32)lon(lon)float3242.0 42.25 42.5 ... 101.8 102.0long_name :longitudestandard_name :longitudeunits :degrees_eastarray([ 42.  ,  42.25,  42.5 , ..., 101.5 , 101.75, 102.  ], dtype=float32)time(time)datetime64[ns]1979-01-01 ... 2022-12-31axis :Tcomment :Data is averaged over the daylong_name :time centered on the daystandard_name :timetime_bounds :2000-01-01 00:00:00 to 2000-01-01 23:59:59array(['1979-01-01T00:00:00.000000000', '1979-01-02T00:00:00.000000000',\n       '1979-01-03T00:00:00.000000000', ..., '2022-12-29T00:00:00.000000000',\n       '2022-12-30T00:00:00.000000000', '2022-12-31T00:00:00.000000000'],\n      dtype='datetime64[ns]')Data variables: (19)CHL(time, lat, lon)float32dask.array&lt;chunksize=(100, 49, 241), meta=np.ndarray&gt;_ChunkSizes :[1, 256, 256]ancillary_variables :flags CHL_uncertaintycoverage_content_type :modelResultinput_files_reprocessings :Processors versions: MODIS R2022.0NRT/VIIRSN R2022.0NRT/OLCIA 07.02/VIIRSJ1 R2022.0NRT/OLCIB 07.02long_name :Chlorophyll-a concentration - Mean of the binned pixelsstandard_name :mass_concentration_of_chlorophyll_a_in_sea_watertype :surfaceunits :milligram m-3valid_max :1000.0valid_min :0.0\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n723.96 MiB\n4.50 MiB\n\n\nShape\n(16071, 49, 241)\n(100, 49, 241)\n\n\nDask graph\n161 chunks in 3 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\nCHL_uncertainty\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(100, 49, 241), meta=np.ndarray&gt;\n\n\n\n\n_ChunkSizes :\n\n[1, 256, 256]\n\ncoverage_content_type :\n\nqualityInformation\n\nlong_name :\n\nChlorophyll-a concentration - Uncertainty estimation\n\nunits :\n\n%\n\nvalid_max :\n\n32767\n\nvalid_min :\n\n0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n723.96 MiB\n4.50 MiB\n\n\nShape\n(16071, 49, 241)\n(100, 49, 241)\n\n\nDask graph\n161 chunks in 3 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nadt\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(100, 49, 241), meta=np.ndarray&gt;\n\n\n\n\ncomment :\n\nThe absolute dynamic topography is the sea surface height above geoid; the adt is obtained as follows: adt=sla+mdt where mdt is the mean dynamic topography; see the product user manual for details\n\ngrid_mapping :\n\ncrs\n\nlong_name :\n\nAbsolute dynamic topography\n\nstandard_name :\n\nsea_surface_height_above_geoid\n\nunits :\n\nm\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n723.96 MiB\n4.50 MiB\n\n\nShape\n(16071, 49, 241)\n(100, 49, 241)\n\n\nDask graph\n161 chunks in 3 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nair_temp\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(100, 49, 241), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\n2 metre temperature\n\nnameCDM :\n\n2_metre_temperature_surface\n\nnameECMWF :\n\n2 metre temperature\n\nproduct_type :\n\nanalysis\n\nshortNameECMWF :\n\n2t\n\nstandard_name :\n\nair_temperature\n\nunits :\n\nK\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n723.96 MiB\n4.50 MiB\n\n\nShape\n(16071, 49, 241)\n(100, 49, 241)\n\n\nDask graph\n161 chunks in 3 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\ncurr_dir\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(100, 49, 241), meta=np.ndarray&gt;\n\n\n\n\ncomments :\n\nComputed from total surface current velocity elements. Velocities are an average over the top 30m of the mixed layer\n\ndepth :\n\n15m\n\nlong_name :\n\naverage direction of total surface currents\n\nunits :\n\ndegrees\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n723.96 MiB\n4.50 MiB\n\n\nShape\n(16071, 49, 241)\n(100, 49, 241)\n\n\nDask graph\n161 chunks in 3 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\ncurr_speed\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(100, 49, 241), meta=np.ndarray&gt;\n\n\n\n\ncomments :\n\nVelocities are an average over the top 30m of the mixed layer\n\ndepth :\n\n15m\n\nlong_name :\n\naverage total surface current speed\n\nunits :\n\nm s**-1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n723.96 MiB\n4.50 MiB\n\n\nShape\n(16071, 49, 241)\n(100, 49, 241)\n\n\nDask graph\n161 chunks in 3 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nmlotst\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(500, 49, 241), meta=np.ndarray&gt;\n\n\n\n\n_ChunkSizes :\n\n[1, 681, 1440]\n\ncell_methods :\n\narea: mean\n\nlong_name :\n\nDensity ocean mixed layer thickness\n\nstandard_name :\n\nocean_mixed_layer_thickness_defined_by_sigma_theta\n\nunit_long :\n\nMeters\n\nunits :\n\nm\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n723.96 MiB\n22.52 MiB\n\n\nShape\n(16071, 49, 241)\n(500, 49, 241)\n\n\nDask graph\n33 chunks in 3 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nsla\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(100, 49, 241), meta=np.ndarray&gt;\n\n\n\n\nancillary_variables :\n\nerr_sla\n\ncomment :\n\nThe sea level anomaly is the sea surface height above mean sea surface; it is referenced to the [1993, 2012] period; see the product user manual for details\n\ngrid_mapping :\n\ncrs\n\nlong_name :\n\nSea level anomaly\n\nstandard_name :\n\nsea_surface_height_above_sea_level\n\nunits :\n\nm\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n723.96 MiB\n4.50 MiB\n\n\nShape\n(16071, 49, 241)\n(100, 49, 241)\n\n\nDask graph\n161 chunks in 3 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nso\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(500, 49, 241), meta=np.ndarray&gt;\n\n\n\n\n_ChunkSizes :\n\n[1, 7, 341, 720]\n\ncell_methods :\n\narea: mean\n\nlong_name :\n\nmean sea water salinity at 0.49 metres below ocean surface\n\nstandard_name :\n\nsea_water_salinity\n\nunit_long :\n\nPractical Salinity Unit\n\nunits :\n\n1e-3\n\nvalid_max :\n\n28336\n\nvalid_min :\n\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n723.96 MiB\n22.52 MiB\n\n\nShape\n(16071, 49, 241)\n(500, 49, 241)\n\n\nDask graph\n33 chunks in 3 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nsst\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(100, 49, 241), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\nSea surface temperature\n\nnameCDM :\n\nSea_surface_temperature_surface\n\nnameECMWF :\n\nSea surface temperature\n\nproduct_type :\n\nanalysis\n\nshortNameECMWF :\n\nsst\n\nstandard_name :\n\nsea_surface_temperature\n\nunits :\n\nK\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n723.96 MiB\n4.50 MiB\n\n\nShape\n(16071, 49, 241)\n(100, 49, 241)\n\n\nDask graph\n161 chunks in 3 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\ntopo\n\n\n(lat, lon)\n\n\nfloat64\n\n\ndask.array&lt;chunksize=(49, 241), meta=np.ndarray&gt;\n\n\n\n\ncolorBarMaximum :\n\n8000.0\n\ncolorBarMinimum :\n\n-8000.0\n\ncolorBarPalette :\n\nTopography\n\ngrid_mapping :\n\nGDAL_Geographics\n\nioos_category :\n\nLocation\n\nlong_name :\n\nTopography\n\nstandard_name :\n\naltitude\n\nunits :\n\nmeters\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n92.26 kiB\n92.26 kiB\n\n\nShape\n(49, 241)\n(49, 241)\n\n\nDask graph\n1 chunks in 3 graph layers\n\n\nData type\nfloat64 numpy.ndarray\n\n\n\n\n\n\n\n\n\nu_curr\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(100, 49, 241), meta=np.ndarray&gt;\n\n\n\n\ncomment :\n\nVelocities are an average over the top 30m of the mixed layer\n\ncoverage_content_type :\n\nmodelResult\n\ndepth :\n\n15m\n\nlong_name :\n\nzonal total surface current\n\nsource :\n\nSSH source: CMEMS SSALTO/DUACS SEALEVEL_GLO_PHY_L4_MY_008_047 DOI: 10.48670/moi-00148 ; WIND source: ECMWF ERA5 10m wind DOI: 10.24381/cds.adbb2d47 ; SST source: CMC 0.2 deg SST V2.0 DOI: 10.5067/GHCMC-4FM02\n\nstandard_name :\n\neastward_sea_water_velocity\n\nunits :\n\nm s-1\n\nvalid_max :\n\n3.0\n\nvalid_min :\n\n-3.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n723.96 MiB\n4.50 MiB\n\n\nShape\n(16071, 49, 241)\n(100, 49, 241)\n\n\nDask graph\n161 chunks in 3 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nu_wind\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(100, 49, 241), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\n10 metre U wind component\n\nnameCDM :\n\n10_metre_U_wind_component_surface\n\nnameECMWF :\n\n10 metre U wind component\n\nproduct_type :\n\nanalysis\n\nshortNameECMWF :\n\n10u\n\nstandard_name :\n\neastward_wind\n\nunits :\n\nm s**-1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n723.96 MiB\n4.50 MiB\n\n\nShape\n(16071, 49, 241)\n(100, 49, 241)\n\n\nDask graph\n161 chunks in 3 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nug_curr\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(100, 49, 241), meta=np.ndarray&gt;\n\n\n\n\ncomment :\n\nGeostrophic velocities calculated from absolute dynamic topography\n\ndepth :\n\n15m\n\nlong_name :\n\nzonal geostrophic surface current\n\nsource :\n\nSSH source: CMEMS SSALTO/DUACS SEALEVEL_GLO_PHY_L4_MY_008_047 DOI: 10.48670/moi-00148\n\nstandard_name :\n\ngeostrophic_eastward_sea_water_velocity\n\nunits :\n\nm s-1\n\nvalid_max :\n\n3.0\n\nvalid_min :\n\n-3.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n723.96 MiB\n4.50 MiB\n\n\nShape\n(16071, 49, 241)\n(100, 49, 241)\n\n\nDask graph\n161 chunks in 3 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nv_curr\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(100, 49, 241), meta=np.ndarray&gt;\n\n\n\n\ncomment :\n\nVelocities are an average over the top 30m of the mixed layer\n\ncoverage_content_type :\n\nmodelResult\n\ndepth :\n\n15m\n\nlong_name :\n\nmeridional total surface current\n\nsource :\n\nSSH source: CMEMS SSALTO/DUACS SEALEVEL_GLO_PHY_L4_MY_008_047 DOI: 10.48670/moi-00148 ; WIND source: ECMWF ERA5 10m wind DOI: 10.24381/cds.adbb2d47 ; SST source: CMC 0.2 deg SST V2.0 DOI: 10.5067/GHCMC-4FM02\n\nstandard_name :\n\nnorthward_sea_water_velocity\n\nunits :\n\nm s-1\n\nvalid_max :\n\n3.0\n\nvalid_min :\n\n-3.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n723.96 MiB\n4.50 MiB\n\n\nShape\n(16071, 49, 241)\n(100, 49, 241)\n\n\nDask graph\n161 chunks in 3 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nv_wind\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(100, 49, 241), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\n10 metre V wind component\n\nnameCDM :\n\n10_metre_V_wind_component_surface\n\nnameECMWF :\n\n10 metre V wind component\n\nproduct_type :\n\nanalysis\n\nshortNameECMWF :\n\n10v\n\nstandard_name :\n\nnorthward_wind\n\nunits :\n\nm s**-1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n723.96 MiB\n4.50 MiB\n\n\nShape\n(16071, 49, 241)\n(100, 49, 241)\n\n\nDask graph\n161 chunks in 3 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nvg_curr\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(100, 49, 241), meta=np.ndarray&gt;\n\n\n\n\ncomment :\n\nGeostrophic velocities calculated from absolute dynamic topography\n\ndepth :\n\n15m\n\nlong_name :\n\nmeridional geostrophic surface current\n\nsource :\n\nSSH source: CMEMS SSALTO/DUACS SEALEVEL_GLO_PHY_L4_MY_008_047 DOI: 10.48670/moi-00148\n\nstandard_name :\n\ngeostrophic_northward_sea_water_velocity\n\nunits :\n\nm s-1\n\nvalid_max :\n\n3.0\n\nvalid_min :\n\n-3.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n723.96 MiB\n4.50 MiB\n\n\nShape\n(16071, 49, 241)\n(100, 49, 241)\n\n\nDask graph\n161 chunks in 3 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nwind_dir\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(100, 49, 241), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\n10 metre wind direction\n\nunits :\n\ndegrees\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n723.96 MiB\n4.50 MiB\n\n\nShape\n(16071, 49, 241)\n(100, 49, 241)\n\n\nDask graph\n161 chunks in 3 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nwind_speed\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(100, 49, 241), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\n10 metre absolute speed\n\nunits :\n\nm s**-1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n723.96 MiB\n4.50 MiB\n\n\nShape\n(16071, 49, 241)\n(100, 49, 241)\n\n\nDask graph\n161 chunks in 3 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\nIndexes: (3)latPandasIndexPandasIndex(Index([   0.0,  -0.25,   -0.5,  -0.75,   -1.0,  -1.25,   -1.5,  -1.75,   -2.0,\n        -2.25,   -2.5,  -2.75,   -3.0,  -3.25,   -3.5,  -3.75,   -4.0,  -4.25,\n         -4.5,  -4.75,   -5.0,  -5.25,   -5.5,  -5.75,   -6.0,  -6.25,   -6.5,\n        -6.75,   -7.0,  -7.25,   -7.5,  -7.75,   -8.0,  -8.25,   -8.5,  -8.75,\n         -9.0,  -9.25,   -9.5,  -9.75,  -10.0, -10.25,  -10.5, -10.75,  -11.0,\n       -11.25,  -11.5, -11.75,  -12.0],\n      dtype='float32', name='lat'))lonPandasIndexPandasIndex(Index([  42.0,  42.25,   42.5,  42.75,   43.0,  43.25,   43.5,  43.75,   44.0,\n        44.25,\n       ...\n        99.75,  100.0, 100.25,  100.5, 100.75,  101.0, 101.25,  101.5, 101.75,\n        102.0],\n      dtype='float32', name='lon', length=241))timePandasIndexPandasIndex(DatetimeIndex(['1979-01-01', '1979-01-02', '1979-01-03', '1979-01-04',\n               '1979-01-05', '1979-01-06', '1979-01-07', '1979-01-08',\n               '1979-01-09', '1979-01-10',\n               ...\n               '2022-12-22', '2022-12-23', '2022-12-24', '2022-12-25',\n               '2022-12-26', '2022-12-27', '2022-12-28', '2022-12-29',\n               '2022-12-30', '2022-12-31'],\n              dtype='datetime64[ns]', name='time', length=16071, freq=None))Attributes: (17)creator_email :minhphan@uw.educreator_name :Minh Phancreator_type :persondate_created :2023-07-19geospatial_lat_max :32.0geospatial_lat_min :-12.0geospatial_lat_resolution :0.25geospatial_lat_units :degrees_northgeospatial_lon_max :102.0geospatial_lon_min :42.0geospatial_lon_resolution :0.25geospatial_lon_units :degrees_eastsource :Earth & Space Research (ESR), Copernicus Climate Change Service (C3S), Copernicus Marine Environment Monitoring Service (CMEMS), United States Geological Survey (USGS)summary :Daily mean of 0.25 x 0.25 degrees gridded data from multiple climate variables that may influence the patterns of coastal upwelling in the focused areatime_coverage_end :2022-12-31T23:59:59time_coverage_start :1979-01-01T00:00:00title :Climate Data for Coastal Upwelling Machine Learning Project in Indian Ocean\n\n\n\n# slice by longitude\nds.sel(lon=slice(42, 45))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:          (time: 8523, lat: 177, lon: 13)\nCoordinates:\n  * lat              (lat) float32 32.0 31.75 31.5 31.25 ... -11.5 -11.75 -12.0\n  * lon              (lon) float32 42.0 42.25 42.5 42.75 ... 44.5 44.75 45.0\n  * time             (time) datetime64[ns] 1997-09-01 1997-09-02 ... 2020-12-31\nData variables: (12/14)\n    CHL              (time, lat, lon) float32 dask.array&lt;chunksize=(29, 177, 13), meta=np.ndarray&gt;\n    CHL_uncertainty  (time, lat, lon) float32 dask.array&lt;chunksize=(29, 177, 13), meta=np.ndarray&gt;\n    adt              (time, lat, lon) float32 dask.array&lt;chunksize=(29, 177, 13), meta=np.ndarray&gt;\n    air_temp         (time, lat, lon) float32 dask.array&lt;chunksize=(29, 177, 13), meta=np.ndarray&gt;\n    direction        (time, lat, lon) float32 dask.array&lt;chunksize=(29, 177, 13), meta=np.ndarray&gt;\n    sla              (time, lat, lon) float32 dask.array&lt;chunksize=(29, 177, 13), meta=np.ndarray&gt;\n    ...               ...\n    u_curr           (time, lat, lon) float32 dask.array&lt;chunksize=(29, 177, 13), meta=np.ndarray&gt;\n    u_wind           (time, lat, lon) float32 dask.array&lt;chunksize=(29, 177, 13), meta=np.ndarray&gt;\n    ug_curr          (time, lat, lon) float32 dask.array&lt;chunksize=(29, 177, 13), meta=np.ndarray&gt;\n    v_curr           (time, lat, lon) float32 dask.array&lt;chunksize=(29, 177, 13), meta=np.ndarray&gt;\n    v_wind           (time, lat, lon) float32 dask.array&lt;chunksize=(29, 177, 13), meta=np.ndarray&gt;\n    vg_curr          (time, lat, lon) float32 dask.array&lt;chunksize=(29, 177, 13), meta=np.ndarray&gt;\nAttributes: (12/17)\n    creator_email:              minhphan@uw.edu\n    creator_name:               Minh Phan\n    creator_type:               person\n    date_created:               2023-07-07\n    geospatial_lat_max:         32.0\n    geospatial_lat_min:         -12.0\n    ...                         ...\n    geospatial_lon_units:       degrees_east\n    source:                     OSCAR, ERA5 Reanalysis, Copernicus Climate Ch...\n    summary:                    Daily mean of 0.25 x 0.25 degrees gridded dat...\n    time_coverage_end:          2020-12-31T23:59:59\n    time_coverage_start:        2000-01-01T00:00:00\n    title:                      Climate Data for Coastal Upwelling Machine Le...xarray.DatasetDimensions:time: 8523lat: 177lon: 13Coordinates: (3)lat(lat)float3232.0 31.75 31.5 ... -11.75 -12.0long_name :latitudestandard_name :latitudeunits :degrees_northarray([ 32.  ,  31.75,  31.5 ,  31.25,  31.  ,  30.75,  30.5 ,  30.25,  30.  ,\n        29.75,  29.5 ,  29.25,  29.  ,  28.75,  28.5 ,  28.25,  28.  ,  27.75,\n        27.5 ,  27.25,  27.  ,  26.75,  26.5 ,  26.25,  26.  ,  25.75,  25.5 ,\n        25.25,  25.  ,  24.75,  24.5 ,  24.25,  24.  ,  23.75,  23.5 ,  23.25,\n        23.  ,  22.75,  22.5 ,  22.25,  22.  ,  21.75,  21.5 ,  21.25,  21.  ,\n        20.75,  20.5 ,  20.25,  20.  ,  19.75,  19.5 ,  19.25,  19.  ,  18.75,\n        18.5 ,  18.25,  18.  ,  17.75,  17.5 ,  17.25,  17.  ,  16.75,  16.5 ,\n        16.25,  16.  ,  15.75,  15.5 ,  15.25,  15.  ,  14.75,  14.5 ,  14.25,\n        14.  ,  13.75,  13.5 ,  13.25,  13.  ,  12.75,  12.5 ,  12.25,  12.  ,\n        11.75,  11.5 ,  11.25,  11.  ,  10.75,  10.5 ,  10.25,  10.  ,   9.75,\n         9.5 ,   9.25,   9.  ,   8.75,   8.5 ,   8.25,   8.  ,   7.75,   7.5 ,\n         7.25,   7.  ,   6.75,   6.5 ,   6.25,   6.  ,   5.75,   5.5 ,   5.25,\n         5.  ,   4.75,   4.5 ,   4.25,   4.  ,   3.75,   3.5 ,   3.25,   3.  ,\n         2.75,   2.5 ,   2.25,   2.  ,   1.75,   1.5 ,   1.25,   1.  ,   0.75,\n         0.5 ,   0.25,   0.  ,  -0.25,  -0.5 ,  -0.75,  -1.  ,  -1.25,  -1.5 ,\n        -1.75,  -2.  ,  -2.25,  -2.5 ,  -2.75,  -3.  ,  -3.25,  -3.5 ,  -3.75,\n        -4.  ,  -4.25,  -4.5 ,  -4.75,  -5.  ,  -5.25,  -5.5 ,  -5.75,  -6.  ,\n        -6.25,  -6.5 ,  -6.75,  -7.  ,  -7.25,  -7.5 ,  -7.75,  -8.  ,  -8.25,\n        -8.5 ,  -8.75,  -9.  ,  -9.25,  -9.5 ,  -9.75, -10.  , -10.25, -10.5 ,\n       -10.75, -11.  , -11.25, -11.5 , -11.75, -12.  ], dtype=float32)lon(lon)float3242.0 42.25 42.5 ... 44.5 44.75 45.0long_name :longitudestandard_name :longitudeunits :degrees_eastarray([42.  , 42.25, 42.5 , 42.75, 43.  , 43.25, 43.5 , 43.75, 44.  , 44.25,\n       44.5 , 44.75, 45.  ], dtype=float32)time(time)datetime64[ns]1997-09-01 ... 2020-12-31axis :Tcomment :Data is averaged over the daylong_name :time centered on the daystandard_name :timetime_bounds :2000-01-01 00:00:00 to 2000-01-01 23:59:59array(['1997-09-01T00:00:00.000000000', '1997-09-02T00:00:00.000000000',\n       '1997-09-03T00:00:00.000000000', ..., '2020-12-29T00:00:00.000000000',\n       '2020-12-30T00:00:00.000000000', '2020-12-31T00:00:00.000000000'],\n      dtype='datetime64[ns]')Data variables: (14)CHL(time, lat, lon)float32dask.array&lt;chunksize=(29, 177, 13), meta=np.ndarray&gt;_ChunkSizes :[1, 256, 256]ancillary_variables :flags CHL_uncertaintycoverage_content_type :modelResultinput_files_reprocessings :Processors versions: MODIS R2022.0NRT/VIIRSN R2022.0NRT/OLCIA 07.02/VIIRSJ1 R2022.0NRT/OLCIB 07.02long_name :Chlorophyll-a concentration - Mean of the binned pixelsstandard_name :mass_concentration_of_chlorophyll_a_in_sea_watertype :surfaceunits :milligram m-3valid_max :1000.0valid_min :0.0\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n74.81 MiB\n898.83 kiB\n\n\nShape\n(8523, 177, 13)\n(100, 177, 13)\n\n\nDask graph\n87 chunks in 4 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\nCHL_uncertainty\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(29, 177, 13), meta=np.ndarray&gt;\n\n\n\n\n_ChunkSizes :\n\n[1, 256, 256]\n\ncoverage_content_type :\n\nqualityInformation\n\nlong_name :\n\nChlorophyll-a concentration - Uncertainty estimation\n\nunits :\n\n%\n\nvalid_max :\n\n32767\n\nvalid_min :\n\n0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n74.81 MiB\n898.83 kiB\n\n\nShape\n(8523, 177, 13)\n(100, 177, 13)\n\n\nDask graph\n87 chunks in 4 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nadt\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(29, 177, 13), meta=np.ndarray&gt;\n\n\n\n\ncomment :\n\nThe absolute dynamic topography is the sea surface height above geoid; the adt is obtained as follows: adt=sla+mdt where mdt is the mean dynamic topography; see the product user manual for details\n\ngrid_mapping :\n\ncrs\n\nlong_name :\n\nAbsolute dynamic topography\n\nstandard_name :\n\nsea_surface_height_above_geoid\n\nunits :\n\nm\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n74.81 MiB\n898.83 kiB\n\n\nShape\n(8523, 177, 13)\n(100, 177, 13)\n\n\nDask graph\n87 chunks in 4 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nair_temp\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(29, 177, 13), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\n2 metre temperature\n\nnameCDM :\n\n2_metre_temperature_surface\n\nnameECMWF :\n\n2 metre temperature\n\nproduct_type :\n\nanalysis\n\nshortNameECMWF :\n\n2t\n\nstandard_name :\n\nair_temperature\n\nunits :\n\nK\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n74.81 MiB\n898.83 kiB\n\n\nShape\n(8523, 177, 13)\n(100, 177, 13)\n\n\nDask graph\n87 chunks in 4 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\ndirection\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(29, 177, 13), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\n10 metre wind direction\n\nunits :\n\n¬∞C\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n74.81 MiB\n898.83 kiB\n\n\nShape\n(8523, 177, 13)\n(100, 177, 13)\n\n\nDask graph\n87 chunks in 4 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nsla\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(29, 177, 13), meta=np.ndarray&gt;\n\n\n\n\nancillary_variables :\n\nerr_sla\n\ncomment :\n\nThe sea level anomaly is the sea surface height above mean sea surface; it is referenced to the [1993, 2012] period; see the product user manual for details\n\ngrid_mapping :\n\ncrs\n\nlong_name :\n\nSea level anomaly\n\nstandard_name :\n\nsea_surface_height_above_sea_level\n\nunits :\n\nm\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n74.81 MiB\n898.83 kiB\n\n\nShape\n(8523, 177, 13)\n(100, 177, 13)\n\n\nDask graph\n87 chunks in 4 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nspeed\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(29, 177, 13), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\n10 metre absolute speed\n\nunits :\n\nm s**-1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n74.81 MiB\n898.83 kiB\n\n\nShape\n(8523, 177, 13)\n(100, 177, 13)\n\n\nDask graph\n87 chunks in 4 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nsst\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(29, 177, 13), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\nSea surface temperature\n\nnameCDM :\n\nSea_surface_temperature_surface\n\nnameECMWF :\n\nSea surface temperature\n\nproduct_type :\n\nanalysis\n\nshortNameECMWF :\n\nsst\n\nstandard_name :\n\nsea_surface_temperature\n\nunits :\n\nK\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n74.81 MiB\n898.83 kiB\n\n\nShape\n(8523, 177, 13)\n(100, 177, 13)\n\n\nDask graph\n87 chunks in 4 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nu_curr\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(29, 177, 13), meta=np.ndarray&gt;\n\n\n\n\ncomment :\n\nVelocities are an average over the top 30m of the mixed layer\n\ncoverage_content_type :\n\nmodelResult\n\ndepth :\n\n15m\n\nlong_name :\n\nzonal total surface current\n\nsource :\n\nSSH source: CMEMS SSALTO/DUACS SEALEVEL_GLO_PHY_L4_MY_008_047 DOI: 10.48670/moi-00148 ; WIND source: ECMWF ERA5 10m wind DOI: 10.24381/cds.adbb2d47 ; SST source: CMC 0.2 deg SST V2.0 DOI: 10.5067/GHCMC-4FM02\n\nstandard_name :\n\neastward_sea_water_velocity\n\nunits :\n\nm s-1\n\nvalid_max :\n\n3.0\n\nvalid_min :\n\n-3.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n74.81 MiB\n898.83 kiB\n\n\nShape\n(8523, 177, 13)\n(100, 177, 13)\n\n\nDask graph\n87 chunks in 4 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nu_wind\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(29, 177, 13), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\n10 metre U wind component\n\nnameCDM :\n\n10_metre_U_wind_component_surface\n\nnameECMWF :\n\n10 metre U wind component\n\nproduct_type :\n\nanalysis\n\nshortNameECMWF :\n\n10u\n\nstandard_name :\n\neastward_wind\n\nunits :\n\nm s**-1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n74.81 MiB\n898.83 kiB\n\n\nShape\n(8523, 177, 13)\n(100, 177, 13)\n\n\nDask graph\n87 chunks in 4 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nug_curr\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(29, 177, 13), meta=np.ndarray&gt;\n\n\n\n\ncomment :\n\nGeostrophic velocities calculated from absolute dynamic topography\n\ndepth :\n\n15m\n\nlong_name :\n\nzonal geostrophic surface current\n\nsource :\n\nSSH source: CMEMS SSALTO/DUACS SEALEVEL_GLO_PHY_L4_MY_008_047 DOI: 10.48670/moi-00148\n\nstandard_name :\n\ngeostrophic_eastward_sea_water_velocity\n\nunits :\n\nm s-1\n\nvalid_max :\n\n3.0\n\nvalid_min :\n\n-3.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n74.81 MiB\n898.83 kiB\n\n\nShape\n(8523, 177, 13)\n(100, 177, 13)\n\n\nDask graph\n87 chunks in 4 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nv_curr\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(29, 177, 13), meta=np.ndarray&gt;\n\n\n\n\ncomment :\n\nVelocities are an average over the top 30m of the mixed layer\n\ncoverage_content_type :\n\nmodelResult\n\ndepth :\n\n15m\n\nlong_name :\n\nmeridional total surface current\n\nsource :\n\nSSH source: CMEMS SSALTO/DUACS SEALEVEL_GLO_PHY_L4_MY_008_047 DOI: 10.48670/moi-00148 ; WIND source: ECMWF ERA5 10m wind DOI: 10.24381/cds.adbb2d47 ; SST source: CMC 0.2 deg SST V2.0 DOI: 10.5067/GHCMC-4FM02\n\nstandard_name :\n\nnorthward_sea_water_velocity\n\nunits :\n\nm s-1\n\nvalid_max :\n\n3.0\n\nvalid_min :\n\n-3.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n74.81 MiB\n898.83 kiB\n\n\nShape\n(8523, 177, 13)\n(100, 177, 13)\n\n\nDask graph\n87 chunks in 4 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nv_wind\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(29, 177, 13), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\n10 metre V wind component\n\nnameCDM :\n\n10_metre_V_wind_component_surface\n\nnameECMWF :\n\n10 metre V wind component\n\nproduct_type :\n\nanalysis\n\nshortNameECMWF :\n\n10v\n\nstandard_name :\n\nnorthward_wind\n\nunits :\n\nm s**-1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n74.81 MiB\n898.83 kiB\n\n\nShape\n(8523, 177, 13)\n(100, 177, 13)\n\n\nDask graph\n87 chunks in 4 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nvg_curr\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(29, 177, 13), meta=np.ndarray&gt;\n\n\n\n\ncomment :\n\nGeostrophic velocities calculated from absolute dynamic topography\n\ndepth :\n\n15m\n\nlong_name :\n\nmeridional geostrophic surface current\n\nsource :\n\nSSH source: CMEMS SSALTO/DUACS SEALEVEL_GLO_PHY_L4_MY_008_047 DOI: 10.48670/moi-00148\n\nstandard_name :\n\ngeostrophic_northward_sea_water_velocity\n\nunits :\n\nm s-1\n\nvalid_max :\n\n3.0\n\nvalid_min :\n\n-3.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n74.81 MiB\n898.83 kiB\n\n\nShape\n(8523, 177, 13)\n(100, 177, 13)\n\n\nDask graph\n87 chunks in 4 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\nAttributes: (17)creator_email :minhphan@uw.educreator_name :Minh Phancreator_type :persondate_created :2023-07-07geospatial_lat_max :32.0geospatial_lat_min :-12.0geospatial_lat_resolution :0.25geospatial_lat_units :degrees_northgeospatial_lon_max :102.0geospatial_lon_min :42.0geospatial_lon_resolution :0.25geospatial_lon_units :degrees_eastsource :OSCAR, ERA5 Reanalysis, Copernicus Climate Change Service (C3S), Copernicus Marine Environment Monitoring Service (CMEMS)summary :Daily mean of 0.25 x 0.25 degrees gridded data from multiple climate variables that may influence the patterns of coastal upwelling in the focused areatime_coverage_end :2020-12-31T23:59:59time_coverage_start :2000-01-01T00:00:00title :Climate Data for Coastal Upwelling Machine Learning Project in Indian Ocean\n\n\n\n# slice by time\nds.sel(time=slice('1998', '1999'))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:          (time: 730, lat: 177, lon: 241)\nCoordinates:\n  * lat              (lat) float32 32.0 31.75 31.5 31.25 ... -11.5 -11.75 -12.0\n  * lon              (lon) float32 42.0 42.25 42.5 42.75 ... 101.5 101.8 102.0\n  * time             (time) datetime64[ns] 1998-01-01 1998-01-02 ... 1999-12-31\nData variables: (12/14)\n    CHL              (time, lat, lon) float32 dask.array&lt;chunksize=(7, 177, 241), meta=np.ndarray&gt;\n    CHL_uncertainty  (time, lat, lon) float32 dask.array&lt;chunksize=(7, 177, 241), meta=np.ndarray&gt;\n    adt              (time, lat, lon) float32 dask.array&lt;chunksize=(7, 177, 241), meta=np.ndarray&gt;\n    air_temp         (time, lat, lon) float32 dask.array&lt;chunksize=(7, 177, 241), meta=np.ndarray&gt;\n    direction        (time, lat, lon) float32 dask.array&lt;chunksize=(7, 177, 241), meta=np.ndarray&gt;\n    sla              (time, lat, lon) float32 dask.array&lt;chunksize=(7, 177, 241), meta=np.ndarray&gt;\n    ...               ...\n    u_curr           (time, lat, lon) float32 dask.array&lt;chunksize=(7, 177, 241), meta=np.ndarray&gt;\n    u_wind           (time, lat, lon) float32 dask.array&lt;chunksize=(7, 177, 241), meta=np.ndarray&gt;\n    ug_curr          (time, lat, lon) float32 dask.array&lt;chunksize=(7, 177, 241), meta=np.ndarray&gt;\n    v_curr           (time, lat, lon) float32 dask.array&lt;chunksize=(7, 177, 241), meta=np.ndarray&gt;\n    v_wind           (time, lat, lon) float32 dask.array&lt;chunksize=(7, 177, 241), meta=np.ndarray&gt;\n    vg_curr          (time, lat, lon) float32 dask.array&lt;chunksize=(7, 177, 241), meta=np.ndarray&gt;\nAttributes: (12/17)\n    creator_email:              minhphan@uw.edu\n    creator_name:               Minh Phan\n    creator_type:               person\n    date_created:               2023-07-07\n    geospatial_lat_max:         32.0\n    geospatial_lat_min:         -12.0\n    ...                         ...\n    geospatial_lon_units:       degrees_east\n    source:                     OSCAR, ERA5 Reanalysis, Copernicus Climate Ch...\n    summary:                    Daily mean of 0.25 x 0.25 degrees gridded dat...\n    time_coverage_end:          2020-12-31T23:59:59\n    time_coverage_start:        2000-01-01T00:00:00\n    title:                      Climate Data for Coastal Upwelling Machine Le...xarray.DatasetDimensions:time: 730lat: 177lon: 241Coordinates: (3)lat(lat)float3232.0 31.75 31.5 ... -11.75 -12.0long_name :latitudestandard_name :latitudeunits :degrees_northarray([ 32.  ,  31.75,  31.5 ,  31.25,  31.  ,  30.75,  30.5 ,  30.25,  30.  ,\n        29.75,  29.5 ,  29.25,  29.  ,  28.75,  28.5 ,  28.25,  28.  ,  27.75,\n        27.5 ,  27.25,  27.  ,  26.75,  26.5 ,  26.25,  26.  ,  25.75,  25.5 ,\n        25.25,  25.  ,  24.75,  24.5 ,  24.25,  24.  ,  23.75,  23.5 ,  23.25,\n        23.  ,  22.75,  22.5 ,  22.25,  22.  ,  21.75,  21.5 ,  21.25,  21.  ,\n        20.75,  20.5 ,  20.25,  20.  ,  19.75,  19.5 ,  19.25,  19.  ,  18.75,\n        18.5 ,  18.25,  18.  ,  17.75,  17.5 ,  17.25,  17.  ,  16.75,  16.5 ,\n        16.25,  16.  ,  15.75,  15.5 ,  15.25,  15.  ,  14.75,  14.5 ,  14.25,\n        14.  ,  13.75,  13.5 ,  13.25,  13.  ,  12.75,  12.5 ,  12.25,  12.  ,\n        11.75,  11.5 ,  11.25,  11.  ,  10.75,  10.5 ,  10.25,  10.  ,   9.75,\n         9.5 ,   9.25,   9.  ,   8.75,   8.5 ,   8.25,   8.  ,   7.75,   7.5 ,\n         7.25,   7.  ,   6.75,   6.5 ,   6.25,   6.  ,   5.75,   5.5 ,   5.25,\n         5.  ,   4.75,   4.5 ,   4.25,   4.  ,   3.75,   3.5 ,   3.25,   3.  ,\n         2.75,   2.5 ,   2.25,   2.  ,   1.75,   1.5 ,   1.25,   1.  ,   0.75,\n         0.5 ,   0.25,   0.  ,  -0.25,  -0.5 ,  -0.75,  -1.  ,  -1.25,  -1.5 ,\n        -1.75,  -2.  ,  -2.25,  -2.5 ,  -2.75,  -3.  ,  -3.25,  -3.5 ,  -3.75,\n        -4.  ,  -4.25,  -4.5 ,  -4.75,  -5.  ,  -5.25,  -5.5 ,  -5.75,  -6.  ,\n        -6.25,  -6.5 ,  -6.75,  -7.  ,  -7.25,  -7.5 ,  -7.75,  -8.  ,  -8.25,\n        -8.5 ,  -8.75,  -9.  ,  -9.25,  -9.5 ,  -9.75, -10.  , -10.25, -10.5 ,\n       -10.75, -11.  , -11.25, -11.5 , -11.75, -12.  ], dtype=float32)lon(lon)float3242.0 42.25 42.5 ... 101.8 102.0long_name :longitudestandard_name :longitudeunits :degrees_eastarray([ 42.  ,  42.25,  42.5 , ..., 101.5 , 101.75, 102.  ], dtype=float32)time(time)datetime64[ns]1998-01-01 ... 1999-12-31axis :Tcomment :Data is averaged over the daylong_name :time centered on the daystandard_name :timetime_bounds :2000-01-01 00:00:00 to 2000-01-01 23:59:59array(['1998-01-01T00:00:00.000000000', '1998-01-02T00:00:00.000000000',\n       '1998-01-03T00:00:00.000000000', ..., '1999-12-29T00:00:00.000000000',\n       '1999-12-30T00:00:00.000000000', '1999-12-31T00:00:00.000000000'],\n      dtype='datetime64[ns]')Data variables: (14)CHL(time, lat, lon)float32dask.array&lt;chunksize=(7, 177, 241), meta=np.ndarray&gt;_ChunkSizes :[1, 256, 256]ancillary_variables :flags CHL_uncertaintycoverage_content_type :modelResultinput_files_reprocessings :Processors versions: MODIS R2022.0NRT/VIIRSN R2022.0NRT/OLCIA 07.02/VIIRSJ1 R2022.0NRT/OLCIB 07.02long_name :Chlorophyll-a concentration - Mean of the binned pixelsstandard_name :mass_concentration_of_chlorophyll_a_in_sea_watertype :surfaceunits :milligram m-3valid_max :1000.0valid_min :0.0\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n118.79 MiB\n16.27 MiB\n\n\nShape\n(730, 177, 241)\n(100, 177, 241)\n\n\nDask graph\n9 chunks in 4 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\nCHL_uncertainty\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(7, 177, 241), meta=np.ndarray&gt;\n\n\n\n\n_ChunkSizes :\n\n[1, 256, 256]\n\ncoverage_content_type :\n\nqualityInformation\n\nlong_name :\n\nChlorophyll-a concentration - Uncertainty estimation\n\nunits :\n\n%\n\nvalid_max :\n\n32767\n\nvalid_min :\n\n0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n118.79 MiB\n16.27 MiB\n\n\nShape\n(730, 177, 241)\n(100, 177, 241)\n\n\nDask graph\n9 chunks in 4 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nadt\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(7, 177, 241), meta=np.ndarray&gt;\n\n\n\n\ncomment :\n\nThe absolute dynamic topography is the sea surface height above geoid; the adt is obtained as follows: adt=sla+mdt where mdt is the mean dynamic topography; see the product user manual for details\n\ngrid_mapping :\n\ncrs\n\nlong_name :\n\nAbsolute dynamic topography\n\nstandard_name :\n\nsea_surface_height_above_geoid\n\nunits :\n\nm\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n118.79 MiB\n16.27 MiB\n\n\nShape\n(730, 177, 241)\n(100, 177, 241)\n\n\nDask graph\n9 chunks in 4 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nair_temp\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(7, 177, 241), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\n2 metre temperature\n\nnameCDM :\n\n2_metre_temperature_surface\n\nnameECMWF :\n\n2 metre temperature\n\nproduct_type :\n\nanalysis\n\nshortNameECMWF :\n\n2t\n\nstandard_name :\n\nair_temperature\n\nunits :\n\nK\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n118.79 MiB\n16.27 MiB\n\n\nShape\n(730, 177, 241)\n(100, 177, 241)\n\n\nDask graph\n9 chunks in 4 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\ndirection\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(7, 177, 241), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\n10 metre wind direction\n\nunits :\n\n¬∞C\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n118.79 MiB\n16.27 MiB\n\n\nShape\n(730, 177, 241)\n(100, 177, 241)\n\n\nDask graph\n9 chunks in 4 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nsla\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(7, 177, 241), meta=np.ndarray&gt;\n\n\n\n\nancillary_variables :\n\nerr_sla\n\ncomment :\n\nThe sea level anomaly is the sea surface height above mean sea surface; it is referenced to the [1993, 2012] period; see the product user manual for details\n\ngrid_mapping :\n\ncrs\n\nlong_name :\n\nSea level anomaly\n\nstandard_name :\n\nsea_surface_height_above_sea_level\n\nunits :\n\nm\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n118.79 MiB\n16.27 MiB\n\n\nShape\n(730, 177, 241)\n(100, 177, 241)\n\n\nDask graph\n9 chunks in 4 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nspeed\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(7, 177, 241), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\n10 metre absolute speed\n\nunits :\n\nm s**-1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n118.79 MiB\n16.27 MiB\n\n\nShape\n(730, 177, 241)\n(100, 177, 241)\n\n\nDask graph\n9 chunks in 4 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nsst\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(7, 177, 241), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\nSea surface temperature\n\nnameCDM :\n\nSea_surface_temperature_surface\n\nnameECMWF :\n\nSea surface temperature\n\nproduct_type :\n\nanalysis\n\nshortNameECMWF :\n\nsst\n\nstandard_name :\n\nsea_surface_temperature\n\nunits :\n\nK\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n118.79 MiB\n16.27 MiB\n\n\nShape\n(730, 177, 241)\n(100, 177, 241)\n\n\nDask graph\n9 chunks in 4 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nu_curr\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(7, 177, 241), meta=np.ndarray&gt;\n\n\n\n\ncomment :\n\nVelocities are an average over the top 30m of the mixed layer\n\ncoverage_content_type :\n\nmodelResult\n\ndepth :\n\n15m\n\nlong_name :\n\nzonal total surface current\n\nsource :\n\nSSH source: CMEMS SSALTO/DUACS SEALEVEL_GLO_PHY_L4_MY_008_047 DOI: 10.48670/moi-00148 ; WIND source: ECMWF ERA5 10m wind DOI: 10.24381/cds.adbb2d47 ; SST source: CMC 0.2 deg SST V2.0 DOI: 10.5067/GHCMC-4FM02\n\nstandard_name :\n\neastward_sea_water_velocity\n\nunits :\n\nm s-1\n\nvalid_max :\n\n3.0\n\nvalid_min :\n\n-3.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n118.79 MiB\n16.27 MiB\n\n\nShape\n(730, 177, 241)\n(100, 177, 241)\n\n\nDask graph\n9 chunks in 4 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nu_wind\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(7, 177, 241), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\n10 metre U wind component\n\nnameCDM :\n\n10_metre_U_wind_component_surface\n\nnameECMWF :\n\n10 metre U wind component\n\nproduct_type :\n\nanalysis\n\nshortNameECMWF :\n\n10u\n\nstandard_name :\n\neastward_wind\n\nunits :\n\nm s**-1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n118.79 MiB\n16.27 MiB\n\n\nShape\n(730, 177, 241)\n(100, 177, 241)\n\n\nDask graph\n9 chunks in 4 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nug_curr\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(7, 177, 241), meta=np.ndarray&gt;\n\n\n\n\ncomment :\n\nGeostrophic velocities calculated from absolute dynamic topography\n\ndepth :\n\n15m\n\nlong_name :\n\nzonal geostrophic surface current\n\nsource :\n\nSSH source: CMEMS SSALTO/DUACS SEALEVEL_GLO_PHY_L4_MY_008_047 DOI: 10.48670/moi-00148\n\nstandard_name :\n\ngeostrophic_eastward_sea_water_velocity\n\nunits :\n\nm s-1\n\nvalid_max :\n\n3.0\n\nvalid_min :\n\n-3.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n118.79 MiB\n16.27 MiB\n\n\nShape\n(730, 177, 241)\n(100, 177, 241)\n\n\nDask graph\n9 chunks in 4 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nv_curr\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(7, 177, 241), meta=np.ndarray&gt;\n\n\n\n\ncomment :\n\nVelocities are an average over the top 30m of the mixed layer\n\ncoverage_content_type :\n\nmodelResult\n\ndepth :\n\n15m\n\nlong_name :\n\nmeridional total surface current\n\nsource :\n\nSSH source: CMEMS SSALTO/DUACS SEALEVEL_GLO_PHY_L4_MY_008_047 DOI: 10.48670/moi-00148 ; WIND source: ECMWF ERA5 10m wind DOI: 10.24381/cds.adbb2d47 ; SST source: CMC 0.2 deg SST V2.0 DOI: 10.5067/GHCMC-4FM02\n\nstandard_name :\n\nnorthward_sea_water_velocity\n\nunits :\n\nm s-1\n\nvalid_max :\n\n3.0\n\nvalid_min :\n\n-3.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n118.79 MiB\n16.27 MiB\n\n\nShape\n(730, 177, 241)\n(100, 177, 241)\n\n\nDask graph\n9 chunks in 4 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nv_wind\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(7, 177, 241), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\n10 metre V wind component\n\nnameCDM :\n\n10_metre_V_wind_component_surface\n\nnameECMWF :\n\n10 metre V wind component\n\nproduct_type :\n\nanalysis\n\nshortNameECMWF :\n\n10v\n\nstandard_name :\n\nnorthward_wind\n\nunits :\n\nm s**-1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n118.79 MiB\n16.27 MiB\n\n\nShape\n(730, 177, 241)\n(100, 177, 241)\n\n\nDask graph\n9 chunks in 4 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nvg_curr\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(7, 177, 241), meta=np.ndarray&gt;\n\n\n\n\ncomment :\n\nGeostrophic velocities calculated from absolute dynamic topography\n\ndepth :\n\n15m\n\nlong_name :\n\nmeridional geostrophic surface current\n\nsource :\n\nSSH source: CMEMS SSALTO/DUACS SEALEVEL_GLO_PHY_L4_MY_008_047 DOI: 10.48670/moi-00148\n\nstandard_name :\n\ngeostrophic_northward_sea_water_velocity\n\nunits :\n\nm s-1\n\nvalid_max :\n\n3.0\n\nvalid_min :\n\n-3.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n118.79 MiB\n16.27 MiB\n\n\nShape\n(730, 177, 241)\n(100, 177, 241)\n\n\nDask graph\n9 chunks in 4 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\nAttributes: (17)creator_email :minhphan@uw.educreator_name :Minh Phancreator_type :persondate_created :2023-07-07geospatial_lat_max :32.0geospatial_lat_min :-12.0geospatial_lat_resolution :0.25geospatial_lat_units :degrees_northgeospatial_lon_max :102.0geospatial_lon_min :42.0geospatial_lon_resolution :0.25geospatial_lon_units :degrees_eastsource :OSCAR, ERA5 Reanalysis, Copernicus Climate Change Service (C3S), Copernicus Marine Environment Monitoring Service (CMEMS)summary :Daily mean of 0.25 x 0.25 degrees gridded data from multiple climate variables that may influence the patterns of coastal upwelling in the focused areatime_coverage_end :2020-12-31T23:59:59time_coverage_start :2000-01-01T00:00:00title :Climate Data for Coastal Upwelling Machine Learning Project in Indian Ocean\n\n\n\n# slice by variable\nds[['u_curr', 'u_wind']]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:  (time: 8523, lat: 177, lon: 241)\nCoordinates:\n  * lat      (lat) float32 32.0 31.75 31.5 31.25 ... -11.25 -11.5 -11.75 -12.0\n  * lon      (lon) float32 42.0 42.25 42.5 42.75 ... 101.2 101.5 101.8 102.0\n  * time     (time) datetime64[ns] 1997-09-01 1997-09-02 ... 2020-12-31\nData variables:\n    u_curr   (time, lat, lon) float32 dask.array&lt;chunksize=(29, 177, 241), meta=np.ndarray&gt;\n    u_wind   (time, lat, lon) float32 dask.array&lt;chunksize=(29, 177, 241), meta=np.ndarray&gt;\nAttributes: (12/17)\n    creator_email:              minhphan@uw.edu\n    creator_name:               Minh Phan\n    creator_type:               person\n    date_created:               2023-07-07\n    geospatial_lat_max:         32.0\n    geospatial_lat_min:         -12.0\n    ...                         ...\n    geospatial_lon_units:       degrees_east\n    source:                     OSCAR, ERA5 Reanalysis, Copernicus Climate Ch...\n    summary:                    Daily mean of 0.25 x 0.25 degrees gridded dat...\n    time_coverage_end:          2020-12-31T23:59:59\n    time_coverage_start:        2000-01-01T00:00:00\n    title:                      Climate Data for Coastal Upwelling Machine Le...xarray.DatasetDimensions:time: 8523lat: 177lon: 241Coordinates: (3)lat(lat)float3232.0 31.75 31.5 ... -11.75 -12.0long_name :latitudestandard_name :latitudeunits :degrees_northarray([ 32.  ,  31.75,  31.5 ,  31.25,  31.  ,  30.75,  30.5 ,  30.25,  30.  ,\n        29.75,  29.5 ,  29.25,  29.  ,  28.75,  28.5 ,  28.25,  28.  ,  27.75,\n        27.5 ,  27.25,  27.  ,  26.75,  26.5 ,  26.25,  26.  ,  25.75,  25.5 ,\n        25.25,  25.  ,  24.75,  24.5 ,  24.25,  24.  ,  23.75,  23.5 ,  23.25,\n        23.  ,  22.75,  22.5 ,  22.25,  22.  ,  21.75,  21.5 ,  21.25,  21.  ,\n        20.75,  20.5 ,  20.25,  20.  ,  19.75,  19.5 ,  19.25,  19.  ,  18.75,\n        18.5 ,  18.25,  18.  ,  17.75,  17.5 ,  17.25,  17.  ,  16.75,  16.5 ,\n        16.25,  16.  ,  15.75,  15.5 ,  15.25,  15.  ,  14.75,  14.5 ,  14.25,\n        14.  ,  13.75,  13.5 ,  13.25,  13.  ,  12.75,  12.5 ,  12.25,  12.  ,\n        11.75,  11.5 ,  11.25,  11.  ,  10.75,  10.5 ,  10.25,  10.  ,   9.75,\n         9.5 ,   9.25,   9.  ,   8.75,   8.5 ,   8.25,   8.  ,   7.75,   7.5 ,\n         7.25,   7.  ,   6.75,   6.5 ,   6.25,   6.  ,   5.75,   5.5 ,   5.25,\n         5.  ,   4.75,   4.5 ,   4.25,   4.  ,   3.75,   3.5 ,   3.25,   3.  ,\n         2.75,   2.5 ,   2.25,   2.  ,   1.75,   1.5 ,   1.25,   1.  ,   0.75,\n         0.5 ,   0.25,   0.  ,  -0.25,  -0.5 ,  -0.75,  -1.  ,  -1.25,  -1.5 ,\n        -1.75,  -2.  ,  -2.25,  -2.5 ,  -2.75,  -3.  ,  -3.25,  -3.5 ,  -3.75,\n        -4.  ,  -4.25,  -4.5 ,  -4.75,  -5.  ,  -5.25,  -5.5 ,  -5.75,  -6.  ,\n        -6.25,  -6.5 ,  -6.75,  -7.  ,  -7.25,  -7.5 ,  -7.75,  -8.  ,  -8.25,\n        -8.5 ,  -8.75,  -9.  ,  -9.25,  -9.5 ,  -9.75, -10.  , -10.25, -10.5 ,\n       -10.75, -11.  , -11.25, -11.5 , -11.75, -12.  ], dtype=float32)lon(lon)float3242.0 42.25 42.5 ... 101.8 102.0long_name :longitudestandard_name :longitudeunits :degrees_eastarray([ 42.  ,  42.25,  42.5 , ..., 101.5 , 101.75, 102.  ], dtype=float32)time(time)datetime64[ns]1997-09-01 ... 2020-12-31axis :Tcomment :Data is averaged over the daylong_name :time centered on the daystandard_name :timetime_bounds :2000-01-01 00:00:00 to 2000-01-01 23:59:59array(['1997-09-01T00:00:00.000000000', '1997-09-02T00:00:00.000000000',\n       '1997-09-03T00:00:00.000000000', ..., '2020-12-29T00:00:00.000000000',\n       '2020-12-30T00:00:00.000000000', '2020-12-31T00:00:00.000000000'],\n      dtype='datetime64[ns]')Data variables: (2)u_curr(time, lat, lon)float32dask.array&lt;chunksize=(29, 177, 241), meta=np.ndarray&gt;comment :Velocities are an average over the top 30m of the mixed layercoverage_content_type :modelResultdepth :15mlong_name :zonal total surface currentsource :SSH source: CMEMS SSALTO/DUACS SEALEVEL_GLO_PHY_L4_MY_008_047 DOI: 10.48670/moi-00148 ; WIND source: ECMWF ERA5 10m wind DOI: 10.24381/cds.adbb2d47 ; SST source: CMC 0.2 deg SST V2.0 DOI: 10.5067/GHCMC-4FM02standard_name :eastward_sea_water_velocityunits :m s-1valid_max :3.0valid_min :-3.0\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n1.35 GiB\n16.27 MiB\n\n\nShape\n(8523, 177, 241)\n(100, 177, 241)\n\n\nDask graph\n87 chunks in 3 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\nu_wind\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(29, 177, 241), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\n10 metre U wind component\n\nnameCDM :\n\n10_metre_U_wind_component_surface\n\nnameECMWF :\n\n10 metre U wind component\n\nproduct_type :\n\nanalysis\n\nshortNameECMWF :\n\n10u\n\nstandard_name :\n\neastward_wind\n\nunits :\n\nm s**-1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n1.35 GiB\n16.27 MiB\n\n\nShape\n(8523, 177, 241)\n(100, 177, 241)\n\n\nDask graph\n87 chunks in 3 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\nAttributes: (17)creator_email :minhphan@uw.educreator_name :Minh Phancreator_type :persondate_created :2023-07-07geospatial_lat_max :32.0geospatial_lat_min :-12.0geospatial_lat_resolution :0.25geospatial_lat_units :degrees_northgeospatial_lon_max :102.0geospatial_lon_min :42.0geospatial_lon_resolution :0.25geospatial_lon_units :degrees_eastsource :OSCAR, ERA5 Reanalysis, Copernicus Climate Change Service (C3S), Copernicus Marine Environment Monitoring Service (CMEMS)summary :Daily mean of 0.25 x 0.25 degrees gridded data from multiple climate variables that may influence the patterns of coastal upwelling in the focused areatime_coverage_end :2020-12-31T23:59:59time_coverage_start :2000-01-01T00:00:00title :Climate Data for Coastal Upwelling Machine Learning Project in Indian Ocean\n\n\n\n# combine multiple slicing options all at once\nds[['u_curr', 'u_wind']].sel(time=slice('1998', '1999'), \n                             lat=slice(0, -12), \n                             lon=slice(42, 45))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:  (time: 730, lat: 49, lon: 13)\nCoordinates:\n  * lat      (lat) float32 0.0 -0.25 -0.5 -0.75 ... -11.25 -11.5 -11.75 -12.0\n  * lon      (lon) float32 42.0 42.25 42.5 42.75 43.0 ... 44.25 44.5 44.75 45.0\n  * time     (time) datetime64[ns] 1998-01-01 1998-01-02 ... 1999-12-31\nData variables:\n    u_curr   (time, lat, lon) float32 dask.array&lt;chunksize=(7, 49, 13), meta=np.ndarray&gt;\n    u_wind   (time, lat, lon) float32 dask.array&lt;chunksize=(7, 49, 13), meta=np.ndarray&gt;\nAttributes: (12/17)\n    creator_email:              minhphan@uw.edu\n    creator_name:               Minh Phan\n    creator_type:               person\n    date_created:               2023-07-07\n    geospatial_lat_max:         32.0\n    geospatial_lat_min:         -12.0\n    ...                         ...\n    geospatial_lon_units:       degrees_east\n    source:                     OSCAR, ERA5 Reanalysis, Copernicus Climate Ch...\n    summary:                    Daily mean of 0.25 x 0.25 degrees gridded dat...\n    time_coverage_end:          2020-12-31T23:59:59\n    time_coverage_start:        2000-01-01T00:00:00\n    title:                      Climate Data for Coastal Upwelling Machine Le...xarray.DatasetDimensions:time: 730lat: 49lon: 13Coordinates: (3)lat(lat)float320.0 -0.25 -0.5 ... -11.75 -12.0long_name :latitudestandard_name :latitudeunits :degrees_northarray([  0.  ,  -0.25,  -0.5 ,  -0.75,  -1.  ,  -1.25,  -1.5 ,  -1.75,  -2.  ,\n        -2.25,  -2.5 ,  -2.75,  -3.  ,  -3.25,  -3.5 ,  -3.75,  -4.  ,  -4.25,\n        -4.5 ,  -4.75,  -5.  ,  -5.25,  -5.5 ,  -5.75,  -6.  ,  -6.25,  -6.5 ,\n        -6.75,  -7.  ,  -7.25,  -7.5 ,  -7.75,  -8.  ,  -8.25,  -8.5 ,  -8.75,\n        -9.  ,  -9.25,  -9.5 ,  -9.75, -10.  , -10.25, -10.5 , -10.75, -11.  ,\n       -11.25, -11.5 , -11.75, -12.  ], dtype=float32)lon(lon)float3242.0 42.25 42.5 ... 44.5 44.75 45.0long_name :longitudestandard_name :longitudeunits :degrees_eastarray([42.  , 42.25, 42.5 , 42.75, 43.  , 43.25, 43.5 , 43.75, 44.  , 44.25,\n       44.5 , 44.75, 45.  ], dtype=float32)time(time)datetime64[ns]1998-01-01 ... 1999-12-31axis :Tcomment :Data is averaged over the daylong_name :time centered on the daystandard_name :timetime_bounds :2000-01-01 00:00:00 to 2000-01-01 23:59:59array(['1998-01-01T00:00:00.000000000', '1998-01-02T00:00:00.000000000',\n       '1998-01-03T00:00:00.000000000', ..., '1999-12-29T00:00:00.000000000',\n       '1999-12-30T00:00:00.000000000', '1999-12-31T00:00:00.000000000'],\n      dtype='datetime64[ns]')Data variables: (2)u_curr(time, lat, lon)float32dask.array&lt;chunksize=(7, 49, 13), meta=np.ndarray&gt;comment :Velocities are an average over the top 30m of the mixed layercoverage_content_type :modelResultdepth :15mlong_name :zonal total surface currentsource :SSH source: CMEMS SSALTO/DUACS SEALEVEL_GLO_PHY_L4_MY_008_047 DOI: 10.48670/moi-00148 ; WIND source: ECMWF ERA5 10m wind DOI: 10.24381/cds.adbb2d47 ; SST source: CMC 0.2 deg SST V2.0 DOI: 10.5067/GHCMC-4FM02standard_name :eastward_sea_water_velocityunits :m s-1valid_max :3.0valid_min :-3.0\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n1.77 MiB\n248.83 kiB\n\n\nShape\n(730, 49, 13)\n(100, 49, 13)\n\n\nDask graph\n9 chunks in 4 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\nu_wind\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(7, 49, 13), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\n10 metre U wind component\n\nnameCDM :\n\n10_metre_U_wind_component_surface\n\nnameECMWF :\n\n10 metre U wind component\n\nproduct_type :\n\nanalysis\n\nshortNameECMWF :\n\n10u\n\nstandard_name :\n\neastward_wind\n\nunits :\n\nm s**-1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n1.77 MiB\n248.83 kiB\n\n\nShape\n(730, 49, 13)\n(100, 49, 13)\n\n\nDask graph\n9 chunks in 4 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\nAttributes: (17)creator_email :minhphan@uw.educreator_name :Minh Phancreator_type :persondate_created :2023-07-07geospatial_lat_max :32.0geospatial_lat_min :-12.0geospatial_lat_resolution :0.25geospatial_lat_units :degrees_northgeospatial_lon_max :102.0geospatial_lon_min :42.0geospatial_lon_resolution :0.25geospatial_lon_units :degrees_eastsource :OSCAR, ERA5 Reanalysis, Copernicus Climate Change Service (C3S), Copernicus Marine Environment Monitoring Service (CMEMS)summary :Daily mean of 0.25 x 0.25 degrees gridded data from multiple climate variables that may influence the patterns of coastal upwelling in the focused areatime_coverage_end :2020-12-31T23:59:59time_coverage_start :2000-01-01T00:00:00title :Climate Data for Coastal Upwelling Machine Learning Project in Indian Ocean"
  },
  {
    "objectID": "python-notebooks/02_Using_Data.html#graphing-data-basics",
    "href": "python-notebooks/02_Using_Data.html#graphing-data-basics",
    "title": "IO Zarr file",
    "section": "Graphing data (basics)",
    "text": "Graphing data (basics)\nWe can also graph the data right from slicing, especially heatmaps from 2D arrays, or line charts. This is especially useful when we want to inspect elements on the go.\n\n# make sure that the array you slice for a heatmap visualization is a 2D array\nheatmap_arr = ds['speed'].sel(time='2000-01-02')\nheatmap_arr\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.DataArray 'speed' (lat: 177, lon: 241)&gt;\ndask.array&lt;getitem, shape=(177, 241), dtype=float32, chunksize=(177, 241), chunktype=numpy.ndarray&gt;\nCoordinates:\n  * lat      (lat) float32 32.0 31.75 31.5 31.25 ... -11.25 -11.5 -11.75 -12.0\n  * lon      (lon) float32 42.0 42.25 42.5 42.75 ... 101.2 101.5 101.8 102.0\n    time     datetime64[ns] 2000-01-02\nAttributes:\n    long_name:  10 metre absolute speed\n    units:      m s**-1xarray.DataArray'speed'lat: 177lon: 241dask.array&lt;chunksize=(177, 241), meta=np.ndarray&gt;\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n166.63 kiB\n166.63 kiB\n\n\nShape\n(177, 241)\n(177, 241)\n\n\nDask graph\n1 chunks in 4 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\nCoordinates: (3)lat(lat)float3232.0 31.75 31.5 ... -11.75 -12.0long_name :latitudestandard_name :latitudeunits :degrees_northarray([ 32.  ,  31.75,  31.5 ,  31.25,  31.  ,  30.75,  30.5 ,  30.25,  30.  ,\n        29.75,  29.5 ,  29.25,  29.  ,  28.75,  28.5 ,  28.25,  28.  ,  27.75,\n        27.5 ,  27.25,  27.  ,  26.75,  26.5 ,  26.25,  26.  ,  25.75,  25.5 ,\n        25.25,  25.  ,  24.75,  24.5 ,  24.25,  24.  ,  23.75,  23.5 ,  23.25,\n        23.  ,  22.75,  22.5 ,  22.25,  22.  ,  21.75,  21.5 ,  21.25,  21.  ,\n        20.75,  20.5 ,  20.25,  20.  ,  19.75,  19.5 ,  19.25,  19.  ,  18.75,\n        18.5 ,  18.25,  18.  ,  17.75,  17.5 ,  17.25,  17.  ,  16.75,  16.5 ,\n        16.25,  16.  ,  15.75,  15.5 ,  15.25,  15.  ,  14.75,  14.5 ,  14.25,\n        14.  ,  13.75,  13.5 ,  13.25,  13.  ,  12.75,  12.5 ,  12.25,  12.  ,\n        11.75,  11.5 ,  11.25,  11.  ,  10.75,  10.5 ,  10.25,  10.  ,   9.75,\n         9.5 ,   9.25,   9.  ,   8.75,   8.5 ,   8.25,   8.  ,   7.75,   7.5 ,\n         7.25,   7.  ,   6.75,   6.5 ,   6.25,   6.  ,   5.75,   5.5 ,   5.25,\n         5.  ,   4.75,   4.5 ,   4.25,   4.  ,   3.75,   3.5 ,   3.25,   3.  ,\n         2.75,   2.5 ,   2.25,   2.  ,   1.75,   1.5 ,   1.25,   1.  ,   0.75,\n         0.5 ,   0.25,   0.  ,  -0.25,  -0.5 ,  -0.75,  -1.  ,  -1.25,  -1.5 ,\n        -1.75,  -2.  ,  -2.25,  -2.5 ,  -2.75,  -3.  ,  -3.25,  -3.5 ,  -3.75,\n        -4.  ,  -4.25,  -4.5 ,  -4.75,  -5.  ,  -5.25,  -5.5 ,  -5.75,  -6.  ,\n        -6.25,  -6.5 ,  -6.75,  -7.  ,  -7.25,  -7.5 ,  -7.75,  -8.  ,  -8.25,\n        -8.5 ,  -8.75,  -9.  ,  -9.25,  -9.5 ,  -9.75, -10.  , -10.25, -10.5 ,\n       -10.75, -11.  , -11.25, -11.5 , -11.75, -12.  ], dtype=float32)lon(lon)float3242.0 42.25 42.5 ... 101.8 102.0long_name :longitudestandard_name :longitudeunits :degrees_eastarray([ 42.  ,  42.25,  42.5 , ..., 101.5 , 101.75, 102.  ], dtype=float32)time()datetime64[ns]2000-01-02axis :Tcomment :Data is averaged over the daylong_name :time centered on the daystandard_name :timetime_bounds :2000-01-01 00:00:00 to 2000-01-01 23:59:59array('2000-01-02T00:00:00.000000000', dtype='datetime64[ns]')Attributes: (2)long_name :10 metre absolute speedunits :m s**-1\n\n\n\n2D array graphing with matplotlib\nBy default, graphing arrays with Xarray is done using matplotlib.\nFor 2D arrays we have multiple options to choose for our graphs\n\nHeatmaps\n\nheatmap_arr.plot.imshow()\n\n&lt;matplotlib.image.AxesImage at 0x7f55c4c574c0&gt;\n\n\n\n\n\n\n\nContour maps\n\n# contour map with no filling\nheatmap_arr.plot.contour()\n\n&lt;matplotlib.contour.QuadContourSet at 0x7f55c41ead60&gt;\n\n\n\n\n\n\n# contour map with color filling\nheatmap_arr.plot.contourf()\n\n&lt;matplotlib.contour.QuadContourSet at 0x7f55c40b8a90&gt;\n\n\n\n\n\n\n\nSurface plot\n\nheatmap_arr.plot.surface()\n\n&lt;mpl_toolkits.mplot3d.art3d.Poly3DCollection at 0x7f55b4f46fd0&gt;\n\n\n\n\n\n\n\n\n1D array graphing with Matplotlib\nWe can also plot line graphs if our data is presented in 1D arrays. For the example below, we average our wind speed over the whole area and plot it over time. Matplotlib automatically infers what graph to create if you don‚Äôt explicitly call which one to. This piece of code below is a demonstration:\n\nds['speed'].mean(dim=['lat', 'lon']).plot(figsize=(10, 5))\n\n\n\n\nWe can add in parameters to customize our graphs, as additional arguments are passed to the underlying matplotlib plot() function.\n\nds['air_temp'].mean(dim=['lat', 'lon']).sel(time=slice('2007', '2009')).plot.line('r-o', figsize=(10,5), markersize=1)\n\n\n\n\n\n# creating a new Axe object if there is no currently\n# available one\nax = plt.gca() \nds['direction'].plot.hist(ax = ax)\nax.set_xlabel('10 metre wind direction (degrees east)')\nax.set_ylabel('frequency')\nax.set_title('Daily average wind direction distribution over covered area (1979-2022)')\n\nText(0.5, 1.0, 'Daily average wind direction distribution over covered area (1979-2022)')\n\n\n\n\n\n\n\nGraphing with holoviews\nXarray also support graphing using holoviews if you want interactive visualizations.\n\n# scroll along the axes to stretch the graph\nheatmap_arr.hvplot().options(cmap='bgy', width=600, height=500)"
  },
  {
    "objectID": "python-notebooks/02_Using_Data.html#resampling",
    "href": "python-notebooks/02_Using_Data.html#resampling",
    "title": "IO Zarr file",
    "section": "Resampling",
    "text": "Resampling\n\nWith xarray\nIf your xarray version works just fine with resample(), here‚Äôs the most straightforward way to resample your data temporally. It may take a long while for the data to finish resampling, especially if your dataset is big and your resampling frequency is small.\n\nds['CHL'].resample(time='1M').mean()\n\nTypeError: __init__() got an unexpected keyword argument 'base'\n\n\n\n\nWithout xarray\nIf not, which was the case we encountered for a bit during the documentation, we developed a roundabout using Pandas‚Äô equivalent function with the same name, which also happened to also be the underlying function that the library itself depends on (of course, more optimized), to help us perform resampling on our dataset.\n\n# resampling is having issues, so this is a temporary solution using Pandas \n# to perform resampling by month on one range...\n\n# choose a small range just in case overloadding happens...\n\nds_to_resample = ds['CHL'].sel(lat=slice(10, 5), lon=slice(75, 80)).to_dataframe()\n\n\ndf_resampled = ds_to_resample.groupby([pd.Grouper(freq='1M', level='time'),\n                        pd.Grouper(level='lon'),\n                        pd.Grouper(level='lat')]).mean()\n\n\nds_resampled = xr.Dataset.from_dataframe(df_resampled)\n\nWe can see that after resampling, our time dimension size is reduced from 8523 (days) to 280 (months). Resampling is successful!\n\n# original ds_to_resample object before converting to dataframe\nds['CHL'].sel(lat=slice(10, 5), lon=slice(75, 80))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.DataArray 'CHL' (time: 8523, lat: 21, lon: 21)&gt;\ndask.array&lt;getitem, shape=(8523, 21, 21), dtype=float32, chunksize=(100, 21, 21), chunktype=numpy.ndarray&gt;\nCoordinates:\n  * lat      (lat) float32 10.0 9.75 9.5 9.25 9.0 8.75 ... 6.0 5.75 5.5 5.25 5.0\n  * lon      (lon) float32 75.0 75.25 75.5 75.75 76.0 ... 79.25 79.5 79.75 80.0\n  * time     (time) datetime64[ns] 1997-09-01 1997-09-02 ... 2020-12-31\nAttributes:\n    _ChunkSizes:                [1, 256, 256]\n    ancillary_variables:        flags CHL_uncertainty\n    coverage_content_type:      modelResult\n    input_files_reprocessings:  Processors versions: MODIS R2022.0NRT/VIIRSN ...\n    long_name:                  Chlorophyll-a concentration - Mean of the bin...\n    standard_name:              mass_concentration_of_chlorophyll_a_in_sea_water\n    type:                       surface\n    units:                      milligram m-3\n    valid_max:                  1000.0\n    valid_min:                  0.0xarray.DataArray'CHL'time: 8523lat: 21lon: 21dask.array&lt;chunksize=(29, 21, 21), meta=np.ndarray&gt;\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n14.34 MiB\n172.27 kiB\n\n\nShape\n(8523, 21, 21)\n(100, 21, 21)\n\n\nDask graph\n87 chunks in 4 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\nCoordinates: (3)lat(lat)float3210.0 9.75 9.5 9.25 ... 5.5 5.25 5.0long_name :latitudestandard_name :latitudeunits :degrees_northarray([10.  ,  9.75,  9.5 ,  9.25,  9.  ,  8.75,  8.5 ,  8.25,  8.  ,  7.75,\n        7.5 ,  7.25,  7.  ,  6.75,  6.5 ,  6.25,  6.  ,  5.75,  5.5 ,  5.25,\n        5.  ], dtype=float32)lon(lon)float3275.0 75.25 75.5 ... 79.5 79.75 80.0long_name :longitudestandard_name :longitudeunits :degrees_eastarray([75.  , 75.25, 75.5 , 75.75, 76.  , 76.25, 76.5 , 76.75, 77.  , 77.25,\n       77.5 , 77.75, 78.  , 78.25, 78.5 , 78.75, 79.  , 79.25, 79.5 , 79.75,\n       80.  ], dtype=float32)time(time)datetime64[ns]1997-09-01 ... 2020-12-31axis :Tcomment :Data is averaged over the daylong_name :time centered on the daystandard_name :timetime_bounds :2000-01-01 00:00:00 to 2000-01-01 23:59:59array(['1997-09-01T00:00:00.000000000', '1997-09-02T00:00:00.000000000',\n       '1997-09-03T00:00:00.000000000', ..., '2020-12-29T00:00:00.000000000',\n       '2020-12-30T00:00:00.000000000', '2020-12-31T00:00:00.000000000'],\n      dtype='datetime64[ns]')Attributes: (10)_ChunkSizes :[1, 256, 256]ancillary_variables :flags CHL_uncertaintycoverage_content_type :modelResultinput_files_reprocessings :Processors versions: MODIS R2022.0NRT/VIIRSN R2022.0NRT/OLCIA 07.02/VIIRSJ1 R2022.0NRT/OLCIB 07.02long_name :Chlorophyll-a concentration - Mean of the binned pixelsstandard_name :mass_concentration_of_chlorophyll_a_in_sea_watertype :surfaceunits :milligram m-3valid_max :1000.0valid_min :0.0\n\n\n\nds_resampled\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:  (time: 280, lon: 21, lat: 21)\nCoordinates:\n  * time     (time) datetime64[ns] 1997-09-30 1997-10-31 ... 2020-12-31\n  * lon      (lon) float32 75.0 75.25 75.5 75.75 76.0 ... 79.25 79.5 79.75 80.0\n  * lat      (lat) float32 5.0 5.25 5.5 5.75 6.0 6.25 ... 9.0 9.25 9.5 9.75 10.0\nData variables:\n    CHL      (time, lon, lat) float32 0.1385 0.1499 0.1564 ... 3.708 nan 1.711xarray.DatasetDimensions:time: 280lon: 21lat: 21Coordinates: (3)time(time)datetime64[ns]1997-09-30 ... 2020-12-31array(['1997-09-30T00:00:00.000000000', '1997-10-31T00:00:00.000000000',\n       '1997-11-30T00:00:00.000000000', ..., '2020-10-31T00:00:00.000000000',\n       '2020-11-30T00:00:00.000000000', '2020-12-31T00:00:00.000000000'],\n      dtype='datetime64[ns]')lon(lon)float3275.0 75.25 75.5 ... 79.5 79.75 80.0array([75.  , 75.25, 75.5 , 75.75, 76.  , 76.25, 76.5 , 76.75, 77.  , 77.25,\n       77.5 , 77.75, 78.  , 78.25, 78.5 , 78.75, 79.  , 79.25, 79.5 , 79.75,\n       80.  ], dtype=float32)lat(lat)float325.0 5.25 5.5 5.75 ... 9.5 9.75 10.0array([ 5.  ,  5.25,  5.5 ,  5.75,  6.  ,  6.25,  6.5 ,  6.75,  7.  ,  7.25,\n        7.5 ,  7.75,  8.  ,  8.25,  8.5 ,  8.75,  9.  ,  9.25,  9.5 ,  9.75,\n       10.  ], dtype=float32)Data variables: (1)CHL(time, lon, lat)float320.1385 0.1499 0.1564 ... nan 1.711array([[[0.1385212 , 0.1498749 , 0.1563529 , ..., 0.3523786 ,\n         0.3302194 , 0.27931017],\n        [0.13932636, 0.15005617, 0.16188657, ..., 0.27985424,\n         0.25826713, 0.25897202],\n        [0.13675058, 0.15252402, 0.16407087, ..., 0.27715033,\n         0.29253623, 0.3230303 ],\n        ...,\n        [0.1495098 , 0.15891236, 0.18904588, ..., 0.8308414 ,\n         0.74546653, 0.86624825],\n        [0.15241794, 0.16238719, 0.18823716, ..., 0.79390526,\n         0.7422508 , 0.7233521 ],\n        [0.1451448 , 0.16036132, 0.18141416, ..., 0.8997232 ,\n                nan, 0.96131516]],\n\n       [[0.1093621 , 0.10374813, 0.10539079, ..., 0.13424906,\n         0.13703308, 0.14298904],\n        [0.10377687, 0.10544709, 0.10046278, ..., 0.13290247,\n         0.15486094, 0.1702798 ],\n        [0.10687282, 0.10397465, 0.1069003 , ..., 0.15223369,\n         0.1741167 , 0.20661627],\n...\n        [0.5205713 , 0.36632097, 0.2877642 , ..., 1.2882708 ,\n         1.2678039 , 1.5669655 ],\n        [0.51227796, 0.28432006, 0.2710863 , ..., 1.7268424 ,\n         1.5777267 , 1.7181929 ],\n        [0.39916685, 0.2676246 , 0.27991247, ..., 3.0547936 ,\n                nan, 1.5532995 ]],\n\n       [[0.18839231, 0.19221735, 0.19571806, ..., 0.17631547,\n         0.18033697, 0.17666994],\n        [0.1838335 , 0.18939696, 0.20410095, ..., 0.17700717,\n         0.17362022, 0.178996  ],\n        [0.18872349, 0.19384259, 0.19978735, ..., 0.18237141,\n         0.18065988, 0.18640748],\n        ...,\n        [0.21531856, 0.22947444, 0.2684734 , ..., 1.6615558 ,\n         1.8347846 , 1.9687383 ],\n        [0.234376  , 0.25239286, 0.28643745, ..., 2.0614278 ,\n         1.6890424 , 1.7758049 ],\n        [0.25885618, 0.27874196, 0.30844975, ..., 3.7082324 ,\n                nan, 1.7107744 ]]], dtype=float32)Attributes: (0)\n\n\n‚Ä¶ and as a matter of fact, we can graph this data, too!\n\nCHL_month = ds_resampled.mean(dim=['lat', 'lon']).hvplot(label='monthly resampling').options(color='red', )\n\n\nCHL_day = ds['CHL'].sel(lat=slice(10, 5), lon=slice(75, 80)).mean(dim=['lat', 'lon']).hvplot(label='daily resampling').options(color='blue')\n\n\n(CHL_day*CHL_month).options(title='Monthly vs Daily resampling of chlorophyll-a levels', xlabel='year')"
  },
  {
    "objectID": "python-notebooks/02_Xarray.html#why-do-we-need-xarray",
    "href": "python-notebooks/02_Xarray.html#why-do-we-need-xarray",
    "title": "03. Introduction to xarray",
    "section": "Why do we need xarray?",
    "text": "Why do we need xarray?\nAs Geoscientists, we often work with time series of data with two or more dimensions: a time series of calibrated, orthorectified satellite images; two-dimensional grids of surface air temperature from an atmospheric reanalysis; or three-dimensional (level, x, y) cubes of ocean salinity from an ocean model. These data are often provided in GeoTIFF, NetCDF or HDF format with rich and useful metadata that we want to retain, or even use in our analysis. Common analyses include calculating means, standard deviations and anomalies over time or one or more spatial dimensions (e.g.¬†zonal means). Model output often includes multiple variables that you want to apply similar analyses to.\n\n\n\nA schematic of multi-dimensional data\n\n\nThe schematic above shows a typical data structure for multi-dimensional data. There are two data cubes, one for temperature and one for precipitation. Common coordinate variables, in this case latitude, longitude and time are associated with each variable. Each variable, including coordinate variables, will have a set of attributes: name, units, missing value, etc. The file containing the data may also have attributes: source of the data, model name coordinate reference system if the data are projected. Writing code using low-level packages such as netcdf4 and numpy to read the data, then perform analysis, and write the results to file is time consuming and prone to errors."
  },
  {
    "objectID": "python-notebooks/02_Xarray.html#what-is-xarray",
    "href": "python-notebooks/02_Xarray.html#what-is-xarray",
    "title": "03. Introduction to xarray",
    "section": "What is xarray",
    "text": "What is xarray\nxarray is an open-source project and python package to work with labelled multi-dimensional arrays. It is leverages numpy, pandas, matplotlib and dask to build Dataset and DataArray objects with built-in methods to subset, analyze, interpolate, and plot multi-dimensional data. It makes working with multi-dimensional data cubes efficient and fun. It will change your life for the better. You‚Äôll be more attractive, more interesting, and better equiped to take on lifes challenges."
  },
  {
    "objectID": "python-notebooks/02_Xarray.html#what-you-will-learn-from-this-tutorial",
    "href": "python-notebooks/02_Xarray.html#what-you-will-learn-from-this-tutorial",
    "title": "03. Introduction to xarray",
    "section": "What you will learn from this tutorial",
    "text": "What you will learn from this tutorial\nIn this tutorial you will learn how to:\n\nload a netcdf file into xarray\ninterrogate the Dataset and understand the difference between DataArray and Dataset\nsubset a Dataset\ncalculate annual and monthly mean fields\ncalculate a time series of zonal means\nplot these results\n\nAs always, we‚Äôll start by importing xarray. We‚Äôll follow convention by giving the module the shortname xr\n\nimport xarray as xr\nxr.set_options(keep_attrs=True)\n\nI‚Äôm going to use one of xarray‚Äôs tutorial datasets. In this case, air temperature from the NCEP reanalysis. I‚Äôll assign the result of the open_dataset to ds. I may change this to access a dataset directly\n\nds = xr.tutorial.open_dataset(\"air_temperature\")\n\nAs we are in an interactive environment, we can just type ds to see what we have.\n\nds\n\nFirst thing to notice is that ds is an xarray.Dataset object. It has dimensions, lat, lon, and time. It also has coordinate variables with the same names as these dimensions. These coordinate variables are 1-dimensional. This is a NetCDF convention. The Dataset contains one data variable, air. This has dimensions (time, lat, lon).\nClicking on the document icon reveals attributes for each variable. Clicking on the disk icon reveals a representation of the data.\nEach of the data and coordinate variables can be accessed and examined using the variable name as a key.\n\nds.air\n\n\nds['air']\n\nThese are xarray.DataArray objects. This is the basic building block for xarray.\nVariables can also be accessed as attributes of ds.\n\nds.time\n\nA major difference between accessing a variable as an attribute versus using a key is that the attribute is read-only but the key method can be used to update the variable. For example, if I want to convert the units of air from Kelvin to degrees Celsius.\n\nds['air'] = ds.air - 273.15\n\nThis approach can also be used to add new variables\n\nds['air_kelvin'] = ds.air + 273.15\n\nIt is helpful to update attributes such as units, this saves time, confusion and mistakes, especially when you save the dataset.\n\nds['air'].attrs['units'] = 'degC'\n\n\nds"
  },
  {
    "objectID": "python-notebooks/02_Xarray.html#subsetting-and-indexing",
    "href": "python-notebooks/02_Xarray.html#subsetting-and-indexing",
    "title": "03. Introduction to xarray",
    "section": "Subsetting and Indexing",
    "text": "Subsetting and Indexing\nSubsetting and indexing methods depend on whether you are working with a Dataset or DataArray. A DataArray can be accessed using positional indexing just like a numpy array. To access the temperature field for the first time step, you do the following.\n\nds['air'][0,:,:]\n\nNote this returns a DataArray with coordinates but not attributes.\nHowever, the real power is being able to access variables using coordinate variables. I can get the same subset using the following. (It‚Äôs also more explicit about what is being selected and robust in case I modify the DataArray and expect the same output.)\n\nds['air'].sel(time='2013-01-01').time\n\n\nds.air.sel(time='2013-01-01')\n\nI can also do slices. I‚Äôll extract temperatures for the state of Colorado. The bounding box for the state is [-109 E, -102 E, 37 N, 41 N].\nIn the code below, pay attention to both the order of the coordinates and the range of values. The first value of the lat coordinate variable is 41 N, the second value is 37 N. Unfortunately, xarray expects slices of coordinates to be in the same order as the coordinates. Note lon is 0 to 360 not -180 to 180, and I let python calculate it for me within the slice.\n\nds.air.sel(lat=slice(41.,37.), lon=slice(360-109,360-102))\n\nWhat if we want temperature for a point, for example Denver, CO (39.72510678889283 N, -104.98785545855408 E). xarray can handle this! If we just want data from the nearest grid point, we can use sel and specify the method as ‚Äúnearest‚Äù.\n\ndenver_lat, denver_lon = 39.72510678889283, -104.98785545855408\n\n\nds.air.sel(lat=denver_lat, lon=360+denver_lon, method='nearest')\n\nIf we want to interpolate, we can use interp(). In this case I use linear or bilinear interpolation.\ninterp() can also be used to resample data to a new grid and even reproject data\n\nds.air.interp(lat=denver_lat, lon=360+denver_lon, method='linear')\n\nsel() and interp() can also be used on Dataset objects.\n\nds.sel(lat=slice(41.,37.), lon=slice(360-109,360-102))\n\n\nds.interp(lat=denver_lat, lon=360+denver_lon, method='linear')"
  },
  {
    "objectID": "python-notebooks/02_Xarray.html#analysis",
    "href": "python-notebooks/02_Xarray.html#analysis",
    "title": "03. Introduction to xarray",
    "section": "Analysis",
    "text": "Analysis\nAs a simple example, let‚Äôs try to calculate a mean field for the whole time range.\n\nds.mean(dim='time')\n\nWe can also calculate a zonal mean (averaging over longitude)\n\nds.mean(dim='lon')\n\nOther aggregation methods include min(), max(), std(), along with others.\n\nds.std(dim='time')\n\nThe data we have are in 6h timesteps. This can be resampled to daily or monthly. If you are familiar with pandas, xarray uses the same methods.\n\nds.resample(time='M').mean()\n\n\nds_mon = ds.resample(time='M').mean()\nds_mon\n\nThis is a really short time series but as an example, let‚Äôs calculate a monthly climatology (at least for 2 months). For this we can use groupby()\n\nds_clim = ds_mon.groupby(ds_mon.time.dt.month).mean()"
  },
  {
    "objectID": "python-notebooks/02_Xarray.html#plot-results",
    "href": "python-notebooks/02_Xarray.html#plot-results",
    "title": "03. Introduction to xarray",
    "section": "Plot results",
    "text": "Plot results\nFinally, let‚Äôs plot the results! This will plot the lat/lon axes of the original ds DataArray.\n\nds_clim.air.sel(month=10).plot()"
  },
  {
    "objectID": "python-notebooks/02_Xarray_hvplot.html#why-do-we-need-xarray",
    "href": "python-notebooks/02_Xarray_hvplot.html#why-do-we-need-xarray",
    "title": "03. Introduction to xarray",
    "section": "Why do we need xarray?",
    "text": "Why do we need xarray?\nAs Geoscientists, we often work with time series of data with two or more dimensions: a time series of calibrated, orthorectified satellite images; two-dimensional grids of surface air temperature from an atmospheric reanalysis; or three-dimensional (level, x, y) cubes of ocean salinity from an ocean model. These data are often provided in GeoTIFF, NetCDF or HDF format with rich and useful metadata that we want to retain, or even use in our analysis. Common analyses include calculating means, standard deviations and anomalies over time or one or more spatial dimensions (e.g.¬†zonal means). Model output often includes multiple variables that you want to apply similar analyses to.\n\n\n\nA schematic of multi-dimensional data\n\n\nThe schematic above shows a typical data structure for multi-dimensional data. There are two data cubes, one for temperature and one for precipitation. Common coordinate variables, in this case latitude, longitude and time are associated with each variable. Each variable, including coordinate variables, will have a set of attributes: name, units, missing value, etc. The file containing the data may also have attributes: source of the data, model name coordinate reference system if the data are projected. Writing code using low-level packages such as netcdf4 and numpy to read the data, then perform analysis, and write the results to file is time consuming and prone to errors."
  },
  {
    "objectID": "python-notebooks/02_Xarray_hvplot.html#what-is-xarray",
    "href": "python-notebooks/02_Xarray_hvplot.html#what-is-xarray",
    "title": "03. Introduction to xarray",
    "section": "What is xarray",
    "text": "What is xarray\nxarray is an open-source project and python package to work with labelled multi-dimensional arrays. It is leverages numpy, pandas, matplotlib and dask to build Dataset and DataArray objects with built-in methods to subset, analyze, interpolate, and plot multi-dimensional data. It makes working with multi-dimensional data cubes efficient and fun. It will change your life for the better. You‚Äôll be more attractive, more interesting, and better equiped to take on lifes challenges."
  },
  {
    "objectID": "python-notebooks/02_Xarray_hvplot.html#what-you-will-learn-from-this-tutorial",
    "href": "python-notebooks/02_Xarray_hvplot.html#what-you-will-learn-from-this-tutorial",
    "title": "03. Introduction to xarray",
    "section": "What you will learn from this tutorial",
    "text": "What you will learn from this tutorial\nIn this tutorial you will learn how to:\n\nload a netcdf file into xarray\ninterrogate the Dataset and understand the difference between DataArray and Dataset\nsubset a Dataset\ncalculate annual and monthly mean fields\ncalculate a time series of zonal means\nplot these results\n\nAs always, we‚Äôll start by importing xarray. We‚Äôll follow convention by giving the module the shortname xr\n\nimport xarray as xr\nxr.set_options(keep_attrs=True)\nimport hvplot.xarray\n\n\n\n\n\n\n\n\n\n\n\nI‚Äôm going to use one of xarray‚Äôs tutorial datasets. In this case, air temperature from the NCEP reanalysis. I‚Äôll assign the result of the open_dataset to ds. I may change this to access a dataset directly\n\nds = xr.tutorial.open_dataset(\"air_temperature\")\n\nAs we are in an interactive environment, we can just type ds to see what we have.\n\nds\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:  (lat: 25, time: 2920, lon: 53)\nCoordinates:\n  * lat      (lat) float32 75.0 72.5 70.0 67.5 65.0 ... 25.0 22.5 20.0 17.5 15.0\n  * lon      (lon) float32 200.0 202.5 205.0 207.5 ... 322.5 325.0 327.5 330.0\n  * time     (time) datetime64[ns] 2013-01-01 ... 2014-12-31T18:00:00\nData variables:\n    air      (time, lat, lon) float32 ...\nAttributes:\n    Conventions:  COARDS\n    title:        4x daily NMC reanalysis (1948)\n    description:  Data is from NMC initialized reanalysis\\n(4x/day).  These a...\n    platform:     Model\n    references:   http://www.esrl.noaa.gov/psd/data/gridded/data.ncep.reanaly...xarray.DatasetDimensions:lat: 25time: 2920lon: 53Coordinates: (3)lat(lat)float3275.0 72.5 70.0 ... 20.0 17.5 15.0standard_name :latitudelong_name :Latitudeunits :degrees_northaxis :Yarray([75. , 72.5, 70. , 67.5, 65. , 62.5, 60. , 57.5, 55. , 52.5, 50. , 47.5,\n       45. , 42.5, 40. , 37.5, 35. , 32.5, 30. , 27.5, 25. , 22.5, 20. , 17.5,\n       15. ], dtype=float32)lon(lon)float32200.0 202.5 205.0 ... 327.5 330.0standard_name :longitudelong_name :Longitudeunits :degrees_eastaxis :Xarray([200. , 202.5, 205. , 207.5, 210. , 212.5, 215. , 217.5, 220. , 222.5,\n       225. , 227.5, 230. , 232.5, 235. , 237.5, 240. , 242.5, 245. , 247.5,\n       250. , 252.5, 255. , 257.5, 260. , 262.5, 265. , 267.5, 270. , 272.5,\n       275. , 277.5, 280. , 282.5, 285. , 287.5, 290. , 292.5, 295. , 297.5,\n       300. , 302.5, 305. , 307.5, 310. , 312.5, 315. , 317.5, 320. , 322.5,\n       325. , 327.5, 330. ], dtype=float32)time(time)datetime64[ns]2013-01-01 ... 2014-12-31T18:00:00standard_name :timelong_name :Timearray(['2013-01-01T00:00:00.000000000', '2013-01-01T06:00:00.000000000',\n       '2013-01-01T12:00:00.000000000', ..., '2014-12-31T06:00:00.000000000',\n       '2014-12-31T12:00:00.000000000', '2014-12-31T18:00:00.000000000'],\n      dtype='datetime64[ns]')Data variables: (1)air(time, lat, lon)float32...long_name :4xDaily Air temperature at sigma level 995units :degKprecision :2GRIB_id :11GRIB_name :TMPvar_desc :Air temperaturedataset :NMC Reanalysislevel_desc :Surfacestatistic :Individual Obsparent_stat :Otheractual_range :[185.16 322.1 ][3869000 values with dtype=float32]Attributes: (5)Conventions :COARDStitle :4x daily NMC reanalysis (1948)description :Data is from NMC initialized reanalysis\n(4x/day).  These are the 0.9950 sigma level values.platform :Modelreferences :http://www.esrl.noaa.gov/psd/data/gridded/data.ncep.reanalysis.html\n\n\nFirst thing to notice is that ds is an xarray.Dataset object. It has dimensions, lat, lon, and time. It also has coordinate variables with the same names as these dimensions. These coordinate variables are 1-dimensional. This is a NetCDF convention. The Dataset contains one data variable, air. This has dimensions (time, lat, lon).\nClicking on the document icon reveals attributes for each variable. Clicking on the disk icon reveals a representation of the data.\nEach of the data and coordinate variables can be accessed and examined using the variable name as a key.\n\nds.air\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.DataArray 'air' (time: 2920, lat: 25, lon: 53)&gt;\n[3869000 values with dtype=float32]\nCoordinates:\n  * lat      (lat) float32 75.0 72.5 70.0 67.5 65.0 ... 25.0 22.5 20.0 17.5 15.0\n  * lon      (lon) float32 200.0 202.5 205.0 207.5 ... 322.5 325.0 327.5 330.0\n  * time     (time) datetime64[ns] 2013-01-01 ... 2014-12-31T18:00:00\nAttributes:\n    long_name:     4xDaily Air temperature at sigma level 995\n    units:         degK\n    precision:     2\n    GRIB_id:       11\n    GRIB_name:     TMP\n    var_desc:      Air temperature\n    dataset:       NMC Reanalysis\n    level_desc:    Surface\n    statistic:     Individual Obs\n    parent_stat:   Other\n    actual_range:  [185.16 322.1 ]xarray.DataArray'air'time: 2920lat: 25lon: 53...[3869000 values with dtype=float32]Coordinates: (3)lat(lat)float3275.0 72.5 70.0 ... 20.0 17.5 15.0standard_name :latitudelong_name :Latitudeunits :degrees_northaxis :Yarray([75. , 72.5, 70. , 67.5, 65. , 62.5, 60. , 57.5, 55. , 52.5, 50. , 47.5,\n       45. , 42.5, 40. , 37.5, 35. , 32.5, 30. , 27.5, 25. , 22.5, 20. , 17.5,\n       15. ], dtype=float32)lon(lon)float32200.0 202.5 205.0 ... 327.5 330.0standard_name :longitudelong_name :Longitudeunits :degrees_eastaxis :Xarray([200. , 202.5, 205. , 207.5, 210. , 212.5, 215. , 217.5, 220. , 222.5,\n       225. , 227.5, 230. , 232.5, 235. , 237.5, 240. , 242.5, 245. , 247.5,\n       250. , 252.5, 255. , 257.5, 260. , 262.5, 265. , 267.5, 270. , 272.5,\n       275. , 277.5, 280. , 282.5, 285. , 287.5, 290. , 292.5, 295. , 297.5,\n       300. , 302.5, 305. , 307.5, 310. , 312.5, 315. , 317.5, 320. , 322.5,\n       325. , 327.5, 330. ], dtype=float32)time(time)datetime64[ns]2013-01-01 ... 2014-12-31T18:00:00standard_name :timelong_name :Timearray(['2013-01-01T00:00:00.000000000', '2013-01-01T06:00:00.000000000',\n       '2013-01-01T12:00:00.000000000', ..., '2014-12-31T06:00:00.000000000',\n       '2014-12-31T12:00:00.000000000', '2014-12-31T18:00:00.000000000'],\n      dtype='datetime64[ns]')Attributes: (11)long_name :4xDaily Air temperature at sigma level 995units :degKprecision :2GRIB_id :11GRIB_name :TMPvar_desc :Air temperaturedataset :NMC Reanalysislevel_desc :Surfacestatistic :Individual Obsparent_stat :Otheractual_range :[185.16 322.1 ]\n\n\n\nds['air']\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.DataArray 'air' (time: 2920, lat: 25, lon: 53)&gt;\n[3869000 values with dtype=float32]\nCoordinates:\n  * lat      (lat) float32 75.0 72.5 70.0 67.5 65.0 ... 25.0 22.5 20.0 17.5 15.0\n  * lon      (lon) float32 200.0 202.5 205.0 207.5 ... 322.5 325.0 327.5 330.0\n  * time     (time) datetime64[ns] 2013-01-01 ... 2014-12-31T18:00:00\nAttributes:\n    long_name:     4xDaily Air temperature at sigma level 995\n    units:         degK\n    precision:     2\n    GRIB_id:       11\n    GRIB_name:     TMP\n    var_desc:      Air temperature\n    dataset:       NMC Reanalysis\n    level_desc:    Surface\n    statistic:     Individual Obs\n    parent_stat:   Other\n    actual_range:  [185.16 322.1 ]xarray.DataArray'air'time: 2920lat: 25lon: 53...[3869000 values with dtype=float32]Coordinates: (3)lat(lat)float3275.0 72.5 70.0 ... 20.0 17.5 15.0standard_name :latitudelong_name :Latitudeunits :degrees_northaxis :Yarray([75. , 72.5, 70. , 67.5, 65. , 62.5, 60. , 57.5, 55. , 52.5, 50. , 47.5,\n       45. , 42.5, 40. , 37.5, 35. , 32.5, 30. , 27.5, 25. , 22.5, 20. , 17.5,\n       15. ], dtype=float32)lon(lon)float32200.0 202.5 205.0 ... 327.5 330.0standard_name :longitudelong_name :Longitudeunits :degrees_eastaxis :Xarray([200. , 202.5, 205. , 207.5, 210. , 212.5, 215. , 217.5, 220. , 222.5,\n       225. , 227.5, 230. , 232.5, 235. , 237.5, 240. , 242.5, 245. , 247.5,\n       250. , 252.5, 255. , 257.5, 260. , 262.5, 265. , 267.5, 270. , 272.5,\n       275. , 277.5, 280. , 282.5, 285. , 287.5, 290. , 292.5, 295. , 297.5,\n       300. , 302.5, 305. , 307.5, 310. , 312.5, 315. , 317.5, 320. , 322.5,\n       325. , 327.5, 330. ], dtype=float32)time(time)datetime64[ns]2013-01-01 ... 2014-12-31T18:00:00standard_name :timelong_name :Timearray(['2013-01-01T00:00:00.000000000', '2013-01-01T06:00:00.000000000',\n       '2013-01-01T12:00:00.000000000', ..., '2014-12-31T06:00:00.000000000',\n       '2014-12-31T12:00:00.000000000', '2014-12-31T18:00:00.000000000'],\n      dtype='datetime64[ns]')Attributes: (11)long_name :4xDaily Air temperature at sigma level 995units :degKprecision :2GRIB_id :11GRIB_name :TMPvar_desc :Air temperaturedataset :NMC Reanalysislevel_desc :Surfacestatistic :Individual Obsparent_stat :Otheractual_range :[185.16 322.1 ]\n\n\nThese are xarray.DataArray objects. This is the basic building block for xarray.\nVariables can also be accessed as attributes of ds.\n\nds.time\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.DataArray 'time' (time: 2920)&gt;\narray(['2013-01-01T00:00:00.000000000', '2013-01-01T06:00:00.000000000',\n       '2013-01-01T12:00:00.000000000', ..., '2014-12-31T06:00:00.000000000',\n       '2014-12-31T12:00:00.000000000', '2014-12-31T18:00:00.000000000'],\n      dtype='datetime64[ns]')\nCoordinates:\n  * time     (time) datetime64[ns] 2013-01-01 ... 2014-12-31T18:00:00\nAttributes:\n    standard_name:  time\n    long_name:      Timexarray.DataArray'time'time: 29202013-01-01 2013-01-01T06:00:00 ... 2014-12-31T18:00:00array(['2013-01-01T00:00:00.000000000', '2013-01-01T06:00:00.000000000',\n       '2013-01-01T12:00:00.000000000', ..., '2014-12-31T06:00:00.000000000',\n       '2014-12-31T12:00:00.000000000', '2014-12-31T18:00:00.000000000'],\n      dtype='datetime64[ns]')Coordinates: (1)time(time)datetime64[ns]2013-01-01 ... 2014-12-31T18:00:00standard_name :timelong_name :Timearray(['2013-01-01T00:00:00.000000000', '2013-01-01T06:00:00.000000000',\n       '2013-01-01T12:00:00.000000000', ..., '2014-12-31T06:00:00.000000000',\n       '2014-12-31T12:00:00.000000000', '2014-12-31T18:00:00.000000000'],\n      dtype='datetime64[ns]')Attributes: (2)standard_name :timelong_name :Time\n\n\nA major difference between accessing a variable as an attribute versus using a key is that the attribute is read-only but the key method can be used to update the variable. For example, if I want to convert the units of air from Kelvin to degrees Celsius.\n\nds['air'] = ds.air - 273.15\n\nThis approach can also be used to add new variables\n\nds['air_kelvin'] = ds.air + 273.15\n\nIt is helpful to update attributes such as units, this saves time, confusion and mistakes, especially when you save the dataset.\n\nds['air'].attrs['units'] = 'degC'\n\n\nds\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:     (lat: 25, time: 2920, lon: 53)\nCoordinates:\n  * lat         (lat) float32 75.0 72.5 70.0 67.5 65.0 ... 22.5 20.0 17.5 15.0\n  * lon         (lon) float32 200.0 202.5 205.0 207.5 ... 325.0 327.5 330.0\n  * time        (time) datetime64[ns] 2013-01-01 ... 2014-12-31T18:00:00\nData variables:\n    air         (time, lat, lon) float32 -31.95 -30.65 -29.65 ... 23.04 22.54\n    air_kelvin  (time, lat, lon) float32 241.2 242.5 243.5 ... 296.5 296.2 295.7\nAttributes:\n    Conventions:  COARDS\n    title:        4x daily NMC reanalysis (1948)\n    description:  Data is from NMC initialized reanalysis\\n(4x/day).  These a...\n    platform:     Model\n    references:   http://www.esrl.noaa.gov/psd/data/gridded/data.ncep.reanaly...xarray.DatasetDimensions:lat: 25time: 2920lon: 53Coordinates: (3)lat(lat)float3275.0 72.5 70.0 ... 20.0 17.5 15.0standard_name :latitudelong_name :Latitudeunits :degrees_northaxis :Yarray([75. , 72.5, 70. , 67.5, 65. , 62.5, 60. , 57.5, 55. , 52.5, 50. , 47.5,\n       45. , 42.5, 40. , 37.5, 35. , 32.5, 30. , 27.5, 25. , 22.5, 20. , 17.5,\n       15. ], dtype=float32)lon(lon)float32200.0 202.5 205.0 ... 327.5 330.0standard_name :longitudelong_name :Longitudeunits :degrees_eastaxis :Xarray([200. , 202.5, 205. , 207.5, 210. , 212.5, 215. , 217.5, 220. , 222.5,\n       225. , 227.5, 230. , 232.5, 235. , 237.5, 240. , 242.5, 245. , 247.5,\n       250. , 252.5, 255. , 257.5, 260. , 262.5, 265. , 267.5, 270. , 272.5,\n       275. , 277.5, 280. , 282.5, 285. , 287.5, 290. , 292.5, 295. , 297.5,\n       300. , 302.5, 305. , 307.5, 310. , 312.5, 315. , 317.5, 320. , 322.5,\n       325. , 327.5, 330. ], dtype=float32)time(time)datetime64[ns]2013-01-01 ... 2014-12-31T18:00:00standard_name :timelong_name :Timearray(['2013-01-01T00:00:00.000000000', '2013-01-01T06:00:00.000000000',\n       '2013-01-01T12:00:00.000000000', ..., '2014-12-31T06:00:00.000000000',\n       '2014-12-31T12:00:00.000000000', '2014-12-31T18:00:00.000000000'],\n      dtype='datetime64[ns]')Data variables: (2)air(time, lat, lon)float32-31.95 -30.65 ... 23.04 22.54long_name :4xDaily Air temperature at sigma level 995units :degCprecision :2GRIB_id :11GRIB_name :TMPvar_desc :Air temperaturedataset :NMC Reanalysislevel_desc :Surfacestatistic :Individual Obsparent_stat :Otheractual_range :[185.16 322.1 ]array([[[-31.949997, -30.649994, -29.649994, ..., -40.350006,\n         -37.649994, -34.550003],\n        [-29.350006, -28.649994, -28.449997, ..., -40.350006,\n         -37.850006, -33.850006],\n        [-23.149994, -23.350006, -24.259995, ..., -39.949997,\n         -36.759995, -31.449997],\n        ...,\n        [ 23.450012,  23.049988,  23.25    , ...,  22.25    ,\n          21.950012,  21.549988],\n        [ 22.75    ,  23.049988,  23.640015, ...,  22.75    ,\n          22.75    ,  22.049988],\n        [ 23.140015,  23.640015,  23.950012, ...,  23.75    ,\n          23.640015,  23.450012]],\n\n       [[-31.050003, -30.449997, -30.050003, ..., -41.149994,\n         -39.550003, -37.350006],\n        [-29.550003, -29.050003, -28.949997, ..., -42.149994,\n         -40.649994, -37.449997],\n        [-19.949997, -20.259995, -21.050003, ..., -42.350006,\n         -39.759995, -34.649994],\n...\n        [ 20.540009,  20.73999 ,  22.23999 , ...,  21.940002,\n          21.540009,  21.140015],\n        [ 23.140015,  24.040009,  24.440002, ...,  22.140015,\n          21.940002,  21.23999 ],\n        [ 24.640015,  25.23999 ,  25.339996, ...,  22.540009,\n          22.339996,  22.040009]],\n\n       [[-28.059998, -28.86    , -29.86    , ..., -31.460007,\n         -31.660004, -31.36    ],\n        [-23.259995, -23.86    , -24.759995, ..., -33.559998,\n         -32.86    , -31.460007],\n        [-10.160004, -10.959991, -11.76001 , ..., -33.259995,\n         -30.559998, -26.86    ],\n        ...,\n        [ 20.640015,  20.540009,  21.940002, ...,  22.140015,\n          21.940002,  21.540009],\n        [ 22.940002,  23.73999 ,  24.040009, ...,  22.540009,\n          22.540009,  22.040009],\n        [ 24.540009,  24.940002,  24.940002, ...,  23.339996,\n          23.040009,  22.540009]]], dtype=float32)air_kelvin(time, lat, lon)float32241.2 242.5 243.5 ... 296.2 295.7long_name :4xDaily Air temperature at sigma level 995units :degKprecision :2GRIB_id :11GRIB_name :TMPvar_desc :Air temperaturedataset :NMC Reanalysislevel_desc :Surfacestatistic :Individual Obsparent_stat :Otheractual_range :[185.16 322.1 ]array([[[241.2    , 242.5    , 243.5    , ..., 232.79999, 235.5    ,\n         238.59999],\n        [243.79999, 244.5    , 244.7    , ..., 232.79999, 235.29999,\n         239.29999],\n        [250.     , 249.79999, 248.89   , ..., 233.2    , 236.39   ,\n         241.7    ],\n        ...,\n        [296.6    , 296.19998, 296.4    , ..., 295.4    , 295.1    ,\n         294.69998],\n        [295.9    , 296.19998, 296.79   , ..., 295.9    , 295.9    ,\n         295.19998],\n        [296.29   , 296.79   , 297.1    , ..., 296.9    , 296.79   ,\n         296.6    ]],\n\n       [[242.09999, 242.7    , 243.09999, ..., 232.     , 233.59999,\n         235.79999],\n        [243.59999, 244.09999, 244.2    , ..., 231.     , 232.5    ,\n         235.7    ],\n        [253.2    , 252.89   , 252.09999, ..., 230.79999, 233.39   ,\n         238.5    ],\n...\n        [293.69   , 293.88998, 295.38998, ..., 295.09   , 294.69   ,\n         294.29   ],\n        [296.29   , 297.19   , 297.59   , ..., 295.29   , 295.09   ,\n         294.38998],\n        [297.79   , 298.38998, 298.49   , ..., 295.69   , 295.49   ,\n         295.19   ]],\n\n       [[245.09   , 244.29   , 243.29   , ..., 241.68999, 241.48999,\n         241.79   ],\n        [249.89   , 249.29   , 248.39   , ..., 239.59   , 240.29   ,\n         241.68999],\n        [262.99   , 262.19   , 261.38998, ..., 239.89   , 242.59   ,\n         246.29   ],\n        ...,\n        [293.79   , 293.69   , 295.09   , ..., 295.29   , 295.09   ,\n         294.69   ],\n        [296.09   , 296.88998, 297.19   , ..., 295.69   , 295.69   ,\n         295.19   ],\n        [297.69   , 298.09   , 298.09   , ..., 296.49   , 296.19   ,\n         295.69   ]]], dtype=float32)Attributes: (5)Conventions :COARDStitle :4x daily NMC reanalysis (1948)description :Data is from NMC initialized reanalysis\n(4x/day).  These are the 0.9950 sigma level values.platform :Modelreferences :http://www.esrl.noaa.gov/psd/data/gridded/data.ncep.reanalysis.html"
  },
  {
    "objectID": "python-notebooks/02_Xarray_hvplot.html#subsetting-and-indexing",
    "href": "python-notebooks/02_Xarray_hvplot.html#subsetting-and-indexing",
    "title": "03. Introduction to xarray",
    "section": "Subsetting and Indexing",
    "text": "Subsetting and Indexing\nSubsetting and indexing methods depend on whether you are working with a Dataset or DataArray. A DataArray can be accessed using positional indexing just like a numpy array. To access the temperature field for the first time step, you do the following.\n\nds['air'][0,:,:]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.DataArray 'air' (lat: 25, lon: 53)&gt;\narray([[-31.949997, -30.649994, -29.649994, ..., -40.350006, -37.649994,\n        -34.550003],\n       [-29.350006, -28.649994, -28.449997, ..., -40.350006, -37.850006,\n        -33.850006],\n       [-23.149994, -23.350006, -24.259995, ..., -39.949997, -36.759995,\n        -31.449997],\n       ...,\n       [ 23.450012,  23.049988,  23.25    , ...,  22.25    ,  21.950012,\n         21.549988],\n       [ 22.75    ,  23.049988,  23.640015, ...,  22.75    ,  22.75    ,\n         22.049988],\n       [ 23.140015,  23.640015,  23.950012, ...,  23.75    ,  23.640015,\n         23.450012]], dtype=float32)\nCoordinates:\n  * lat      (lat) float32 75.0 72.5 70.0 67.5 65.0 ... 25.0 22.5 20.0 17.5 15.0\n  * lon      (lon) float32 200.0 202.5 205.0 207.5 ... 322.5 325.0 327.5 330.0\n    time     datetime64[ns] 2013-01-01\nAttributes:\n    long_name:     4xDaily Air temperature at sigma level 995\n    units:         degC\n    precision:     2\n    GRIB_id:       11\n    GRIB_name:     TMP\n    var_desc:      Air temperature\n    dataset:       NMC Reanalysis\n    level_desc:    Surface\n    statistic:     Individual Obs\n    parent_stat:   Other\n    actual_range:  [185.16 322.1 ]xarray.DataArray'air'lat: 25lon: 53-31.95 -30.65 -29.65 -29.15 -29.05 ... 24.64 24.45 23.75 23.64 23.45array([[-31.949997, -30.649994, -29.649994, ..., -40.350006, -37.649994,\n        -34.550003],\n       [-29.350006, -28.649994, -28.449997, ..., -40.350006, -37.850006,\n        -33.850006],\n       [-23.149994, -23.350006, -24.259995, ..., -39.949997, -36.759995,\n        -31.449997],\n       ...,\n       [ 23.450012,  23.049988,  23.25    , ...,  22.25    ,  21.950012,\n         21.549988],\n       [ 22.75    ,  23.049988,  23.640015, ...,  22.75    ,  22.75    ,\n         22.049988],\n       [ 23.140015,  23.640015,  23.950012, ...,  23.75    ,  23.640015,\n         23.450012]], dtype=float32)Coordinates: (3)lat(lat)float3275.0 72.5 70.0 ... 20.0 17.5 15.0standard_name :latitudelong_name :Latitudeunits :degrees_northaxis :Yarray([75. , 72.5, 70. , 67.5, 65. , 62.5, 60. , 57.5, 55. , 52.5, 50. , 47.5,\n       45. , 42.5, 40. , 37.5, 35. , 32.5, 30. , 27.5, 25. , 22.5, 20. , 17.5,\n       15. ], dtype=float32)lon(lon)float32200.0 202.5 205.0 ... 327.5 330.0standard_name :longitudelong_name :Longitudeunits :degrees_eastaxis :Xarray([200. , 202.5, 205. , 207.5, 210. , 212.5, 215. , 217.5, 220. , 222.5,\n       225. , 227.5, 230. , 232.5, 235. , 237.5, 240. , 242.5, 245. , 247.5,\n       250. , 252.5, 255. , 257.5, 260. , 262.5, 265. , 267.5, 270. , 272.5,\n       275. , 277.5, 280. , 282.5, 285. , 287.5, 290. , 292.5, 295. , 297.5,\n       300. , 302.5, 305. , 307.5, 310. , 312.5, 315. , 317.5, 320. , 322.5,\n       325. , 327.5, 330. ], dtype=float32)time()datetime64[ns]2013-01-01standard_name :timelong_name :Timearray('2013-01-01T00:00:00.000000000', dtype='datetime64[ns]')Attributes: (11)long_name :4xDaily Air temperature at sigma level 995units :degCprecision :2GRIB_id :11GRIB_name :TMPvar_desc :Air temperaturedataset :NMC Reanalysislevel_desc :Surfacestatistic :Individual Obsparent_stat :Otheractual_range :[185.16 322.1 ]\n\n\nNote this returns a DataArray with coordinates but not attributes.\nHowever, the real power is being able to access variables using coordinate variables. I can get the same subset using the following. (It‚Äôs also more explicit about what is being selected and robust in case I modify the DataArray and expect the same output.)\n\nds['air'].sel(time='2013-01-01').time\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.DataArray 'time' (time: 4)&gt;\narray(['2013-01-01T00:00:00.000000000', '2013-01-01T06:00:00.000000000',\n       '2013-01-01T12:00:00.000000000', '2013-01-01T18:00:00.000000000'],\n      dtype='datetime64[ns]')\nCoordinates:\n  * time     (time) datetime64[ns] 2013-01-01 ... 2013-01-01T18:00:00\nAttributes:\n    standard_name:  time\n    long_name:      Timexarray.DataArray'time'time: 42013-01-01 2013-01-01T06:00:00 2013-01-01T12:00:00 2013-01-01T18:00:00array(['2013-01-01T00:00:00.000000000', '2013-01-01T06:00:00.000000000',\n       '2013-01-01T12:00:00.000000000', '2013-01-01T18:00:00.000000000'],\n      dtype='datetime64[ns]')Coordinates: (1)time(time)datetime64[ns]2013-01-01 ... 2013-01-01T18:00:00standard_name :timelong_name :Timearray(['2013-01-01T00:00:00.000000000', '2013-01-01T06:00:00.000000000',\n       '2013-01-01T12:00:00.000000000', '2013-01-01T18:00:00.000000000'],\n      dtype='datetime64[ns]')Attributes: (2)standard_name :timelong_name :Time\n\n\n\nds.air.sel(time='2013-01-01')\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.DataArray 'air' (time: 4, lat: 25, lon: 53)&gt;\narray([[[-31.949997, -30.649994, -29.649994, ..., -40.350006,\n         -37.649994, -34.550003],\n        [-29.350006, -28.649994, -28.449997, ..., -40.350006,\n         -37.850006, -33.850006],\n        [-23.149994, -23.350006, -24.259995, ..., -39.949997,\n         -36.759995, -31.449997],\n        ...,\n        [ 23.450012,  23.049988,  23.25    , ...,  22.25    ,\n          21.950012,  21.549988],\n        [ 22.75    ,  23.049988,  23.640015, ...,  22.75    ,\n          22.75    ,  22.049988],\n        [ 23.140015,  23.640015,  23.950012, ...,  23.75    ,\n          23.640015,  23.450012]],\n\n       [[-31.050003, -30.449997, -30.050003, ..., -41.149994,\n         -39.550003, -37.350006],\n        [-29.550003, -29.050003, -28.949997, ..., -42.149994,\n         -40.649994, -37.449997],\n        [-19.949997, -20.259995, -21.050003, ..., -42.350006,\n         -39.759995, -34.649994],\n...\n        [ 22.450012,  22.25    ,  22.25    , ...,  23.140015,\n          22.140015,  21.850006],\n        [ 23.049988,  23.350006,  23.140015, ...,  23.25    ,\n          22.850006,  22.450012],\n        [ 23.25    ,  23.140015,  23.25    , ...,  23.850006,\n          23.850006,  23.640015]],\n\n       [[-31.259995, -31.350006, -31.350006, ..., -38.759995,\n         -37.649994, -35.550003],\n        [-26.850006, -27.850006, -28.949997, ..., -42.259995,\n         -41.649994, -38.649994],\n        [-16.549988, -18.449997, -21.050003, ..., -42.449997,\n         -41.350006, -37.050003],\n        ...,\n        [ 23.450012,  23.25    ,  22.850006, ...,  23.350006,\n          22.640015,  22.140015],\n        [ 23.850006,  24.350006,  23.950012, ...,  23.640015,\n          23.450012,  23.140015],\n        [ 24.350006,  24.549988,  24.350006, ...,  24.640015,\n          24.850006,  24.75    ]]], dtype=float32)\nCoordinates:\n  * lat      (lat) float32 75.0 72.5 70.0 67.5 65.0 ... 25.0 22.5 20.0 17.5 15.0\n  * lon      (lon) float32 200.0 202.5 205.0 207.5 ... 322.5 325.0 327.5 330.0\n  * time     (time) datetime64[ns] 2013-01-01 ... 2013-01-01T18:00:00\nAttributes:\n    long_name:     4xDaily Air temperature at sigma level 995\n    units:         degC\n    precision:     2\n    GRIB_id:       11\n    GRIB_name:     TMP\n    var_desc:      Air temperature\n    dataset:       NMC Reanalysis\n    level_desc:    Surface\n    statistic:     Individual Obs\n    parent_stat:   Other\n    actual_range:  [185.16 322.1 ]xarray.DataArray'air'time: 4lat: 25lon: 53-31.95 -30.65 -29.65 -29.15 -29.05 ... 25.45 25.05 24.64 24.85 24.75array([[[-31.949997, -30.649994, -29.649994, ..., -40.350006,\n         -37.649994, -34.550003],\n        [-29.350006, -28.649994, -28.449997, ..., -40.350006,\n         -37.850006, -33.850006],\n        [-23.149994, -23.350006, -24.259995, ..., -39.949997,\n         -36.759995, -31.449997],\n        ...,\n        [ 23.450012,  23.049988,  23.25    , ...,  22.25    ,\n          21.950012,  21.549988],\n        [ 22.75    ,  23.049988,  23.640015, ...,  22.75    ,\n          22.75    ,  22.049988],\n        [ 23.140015,  23.640015,  23.950012, ...,  23.75    ,\n          23.640015,  23.450012]],\n\n       [[-31.050003, -30.449997, -30.050003, ..., -41.149994,\n         -39.550003, -37.350006],\n        [-29.550003, -29.050003, -28.949997, ..., -42.149994,\n         -40.649994, -37.449997],\n        [-19.949997, -20.259995, -21.050003, ..., -42.350006,\n         -39.759995, -34.649994],\n...\n        [ 22.450012,  22.25    ,  22.25    , ...,  23.140015,\n          22.140015,  21.850006],\n        [ 23.049988,  23.350006,  23.140015, ...,  23.25    ,\n          22.850006,  22.450012],\n        [ 23.25    ,  23.140015,  23.25    , ...,  23.850006,\n          23.850006,  23.640015]],\n\n       [[-31.259995, -31.350006, -31.350006, ..., -38.759995,\n         -37.649994, -35.550003],\n        [-26.850006, -27.850006, -28.949997, ..., -42.259995,\n         -41.649994, -38.649994],\n        [-16.549988, -18.449997, -21.050003, ..., -42.449997,\n         -41.350006, -37.050003],\n        ...,\n        [ 23.450012,  23.25    ,  22.850006, ...,  23.350006,\n          22.640015,  22.140015],\n        [ 23.850006,  24.350006,  23.950012, ...,  23.640015,\n          23.450012,  23.140015],\n        [ 24.350006,  24.549988,  24.350006, ...,  24.640015,\n          24.850006,  24.75    ]]], dtype=float32)Coordinates: (3)lat(lat)float3275.0 72.5 70.0 ... 20.0 17.5 15.0standard_name :latitudelong_name :Latitudeunits :degrees_northaxis :Yarray([75. , 72.5, 70. , 67.5, 65. , 62.5, 60. , 57.5, 55. , 52.5, 50. , 47.5,\n       45. , 42.5, 40. , 37.5, 35. , 32.5, 30. , 27.5, 25. , 22.5, 20. , 17.5,\n       15. ], dtype=float32)lon(lon)float32200.0 202.5 205.0 ... 327.5 330.0standard_name :longitudelong_name :Longitudeunits :degrees_eastaxis :Xarray([200. , 202.5, 205. , 207.5, 210. , 212.5, 215. , 217.5, 220. , 222.5,\n       225. , 227.5, 230. , 232.5, 235. , 237.5, 240. , 242.5, 245. , 247.5,\n       250. , 252.5, 255. , 257.5, 260. , 262.5, 265. , 267.5, 270. , 272.5,\n       275. , 277.5, 280. , 282.5, 285. , 287.5, 290. , 292.5, 295. , 297.5,\n       300. , 302.5, 305. , 307.5, 310. , 312.5, 315. , 317.5, 320. , 322.5,\n       325. , 327.5, 330. ], dtype=float32)time(time)datetime64[ns]2013-01-01 ... 2013-01-01T18:00:00standard_name :timelong_name :Timearray(['2013-01-01T00:00:00.000000000', '2013-01-01T06:00:00.000000000',\n       '2013-01-01T12:00:00.000000000', '2013-01-01T18:00:00.000000000'],\n      dtype='datetime64[ns]')Attributes: (11)long_name :4xDaily Air temperature at sigma level 995units :degCprecision :2GRIB_id :11GRIB_name :TMPvar_desc :Air temperaturedataset :NMC Reanalysislevel_desc :Surfacestatistic :Individual Obsparent_stat :Otheractual_range :[185.16 322.1 ]\n\n\nI can also do slices. I‚Äôll extract temperatures for the state of Colorado. The bounding box for the state is [-109 E, -102 E, 37 N, 41 N].\nIn the code below, pay attention to both the order of the coordinates and the range of values. The first value of the lat coordinate variable is 41 N, the second value is 37 N. Unfortunately, xarray expects slices of coordinates to be in the same order as the coordinates. Note lon is 0 to 360 not -180 to 180, and I let python calculate it for me within the slice.\n\nds.air.sel(lat=slice(41.,37.), lon=slice(360-109,360-102))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.DataArray 'air' (time: 2920, lat: 2, lon: 3)&gt;\narray([[[-10.049988 ,  -9.25     ,  -8.75     ],\n        [ -6.25     ,  -6.549988 ,  -6.3599854]],\n\n       [[-18.149994 , -14.950012 ,  -9.950012 ],\n        [-13.649994 , -11.049988 ,  -7.25     ]],\n\n       [[-20.449997 , -18.649994 , -13.359985 ],\n        [-19.350006 , -16.950012 , -11.25     ]],\n\n       ...,\n\n       [[-24.460007 , -28.259995 , -25.759995 ],\n        [-16.959991 , -24.059998 , -24.059998 ]],\n\n       [[-24.36     , -26.160004 , -23.460007 ],\n        [-15.959991 , -22.86     , -22.960007 ]],\n\n       [[-17.559998 , -15.359985 , -13.660004 ],\n        [-13.76001  , -15.959991 , -14.459991 ]]], dtype=float32)\nCoordinates:\n  * lat      (lat) float32 40.0 37.5\n  * lon      (lon) float32 252.5 255.0 257.5\n  * time     (time) datetime64[ns] 2013-01-01 ... 2014-12-31T18:00:00\nAttributes:\n    long_name:     4xDaily Air temperature at sigma level 995\n    units:         degC\n    precision:     2\n    GRIB_id:       11\n    GRIB_name:     TMP\n    var_desc:      Air temperature\n    dataset:       NMC Reanalysis\n    level_desc:    Surface\n    statistic:     Individual Obs\n    parent_stat:   Other\n    actual_range:  [185.16 322.1 ]xarray.DataArray'air'time: 2920lat: 2lon: 3-10.05 -9.25 -8.75 -6.25 -6.55 ... -15.36 -13.66 -13.76 -15.96 -14.46array([[[-10.049988 ,  -9.25     ,  -8.75     ],\n        [ -6.25     ,  -6.549988 ,  -6.3599854]],\n\n       [[-18.149994 , -14.950012 ,  -9.950012 ],\n        [-13.649994 , -11.049988 ,  -7.25     ]],\n\n       [[-20.449997 , -18.649994 , -13.359985 ],\n        [-19.350006 , -16.950012 , -11.25     ]],\n\n       ...,\n\n       [[-24.460007 , -28.259995 , -25.759995 ],\n        [-16.959991 , -24.059998 , -24.059998 ]],\n\n       [[-24.36     , -26.160004 , -23.460007 ],\n        [-15.959991 , -22.86     , -22.960007 ]],\n\n       [[-17.559998 , -15.359985 , -13.660004 ],\n        [-13.76001  , -15.959991 , -14.459991 ]]], dtype=float32)Coordinates: (3)lat(lat)float3240.0 37.5standard_name :latitudelong_name :Latitudeunits :degrees_northaxis :Yarray([40. , 37.5], dtype=float32)lon(lon)float32252.5 255.0 257.5standard_name :longitudelong_name :Longitudeunits :degrees_eastaxis :Xarray([252.5, 255. , 257.5], dtype=float32)time(time)datetime64[ns]2013-01-01 ... 2014-12-31T18:00:00standard_name :timelong_name :Timearray(['2013-01-01T00:00:00.000000000', '2013-01-01T06:00:00.000000000',\n       '2013-01-01T12:00:00.000000000', ..., '2014-12-31T06:00:00.000000000',\n       '2014-12-31T12:00:00.000000000', '2014-12-31T18:00:00.000000000'],\n      dtype='datetime64[ns]')Attributes: (11)long_name :4xDaily Air temperature at sigma level 995units :degCprecision :2GRIB_id :11GRIB_name :TMPvar_desc :Air temperaturedataset :NMC Reanalysislevel_desc :Surfacestatistic :Individual Obsparent_stat :Otheractual_range :[185.16 322.1 ]\n\n\nWhat if we want temperature for a point, for example Denver, CO (39.72510678889283 N, -104.98785545855408 E). xarray can handle this! If we just want data from the nearest grid point, we can use sel and specify the method as ‚Äúnearest‚Äù.\n\ndenver_lat, denver_lon = 39.72510678889283, -104.98785545855408\n\n\nds.air.sel(lat=denver_lat, lon=360+denver_lon, method='nearest').hvplot()\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\nIf we want to interpolate, we can use interp(). In this case I use linear or bilinear interpolation.\ninterp() can also be used to resample data to a new grid and even reproject data\n\nds.air.interp(lat=denver_lat, lon=360+denver_lon, method='linear')\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.DataArray 'air' (time: 2920)&gt;\narray([ -8.95085077, -14.49752791, -18.43715163, ..., -27.78736503,\n       -25.78552388, -15.41780902])\nCoordinates:\n  * time     (time) datetime64[ns] 2013-01-01 ... 2014-12-31T18:00:00\n    lat      float64 39.73\n    lon      float64 255.0\nAttributes:\n    long_name:     4xDaily Air temperature at sigma level 995\n    units:         degC\n    precision:     2\n    GRIB_id:       11\n    GRIB_name:     TMP\n    var_desc:      Air temperature\n    dataset:       NMC Reanalysis\n    level_desc:    Surface\n    statistic:     Individual Obs\n    parent_stat:   Other\n    actual_range:  [185.16 322.1 ]xarray.DataArray'air'time: 2920-8.951 -14.5 -18.44 -11.33 -8.942 ... -22.4 -27.79 -25.79 -15.42array([ -8.95085077, -14.49752791, -18.43715163, ..., -27.78736503,\n       -25.78552388, -15.41780902])Coordinates: (3)time(time)datetime64[ns]2013-01-01 ... 2014-12-31T18:00:00standard_name :timelong_name :Timearray(['2013-01-01T00:00:00.000000000', '2013-01-01T06:00:00.000000000',\n       '2013-01-01T12:00:00.000000000', ..., '2014-12-31T06:00:00.000000000',\n       '2014-12-31T12:00:00.000000000', '2014-12-31T18:00:00.000000000'],\n      dtype='datetime64[ns]')lat()float6439.73standard_name :latitudelong_name :Latitudeunits :degrees_northaxis :Yarray(39.72510679)lon()float64255.0standard_name :longitudelong_name :Longitudeunits :degrees_eastaxis :Xarray(255.01214454)Attributes: (11)long_name :4xDaily Air temperature at sigma level 995units :degCprecision :2GRIB_id :11GRIB_name :TMPvar_desc :Air temperaturedataset :NMC Reanalysislevel_desc :Surfacestatistic :Individual Obsparent_stat :Otheractual_range :[185.16 322.1 ]\n\n\nsel() and interp() can also be used on Dataset objects.\n\nds.sel(lat=slice(41,37), lon=slice(360-109,360-102))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:     (lat: 2, time: 2920, lon: 3)\nCoordinates:\n  * lat         (lat) float32 40.0 37.5\n  * lon         (lon) float32 252.5 255.0 257.5\n  * time        (time) datetime64[ns] 2013-01-01 ... 2014-12-31T18:00:00\nData variables:\n    air         (time, lat, lon) float32 -10.05 -9.25 -8.75 ... -15.96 -14.46\n    air_kelvin  (time, lat, lon) float32 263.1 263.9 264.4 ... 259.4 257.2 258.7\nAttributes:\n    Conventions:  COARDS\n    title:        4x daily NMC reanalysis (1948)\n    description:  Data is from NMC initialized reanalysis\\n(4x/day).  These a...\n    platform:     Model\n    references:   http://www.esrl.noaa.gov/psd/data/gridded/data.ncep.reanaly...xarray.DatasetDimensions:lat: 2time: 2920lon: 3Coordinates: (3)lat(lat)float3240.0 37.5standard_name :latitudelong_name :Latitudeunits :degrees_northaxis :Yarray([40. , 37.5], dtype=float32)lon(lon)float32252.5 255.0 257.5standard_name :longitudelong_name :Longitudeunits :degrees_eastaxis :Xarray([252.5, 255. , 257.5], dtype=float32)time(time)datetime64[ns]2013-01-01 ... 2014-12-31T18:00:00standard_name :timelong_name :Timearray(['2013-01-01T00:00:00.000000000', '2013-01-01T06:00:00.000000000',\n       '2013-01-01T12:00:00.000000000', ..., '2014-12-31T06:00:00.000000000',\n       '2014-12-31T12:00:00.000000000', '2014-12-31T18:00:00.000000000'],\n      dtype='datetime64[ns]')Data variables: (2)air(time, lat, lon)float32-10.05 -9.25 ... -15.96 -14.46long_name :4xDaily Air temperature at sigma level 995units :degCprecision :2GRIB_id :11GRIB_name :TMPvar_desc :Air temperaturedataset :NMC Reanalysislevel_desc :Surfacestatistic :Individual Obsparent_stat :Otheractual_range :[185.16 322.1 ]array([[[-10.049988 ,  -9.25     ,  -8.75     ],\n        [ -6.25     ,  -6.549988 ,  -6.3599854]],\n\n       [[-18.149994 , -14.950012 ,  -9.950012 ],\n        [-13.649994 , -11.049988 ,  -7.25     ]],\n\n       [[-20.449997 , -18.649994 , -13.359985 ],\n        [-19.350006 , -16.950012 , -11.25     ]],\n\n       ...,\n\n       [[-24.460007 , -28.259995 , -25.759995 ],\n        [-16.959991 , -24.059998 , -24.059998 ]],\n\n       [[-24.36     , -26.160004 , -23.460007 ],\n        [-15.959991 , -22.86     , -22.960007 ]],\n\n       [[-17.559998 , -15.359985 , -13.660004 ],\n        [-13.76001  , -15.959991 , -14.459991 ]]], dtype=float32)air_kelvin(time, lat, lon)float32263.1 263.9 264.4 ... 257.2 258.7long_name :4xDaily Air temperature at sigma level 995units :degKprecision :2GRIB_id :11GRIB_name :TMPvar_desc :Air temperaturedataset :NMC Reanalysislevel_desc :Surfacestatistic :Individual Obsparent_stat :Otheractual_range :[185.16 322.1 ]array([[[263.1    , 263.9    , 264.4    ],\n        [266.9    , 266.6    , 266.79   ]],\n\n       [[255.     , 258.19998, 263.19998],\n        [259.5    , 262.1    , 265.9    ]],\n\n       [[252.7    , 254.5    , 259.79   ],\n        [253.79999, 256.19998, 261.9    ]],\n\n       ...,\n\n       [[248.68999, 244.89   , 247.39   ],\n        [256.19   , 249.09   , 249.09   ]],\n\n       [[248.79   , 246.98999, 249.68999],\n        [257.19   , 250.29   , 250.18999]],\n\n       [[255.59   , 257.79   , 259.49   ],\n        [259.38998, 257.19   , 258.69   ]]], dtype=float32)Attributes: (5)Conventions :COARDStitle :4x daily NMC reanalysis (1948)description :Data is from NMC initialized reanalysis\n(4x/day).  These are the 0.9950 sigma level values.platform :Modelreferences :http://www.esrl.noaa.gov/psd/data/gridded/data.ncep.reanalysis.html\n\n\n\nds.interp(lat=denver_lat, lon=360+denver_lon, method='linear')\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:     (time: 2920)\nCoordinates:\n  * time        (time) datetime64[ns] 2013-01-01 ... 2014-12-31T18:00:00\n    lat         float64 39.73\n    lon         float64 255.0\nData variables:\n    air         (time) float64 -8.951 -14.5 -18.44 ... -27.79 -25.79 -15.42\n    air_kelvin  (time) float64 264.2 258.7 254.7 261.8 ... 245.4 247.4 257.7\nAttributes:\n    Conventions:  COARDS\n    title:        4x daily NMC reanalysis (1948)\n    description:  Data is from NMC initialized reanalysis\\n(4x/day).  These a...\n    platform:     Model\n    references:   http://www.esrl.noaa.gov/psd/data/gridded/data.ncep.reanaly...xarray.DatasetDimensions:time: 2920Coordinates: (3)time(time)datetime64[ns]2013-01-01 ... 2014-12-31T18:00:00standard_name :timelong_name :Timearray(['2013-01-01T00:00:00.000000000', '2013-01-01T06:00:00.000000000',\n       '2013-01-01T12:00:00.000000000', ..., '2014-12-31T06:00:00.000000000',\n       '2014-12-31T12:00:00.000000000', '2014-12-31T18:00:00.000000000'],\n      dtype='datetime64[ns]')lat()float6439.73standard_name :latitudelong_name :Latitudeunits :degrees_northaxis :Yarray(39.72510679)lon()float64255.0standard_name :longitudelong_name :Longitudeunits :degrees_eastaxis :Xarray(255.01214454)Data variables: (2)air(time)float64-8.951 -14.5 ... -25.79 -15.42long_name :4xDaily Air temperature at sigma level 995units :degCprecision :2GRIB_id :11GRIB_name :TMPvar_desc :Air temperaturedataset :NMC Reanalysislevel_desc :Surfacestatistic :Individual Obsparent_stat :Otheractual_range :[185.16 322.1 ]array([ -8.95085077, -14.49752791, -18.43715163, ..., -27.78736503,\n       -25.78552388, -15.41780902])air_kelvin(time)float64264.2 258.7 254.7 ... 247.4 257.7long_name :4xDaily Air temperature at sigma level 995units :degKprecision :2GRIB_id :11GRIB_name :TMPvar_desc :Air temperaturedataset :NMC Reanalysislevel_desc :Surfacestatistic :Individual Obsparent_stat :Otheractual_range :[185.16 322.1 ]array([264.19914312, 258.65246598, 254.71284227, ..., 245.36262886,\n       247.36447002, 257.73218487])Attributes: (5)Conventions :COARDStitle :4x daily NMC reanalysis (1948)description :Data is from NMC initialized reanalysis\n(4x/day).  These are the 0.9950 sigma level values.platform :Modelreferences :http://www.esrl.noaa.gov/psd/data/gridded/data.ncep.reanalysis.html"
  },
  {
    "objectID": "python-notebooks/02_Xarray_hvplot.html#analysis",
    "href": "python-notebooks/02_Xarray_hvplot.html#analysis",
    "title": "03. Introduction to xarray",
    "section": "Analysis",
    "text": "Analysis\nAs a simple example, let‚Äôs try to calculate a mean field for the whole time range.\n\nds.mean(dim='time').hvplot()\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\nWe can also calculate a zonal mean (averaging over longitude)\n\nds.mean(dim='lon').hvplot()\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\nOther aggregation methods include min(), max(), std(), along with others.\n\nds.std(dim='time').hvplot()\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\nThe data we have are in 6h timesteps. This can be resampled to daily or monthly. If you are familiar with pandas, xarray uses the same methods.\n\nds.resample(time='M').mean().hvplot()\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\nds_mon = ds.resample(time='M').mean()\nds_mon\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:     (time: 24, lat: 25, lon: 53)\nCoordinates:\n  * time        (time) datetime64[ns] 2013-01-31 2013-02-28 ... 2014-12-31\n  * lat         (lat) float32 75.0 72.5 70.0 67.5 65.0 ... 22.5 20.0 17.5 15.0\n  * lon         (lon) float32 200.0 202.5 205.0 207.5 ... 325.0 327.5 330.0\nData variables:\n    air         (time, lat, lon) float32 -28.68 -28.49 -28.48 ... 24.57 24.56\n    air_kelvin  (time, lat, lon) float32 244.5 244.7 244.7 ... 297.7 297.7 297.7\nAttributes:\n    Conventions:  COARDS\n    title:        4x daily NMC reanalysis (1948)\n    description:  Data is from NMC initialized reanalysis\\n(4x/day).  These a...\n    platform:     Model\n    references:   http://www.esrl.noaa.gov/psd/data/gridded/data.ncep.reanaly...xarray.DatasetDimensions:time: 24lat: 25lon: 53Coordinates: (3)time(time)datetime64[ns]2013-01-31 ... 2014-12-31array(['2013-01-31T00:00:00.000000000', '2013-02-28T00:00:00.000000000',\n       '2013-03-31T00:00:00.000000000', '2013-04-30T00:00:00.000000000',\n       '2013-05-31T00:00:00.000000000', '2013-06-30T00:00:00.000000000',\n       '2013-07-31T00:00:00.000000000', '2013-08-31T00:00:00.000000000',\n       '2013-09-30T00:00:00.000000000', '2013-10-31T00:00:00.000000000',\n       '2013-11-30T00:00:00.000000000', '2013-12-31T00:00:00.000000000',\n       '2014-01-31T00:00:00.000000000', '2014-02-28T00:00:00.000000000',\n       '2014-03-31T00:00:00.000000000', '2014-04-30T00:00:00.000000000',\n       '2014-05-31T00:00:00.000000000', '2014-06-30T00:00:00.000000000',\n       '2014-07-31T00:00:00.000000000', '2014-08-31T00:00:00.000000000',\n       '2014-09-30T00:00:00.000000000', '2014-10-31T00:00:00.000000000',\n       '2014-11-30T00:00:00.000000000', '2014-12-31T00:00:00.000000000'],\n      dtype='datetime64[ns]')lat(lat)float3275.0 72.5 70.0 ... 20.0 17.5 15.0standard_name :latitudelong_name :Latitudeunits :degrees_northaxis :Yarray([75. , 72.5, 70. , 67.5, 65. , 62.5, 60. , 57.5, 55. , 52.5, 50. , 47.5,\n       45. , 42.5, 40. , 37.5, 35. , 32.5, 30. , 27.5, 25. , 22.5, 20. , 17.5,\n       15. ], dtype=float32)lon(lon)float32200.0 202.5 205.0 ... 327.5 330.0standard_name :longitudelong_name :Longitudeunits :degrees_eastaxis :Xarray([200. , 202.5, 205. , 207.5, 210. , 212.5, 215. , 217.5, 220. , 222.5,\n       225. , 227.5, 230. , 232.5, 235. , 237.5, 240. , 242.5, 245. , 247.5,\n       250. , 252.5, 255. , 257.5, 260. , 262.5, 265. , 267.5, 270. , 272.5,\n       275. , 277.5, 280. , 282.5, 285. , 287.5, 290. , 292.5, 295. , 297.5,\n       300. , 302.5, 305. , 307.5, 310. , 312.5, 315. , 317.5, 320. , 322.5,\n       325. , 327.5, 330. ], dtype=float32)Data variables: (2)air(time, lat, lon)float32-28.68 -28.49 ... 24.57 24.56long_name :4xDaily Air temperature at sigma level 995units :degCprecision :2GRIB_id :11GRIB_name :TMPvar_desc :Air temperaturedataset :NMC Reanalysislevel_desc :Surfacestatistic :Individual Obsparent_stat :Otheractual_range :[185.16 322.1 ]array([[[-28.68323  , -28.486452 , -28.479755 , ..., -30.658554 ,\n         -29.743628 , -28.474194 ],\n        [-26.076784 , -26.127504 , -26.4225   , ..., -32.5679   ,\n         -31.105167 , -28.442825 ],\n        [-22.770565 , -23.31516  , -24.042498 , ..., -31.165657 ,\n         -28.38291  , -24.144924 ],\n        ...,\n        [ 22.688152 ,  22.00097  ,  21.773153 , ...,  22.218397 ,\n          21.734531 ,  21.118395 ],\n        [ 23.31952  ,  23.16702  ,  22.698233 , ...,  22.43775  ,\n          22.190727 ,  21.715578 ],\n        [ 23.903486 ,  23.89203  ,  23.585333 , ...,  23.154608 ,\n          22.947426 ,  22.889124 ]],\n\n       [[-32.41607  , -32.44866  , -32.738483 , ..., -31.54482  ,\n         -30.430185 , -29.205448 ],\n        [-31.216885 , -31.08063  , -31.236965 , ..., -32.135708 ,\n         -30.825186 , -28.42241  ],\n        [-27.826433 , -28.123934 , -28.78045  , ..., -29.734114 ,\n         -27.383936 , -23.491434 ],\n...\n        [ 24.899088 ,  24.200085 ,  24.072004 , ...,  24.861843 ,\n          24.510258 ,  23.995668 ],\n        [ 25.815008 ,  25.661922 ,  25.121607 , ...,  24.954088 ,\n          25.071083 ,  24.735588 ],\n        [ 26.023424 ,  26.06767  ,  25.74576  , ...,  25.566338 ,\n          25.591848 ,  25.630259 ]],\n\n       [[-26.348473 , -26.260897 , -26.380894 , ..., -33.07903  ,\n         -32.067986 , -30.868315 ],\n        [-25.419994 , -24.849277 , -24.405483 , ..., -34.531376 ,\n         -32.82783  , -30.179682 ],\n        [-23.181051 , -23.56476  , -23.574757 , ..., -35.446938 ,\n         -31.91259  , -26.923311 ],\n        ...,\n        [ 23.299198 ,  22.541454 ,  22.60839  , ...,  23.378307 ,\n          23.067505 ,  22.662996 ],\n        [ 24.295895 ,  24.286139 ,  24.031782 , ...,  23.80259  ,\n          23.908312 ,  23.579037 ],\n        [ 24.897346 ,  25.076134 ,  24.909689 , ...,  24.547583 ,\n          24.573233 ,  24.560413 ]]], dtype=float32)air_kelvin(time, lat, lon)float32244.5 244.7 244.7 ... 297.7 297.7long_name :4xDaily Air temperature at sigma level 995units :degKprecision :2GRIB_id :11GRIB_name :TMPvar_desc :Air temperaturedataset :NMC Reanalysislevel_desc :Surfacestatistic :Individual Obsparent_stat :Otheractual_range :[185.16 322.1 ]array([[[244.4667 , 244.66354, 244.67027, ..., 242.49142, 243.40633,\n         244.67577],\n        [247.07323, 247.02248, 246.7275 , ..., 240.58205, 242.04489,\n         244.70726],\n        [250.37941, 249.83484, 249.10748, ..., 241.98434, 244.76712,\n         249.00505],\n        ...,\n        [295.83795, 295.15085, 294.9229 , ..., 295.36826, 294.88437,\n         294.26828],\n        [296.46942, 296.31686, 295.84802, ..., 295.5876 , 295.34058,\n         294.86536],\n        [297.05316, 297.0418 , 296.73517, ..., 296.30438, 296.09732,\n         296.0389 ]],\n\n       [[240.73384, 240.7013 , 240.4115 , ..., 241.60518, 242.71988,\n         243.94455],\n        [241.93309, 242.06935, 241.913  , ..., 241.01428, 242.32481,\n         244.72758],\n        [245.32361, 245.0261 , 244.36955, ..., 243.41588, 245.7661 ,\n         249.65858],\n...\n        [298.04895, 297.35007, 297.22195, ..., 298.01172, 297.66013,\n         297.14554],\n        [298.96484, 298.81186, 298.27136, ..., 298.10403, 298.22104,\n         297.88547],\n        [299.17334, 299.2175 , 298.89566, ..., 298.71625, 298.74167,\n         298.7802 ]],\n\n       [[246.80156, 246.88907, 246.76907, ..., 240.07089, 241.08206,\n         242.2817 ],\n        [247.72998, 248.30064, 248.74443, ..., 238.61859, 240.3222 ,\n         242.97026],\n        [249.96893, 249.58516, 249.57521, ..., 237.70308, 241.23743,\n         246.22667],\n        ...,\n        [296.4491 , 295.6914 , 295.75824, ..., 296.52817, 296.21747,\n         295.8128 ],\n        [297.44586, 297.43613, 297.1817 , ..., 296.95242, 297.05823,\n         296.72897],\n        [298.0472 , 298.22598, 298.0595 , ..., 297.6975 , 297.72318,\n         297.71024]]], dtype=float32)Attributes: (5)Conventions :COARDStitle :4x daily NMC reanalysis (1948)description :Data is from NMC initialized reanalysis\n(4x/day).  These are the 0.9950 sigma level values.platform :Modelreferences :http://www.esrl.noaa.gov/psd/data/gridded/data.ncep.reanalysis.html\n\n\nThis is a really short time series but as an example, let‚Äôs calculate a monthly climatology (at least for 2 months). For this we can use groupby()\n\nds_clim = ds_mon.groupby(ds_mon.time.dt.month).mean()"
  },
  {
    "objectID": "python-notebooks/02_Xarray_hvplot.html#plot-results",
    "href": "python-notebooks/02_Xarray_hvplot.html#plot-results",
    "title": "03. Introduction to xarray",
    "section": "Plot results",
    "text": "Plot results\nFinally, let‚Äôs plot the results! This will plot the lat/lon axes of the original ds DataArray.\n\nds_clim.air.sel(month=10).plot()\n\n&lt;matplotlib.collections.QuadMesh at 0x7f22bb7acd90&gt;"
  },
  {
    "objectID": "python-notebooks/02_Zarr_Access_netCDF.html#summary",
    "href": "python-notebooks/02_Zarr_Access_netCDF.html#summary",
    "title": "Zarr Access for NetCDF4 files",
    "section": "Summary",
    "text": "Summary\nZarr is an open source library for storing N-dimensional array data. It supports multidimensional arrays with attributes and dimensions similar to NetCDF4, and it can be read by XArray. Zarr is often used for data held in cloud object storage (like Amazon S3), because it is better optimized for these situations than NetCDF4.\nDO NOT USE zarr-eodis-store is depends on only XArray\nThe zarr-eosdis-store library allows NASA EOSDIS NetCDF4 files to be read more efficiently by transferring only file metadata and data needed for computation in a small number of requests, rather than moving the whole file or making many small requests. It works by making the files directly readable by the Zarr Python library and XArray across a network. To use it, files must have a corresponding metadata file ending in .dmrpp, which increasingly true for cloud-accessible EOSDIS data. https://github.com/nasa/zarr-eosdis-store\nThe zarr-eosdis-store library provides several benefits over downloading EOSDIS data files and accessing them using XArray, NetCDF4, or HDF5 Python libraries:\n\nIt only downloads the chunks of data you actually read, so if you don‚Äôt read all variables or the full spatiotemporal extent of a file, you usually won‚Äôt spend time downloading those portions of the file\nIt parallelizes and optimizes downloads for the portions of files you do read, so download speeds can be faster in general\nIt automatically interoperates with Earthdata Login if you have a .netrc file set up\nIt is aware of some EOSDIS cloud implementation quirks and provides caching that can save time for repeated requests to individual files\n\nIt can also be faster than using XArray pointing NetCDF4 files with s3:// URLs, depending on the file‚Äôs internal structure, and is often more convenient.\nConsider using this library when: 1. The portion of the data file you need to use is much smaller than the full file, e.g.¬†in cases of spatial subsets or reading a single variable from a file containing several 1. s3:// URLs are not readily available 1. Code need to run outside of the AWS cloud or us-west-2 region or in a hybrid cloud / non-cloud manner 1. s3:// access using XArray seems slower than you would expect (possibly due to unoptimized internal file structure) 1. No readily-available, public, cloud-optimized version of the data exists already. The example we show is also available as an AWS Public Dataset: https://registry.opendata.aws/mur/ 1. Adding ‚Äú.dmrpp‚Äù to the end of a data URL returns a file\n\nObjectives\n\nBuild on prior knowledge from CMR and Earthdata Login tutorials\nWork through an example of using the EOSDIS Zarr Store to access data using XArray\nLearn about the Zarr format and library for accessing data in the cloud"
  },
  {
    "objectID": "python-notebooks/02_Zarr_Access_netCDF.html#exercise",
    "href": "python-notebooks/02_Zarr_Access_netCDF.html#exercise",
    "title": "Zarr Access for NetCDF4 files",
    "section": "Exercise",
    "text": "Exercise\nIn this exercise, we will be using the eosdis-zarr-store library to aggregate and analyze a month of sea surface temperature for the Great Lakes region\n\nSet up\n\nImport Required Packages\n\n# Core libraries for this tutorial\n# Available via `pip install zarr zarr-eosdis-store`\nfrom eosdis_store import EosdisStore\nimport xarray as xr\n\n# Other Python libraries\nimport requests\nfrom pqdm.threads import pqdm\nfrom matplotlib import animation, pyplot as plt\nfrom IPython.core.display import display, HTML\n\n# Python standard library imports\nfrom pprint import pprint\n\nAlso set the width / height for plots we show\n\nplt.rcParams['figure.figsize'] = 12, 6\n\n\n\nSet Dataset, Time, and Region of Interest\nLook in PO.DAAC‚Äôs cloud archive for Group for High Resolution Sea Surface Temperature (GHRSST) Level 4 Multiscale Ultrahigh Resolution (MUR) data\n\ndata_provider = 'POCLOUD'\nmur_short_name = 'MUR-JPL-L4-GLOB-v4.1'\n\nLooking for data from the month of September over the Great Lakes\n\nstart_time = '2021-09-01T21:00:00Z'\nend_time = '2021-09-30T20:59:59Z'\n\n# Bounding box around the Great Lakes\nlats = slice(41, 49)\nlons = slice(-93, -76)\n\n# Some other possibly interesting bounding boxes:\n\n# Hawaiian Islands\n# lats = slice(18, 22.5)\n# lons = slice(-161, -154)\n\n# Mediterranean Sea\n# lats = slice(29, 45)\n# lons = slice(-7, 37)\n\n\n\n\nFind URLs for the dataset and AOI\nSet up a CMR granules search for our area of interest, as we saw in prior tutorials\n\ncmr_url = 'https://cmr.earthdata.nasa.gov/search/granules.json'\n\nSearch for granules in our area of interest, expecting one granule per day of September\n\nresponse = requests.get(cmr_url, \n                        params={\n                            'provider': data_provider,\n                            'short_name': mur_short_name, \n                            'temporal': f'{start_time},{end_time}',\n                            'bounding_box': f'{lons.start},{lats.start},{lons.stop},{lats.stop}',\n                            'page_size': 2000,\n                            }\n                       )\n\n\ngranules = response.json()['feed']['entry']\n\nfor granule in granules:\n    print(granule['title'])\n\n20210901090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1\n20210902090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1\n20210903090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1\n20210904090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1\n20210905090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1\n20210906090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1\n20210907090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1\n20210908090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1\n20210909090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1\n20210910090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1\n20210911090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1\n20210912090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1\n20210913090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1\n20210914090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1\n20210915090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1\n20210916090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1\n20210917090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1\n20210918090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1\n20210919090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1\n20210920090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1\n20210921090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1\n20210922090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1\n20210923090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1\n20210924090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1\n20210925090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1\n20210926090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1\n20210927090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1\n20210928090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1\n20210929090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1\n20210930090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1\n\n\n\npprint(granules[0])\n\n{'boxes': ['-90 -180 90 180'],\n 'browse_flag': False,\n 'collection_concept_id': 'C1996881146-POCLOUD',\n 'coordinate_system': 'CARTESIAN',\n 'data_center': 'POCLOUD',\n 'dataset_id': 'GHRSST Level 4 MUR Global Foundation Sea Surface Temperature '\n               'Analysis (v4.1)',\n 'day_night_flag': 'UNSPECIFIED',\n 'granule_size': '9.059906005859375E-5',\n 'id': 'G2113241213-POCLOUD',\n 'links': [{'href': 's3://podaac-ops-cumulus-protected/MUR-JPL-L4-GLOB-v4.1/20210901090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1.nc',\n            'hreflang': 'en-US',\n            'rel': 'http://esipfed.org/ns/fedsearch/1.1/s3#',\n            'title': 'This link provides direct download access via S3 to the '\n                     'granule.'},\n           {'href': 'https://archive.podaac.earthdata.nasa.gov/podaac-ops-cumulus-protected/MUR-JPL-L4-GLOB-v4.1/20210901090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1.nc',\n            'hreflang': 'en-US',\n            'rel': 'http://esipfed.org/ns/fedsearch/1.1/data#',\n            'title': 'Download '\n                     '20210901090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1.nc'},\n           {'href': 'https://archive.podaac.earthdata.nasa.gov/podaac-ops-cumulus-public/MUR-JPL-L4-GLOB-v4.1/20210901090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1.nc.md5',\n            'hreflang': 'en-US',\n            'rel': 'http://esipfed.org/ns/fedsearch/1.1/metadata#',\n            'title': 'Download '\n                     '20210901090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1.nc.md5'},\n           {'href': 'https://archive.podaac.earthdata.nasa.gov/s3credentials',\n            'hreflang': 'en-US',\n            'rel': 'http://esipfed.org/ns/fedsearch/1.1/metadata#',\n            'title': 'api endpoint to retrieve temporary credentials valid for '\n                     'same-region direct s3 access'},\n           {'href': 'https://opendap.earthdata.nasa.gov/collections/C1996881146-POCLOUD/granules/20210901090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1',\n            'hreflang': 'en-US',\n            'rel': 'http://esipfed.org/ns/fedsearch/1.1/service#',\n            'title': 'OPeNDAP request URL'},\n           {'href': 'https://github.com/nasa/podaac_tools_and_services/tree/master/subset_opendap',\n            'hreflang': 'en-US',\n            'inherited': True,\n            'rel': 'http://esipfed.org/ns/fedsearch/1.1/documentation#'},\n           {'href': 'https://ghrsst.jpl.nasa.gov',\n            'hreflang': 'en-US',\n            'inherited': True,\n            'rel': 'http://esipfed.org/ns/fedsearch/1.1/documentation#'},\n           {'href': 'https://earthdata.nasa.gov/esds/competitive-programs/measures/mur-sst',\n            'hreflang': 'en-US',\n            'inherited': True,\n            'rel': 'http://esipfed.org/ns/fedsearch/1.1/metadata#'},\n           {'href': 'http://journals.ametsoc.org/doi/abs/10.1175/1520-0426%281998%29015%3C0741:BSHWSS%3E2.0.CO;2',\n            'hreflang': 'en-US',\n            'inherited': True,\n            'rel': 'http://esipfed.org/ns/fedsearch/1.1/documentation#'},\n           {'href': 'https://podaac-tools.jpl.nasa.gov/drive/files/OceanTemperature/ghrsst/docs/GDS20r5.pdf',\n            'hreflang': 'en-US',\n            'inherited': True,\n            'rel': 'http://esipfed.org/ns/fedsearch/1.1/documentation#'},\n           {'href': 'https://github.com/podaac/data-readers',\n            'hreflang': 'en-US',\n            'inherited': True,\n            'rel': 'http://esipfed.org/ns/fedsearch/1.1/documentation#'},\n           {'href': 'https://doi.org/10.1016/j.rse.2017.07.029',\n            'hreflang': 'en-US',\n            'inherited': True,\n            'rel': 'http://esipfed.org/ns/fedsearch/1.1/documentation#'},\n           {'href': 'https://registry.opendata.aws/mur/#usageexa',\n            'hreflang': 'en-US',\n            'inherited': True,\n            'rel': 'http://esipfed.org/ns/fedsearch/1.1/metadata#'},\n           {'href': 'http://www.ghrsst.org',\n            'hreflang': 'en-US',\n            'inherited': True,\n            'rel': 'http://esipfed.org/ns/fedsearch/1.1/documentation#'},\n           {'href': 'https://podaac.jpl.nasa.gov/CitingPODAAC',\n            'hreflang': 'en-US',\n            'inherited': True,\n            'rel': 'http://esipfed.org/ns/fedsearch/1.1/documentation#'},\n           {'href': 'https://cmr.earthdata.nasa.gov/virtual-directory/collections/C1996881146-POCLOUD ',\n            'hreflang': 'en-US',\n            'inherited': True,\n            'length': '300.0MB',\n            'rel': 'http://esipfed.org/ns/fedsearch/1.1/data#'},\n           {'href': ' '\n                    'https://search.earthdata.nasa.gov/search/granules?p=C1996881146-POCLOUD ',\n            'hreflang': 'en-US',\n            'inherited': True,\n            'length': '700.0MB',\n            'rel': 'http://esipfed.org/ns/fedsearch/1.1/data#'},\n           {'href': 'https://podaac.jpl.nasa.gov/MEaSUREs-MUR',\n            'hreflang': 'en-US',\n            'inherited': True,\n            'rel': 'http://esipfed.org/ns/fedsearch/1.1/documentation#'},\n           {'href': 'https://github.com/podaac/tutorials/blob/master/notebooks/SWOT-EA-2021/Colocate_satellite_insitu_ocean.ipynb',\n            'hreflang': 'en-US',\n            'inherited': True,\n            'rel': 'http://esipfed.org/ns/fedsearch/1.1/documentation#'}],\n 'online_access_flag': True,\n 'original_format': 'UMM_JSON',\n 'time_end': '2021-09-01T21:00:00.000Z',\n 'time_start': '2021-08-31T21:00:00.000Z',\n 'title': '20210901090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1',\n 'updated': '2021-09-10T07:29:40.511Z'}\n\n\n\nurls = []\nfor granule in granules:\n    for link in granule['links']:\n        if link['rel'].endswith('/data#'):\n            urls.append(link['href'])\n            break\npprint(urls)\n\n['https://archive.podaac.earthdata.nasa.gov/podaac-ops-cumulus-protected/MUR-JPL-L4-GLOB-v4.1/20210901090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1.nc',\n 'https://archive.podaac.earthdata.nasa.gov/podaac-ops-cumulus-protected/MUR-JPL-L4-GLOB-v4.1/20210902090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1.nc',\n 'https://archive.podaac.earthdata.nasa.gov/podaac-ops-cumulus-protected/MUR-JPL-L4-GLOB-v4.1/20210903090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1.nc',\n 'https://archive.podaac.earthdata.nasa.gov/podaac-ops-cumulus-protected/MUR-JPL-L4-GLOB-v4.1/20210904090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1.nc',\n 'https://archive.podaac.earthdata.nasa.gov/podaac-ops-cumulus-protected/MUR-JPL-L4-GLOB-v4.1/20210905090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1.nc',\n 'https://archive.podaac.earthdata.nasa.gov/podaac-ops-cumulus-protected/MUR-JPL-L4-GLOB-v4.1/20210906090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1.nc',\n 'https://archive.podaac.earthdata.nasa.gov/podaac-ops-cumulus-protected/MUR-JPL-L4-GLOB-v4.1/20210907090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1.nc',\n 'https://archive.podaac.earthdata.nasa.gov/podaac-ops-cumulus-protected/MUR-JPL-L4-GLOB-v4.1/20210908090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1.nc',\n 'https://archive.podaac.earthdata.nasa.gov/podaac-ops-cumulus-protected/MUR-JPL-L4-GLOB-v4.1/20210909090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1.nc',\n 'https://archive.podaac.earthdata.nasa.gov/podaac-ops-cumulus-protected/MUR-JPL-L4-GLOB-v4.1/20210910090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1.nc',\n 'https://archive.podaac.earthdata.nasa.gov/podaac-ops-cumulus-protected/MUR-JPL-L4-GLOB-v4.1/20210911090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1.nc',\n 'https://archive.podaac.earthdata.nasa.gov/podaac-ops-cumulus-protected/MUR-JPL-L4-GLOB-v4.1/20210912090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1.nc',\n 'https://archive.podaac.earthdata.nasa.gov/podaac-ops-cumulus-protected/MUR-JPL-L4-GLOB-v4.1/20210913090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1.nc',\n 'https://archive.podaac.earthdata.nasa.gov/podaac-ops-cumulus-protected/MUR-JPL-L4-GLOB-v4.1/20210914090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1.nc',\n 'https://archive.podaac.earthdata.nasa.gov/podaac-ops-cumulus-protected/MUR-JPL-L4-GLOB-v4.1/20210915090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1.nc',\n 'https://archive.podaac.earthdata.nasa.gov/podaac-ops-cumulus-protected/MUR-JPL-L4-GLOB-v4.1/20210916090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1.nc',\n 'https://archive.podaac.earthdata.nasa.gov/podaac-ops-cumulus-protected/MUR-JPL-L4-GLOB-v4.1/20210917090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1.nc',\n 'https://archive.podaac.earthdata.nasa.gov/podaac-ops-cumulus-protected/MUR-JPL-L4-GLOB-v4.1/20210918090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1.nc',\n 'https://archive.podaac.earthdata.nasa.gov/podaac-ops-cumulus-protected/MUR-JPL-L4-GLOB-v4.1/20210919090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1.nc',\n 'https://archive.podaac.earthdata.nasa.gov/podaac-ops-cumulus-protected/MUR-JPL-L4-GLOB-v4.1/20210920090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1.nc',\n 'https://archive.podaac.earthdata.nasa.gov/podaac-ops-cumulus-protected/MUR-JPL-L4-GLOB-v4.1/20210921090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1.nc',\n 'https://archive.podaac.earthdata.nasa.gov/podaac-ops-cumulus-protected/MUR-JPL-L4-GLOB-v4.1/20210922090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1.nc',\n 'https://archive.podaac.earthdata.nasa.gov/podaac-ops-cumulus-protected/MUR-JPL-L4-GLOB-v4.1/20210923090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1.nc',\n 'https://archive.podaac.earthdata.nasa.gov/podaac-ops-cumulus-protected/MUR-JPL-L4-GLOB-v4.1/20210924090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1.nc',\n 'https://archive.podaac.earthdata.nasa.gov/podaac-ops-cumulus-protected/MUR-JPL-L4-GLOB-v4.1/20210925090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1.nc',\n 'https://archive.podaac.earthdata.nasa.gov/podaac-ops-cumulus-protected/MUR-JPL-L4-GLOB-v4.1/20210926090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1.nc',\n 'https://archive.podaac.earthdata.nasa.gov/podaac-ops-cumulus-protected/MUR-JPL-L4-GLOB-v4.1/20210927090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1.nc',\n 'https://archive.podaac.earthdata.nasa.gov/podaac-ops-cumulus-protected/MUR-JPL-L4-GLOB-v4.1/20210928090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1.nc',\n 'https://archive.podaac.earthdata.nasa.gov/podaac-ops-cumulus-protected/MUR-JPL-L4-GLOB-v4.1/20210929090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1.nc',\n 'https://archive.podaac.earthdata.nasa.gov/podaac-ops-cumulus-protected/MUR-JPL-L4-GLOB-v4.1/20210930090000-JPL-L4_GHRSST-SSTfnd-MUR-GLOB-v02.0-fv04.1.nc']\n\n\n\n\nOpen and view our AOI without downloading a whole file\n\nCheck to see if we can use an efficient partial-access technique\n\nresponse = requests.head(f'{urls[0]}.dmrpp')\n\nprint('Can we use EosdisZarrStore and XArray to access these files more efficiently?')\nprint('Yes' if response.ok else 'No')\n\nCan we use EosdisZarrStore and XArray to access these files more efficiently?\nYes\n\n\nOpen our first URL using the Zarr library\n\nurl = urls[0]\n\nds = xr.open_zarr(EosdisStore(url), consolidated=False)\n\nThat‚Äôs it! No downloads, temporary credentials, or S3 filesystems. Hereafter, we interact with the ds variable as with any XArray dataset. We need not worry about the EosdisStore anymore.\nView the file‚Äôs variable structure\n\nds\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:           (time: 1, lat: 17999, lon: 36000)\nCoordinates:\n  * lat               (lat) float32 -89.99 -89.98 -89.97 ... 89.97 89.98 89.99\n  * lon               (lon) float32 -180.0 -180.0 -180.0 ... 180.0 180.0 180.0\n  * time              (time) datetime64[ns] 2021-09-01T09:00:00\nData variables:\n    analysed_sst      (time, lat, lon) float32 dask.array&lt;chunksize=(1, 1023, 2047), meta=np.ndarray&gt;\n    analysis_error    (time, lat, lon) float32 dask.array&lt;chunksize=(1, 1023, 2047), meta=np.ndarray&gt;\n    dt_1km_data       (time, lat, lon) timedelta64[ns] dask.array&lt;chunksize=(1, 1447, 2895), meta=np.ndarray&gt;\n    mask              (time, lat, lon) float32 dask.array&lt;chunksize=(1, 1447, 2895), meta=np.ndarray&gt;\n    sea_ice_fraction  (time, lat, lon) float32 dask.array&lt;chunksize=(1, 1447, 2895), meta=np.ndarray&gt;\n    sst_anomaly       (time, lat, lon) float32 dask.array&lt;chunksize=(1, 1023, 2047), meta=np.ndarray&gt;\nAttributes: (12/47)\n    Conventions:                CF-1.7\n    title:                      Daily MUR SST, Final product\n    summary:                    A merged, multi-sensor L4 Foundation SST anal...\n    references:                 http://podaac.jpl.nasa.gov/Multi-scale_Ultra-...\n    institution:                Jet Propulsion Laboratory\n    history:                    created at nominal 4-day latency; replaced nr...\n    ...                         ...\n    project:                    NASA Making Earth Science Data Records for Us...\n    publisher_name:             GHRSST Project Office\n    publisher_url:              http://www.ghrsst.org\n    publisher_email:            ghrsst-po@nceo.ac.uk\n    processing_level:           L4\n    cdm_data_type:              gridxarray.DatasetDimensions:time: 1lat: 17999lon: 36000Coordinates: (3)lat(lat)float32-89.99 -89.98 ... 89.98 89.99long_name :latitudestandard_name :latitudeaxis :Yunits :degrees_northvalid_min :-90.0valid_max :90.0comment :geolocations inherited from the input data without correctionarray([-89.99, -89.98, -89.97, ...,  89.97,  89.98,  89.99], dtype=float32)lon(lon)float32-180.0 -180.0 ... 180.0 180.0long_name :longitudestandard_name :longitudeaxis :Xunits :degrees_eastvalid_min :-180.0valid_max :180.0comment :geolocations inherited from the input data without correctionarray([-179.99, -179.98, -179.97, ...,  179.98,  179.99,  180.  ],\n      dtype=float32)time(time)datetime64[ns]2021-09-01T09:00:00long_name :reference time of sst fieldstandard_name :timeaxis :Tcomment :Nominal time of analyzed fieldsarray(['2021-09-01T09:00:00.000000000'], dtype='datetime64[ns]')Data variables: (6)analysed_sst(time, lat, lon)float32dask.array&lt;chunksize=(1, 1023, 2047), meta=np.ndarray&gt;long_name :analysed sea surface temperaturestandard_name :sea_surface_foundation_temperatureunits :kelvinvalid_min :-32767valid_max :32767comment :\\\"Final\\\" version using Multi-Resolution Variational Analysis (MRVA) method for interpolationsource :MODIS_T-JPL, MODIS_A-JPL, AMSR2-REMSS, AVHRRMTA_G-NAVO, AVHRRMTB_G-NAVO, iQUAM-NOAA/NESDIS, Ice_Conc-OSISAF\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n2.41 GiB\n7.99 MiB\n\n\nShape\n(1, 17999, 36000)\n(1, 1023, 2047)\n\n\nCount\n325 Tasks\n324 Chunks\n\n\nType\nfloat32\nnumpy.ndarray\n\n\n\n\n\n\n\n\nanalysis_error\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(1, 1023, 2047), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\nestimated error standard deviation of analysed_sst\n\nunits :\n\nkelvin\n\nvalid_min :\n\n0\n\nvalid_max :\n\n32767\n\ncomment :\n\nuncertainty in \\\"analysed_sst\\\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n2.41 GiB\n7.99 MiB\n\n\nShape\n(1, 17999, 36000)\n(1, 1023, 2047)\n\n\nCount\n325 Tasks\n324 Chunks\n\n\nType\nfloat32\nnumpy.ndarray\n\n\n\n\n\n\n\n\n\ndt_1km_data\n\n\n(time, lat, lon)\n\n\ntimedelta64[ns]\n\n\ndask.array&lt;chunksize=(1, 1447, 2895), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\ntime to most recent 1km data\n\nvalid_min :\n\n-127\n\nvalid_max :\n\n127\n\nsource :\n\nMODIS and VIIRS pixels ingested by MUR\n\ncomment :\n\nThe grid value is hours between the analysis time and the most recent MODIS or VIIRS 1km L2P datum within 0.01 degrees from the grid point. \\\"Fill value\\\" indicates absence of such 1km data at the grid point.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n4.83 GiB\n31.96 MiB\n\n\nShape\n(1, 17999, 36000)\n(1, 1447, 2895)\n\n\nCount\n170 Tasks\n169 Chunks\n\n\nType\ntimedelta64[ns]\nnumpy.ndarray\n\n\n\n\n\n\n\n\n\nmask\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(1, 1447, 2895), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\nsea/land field composite mask\n\nvalid_min :\n\n1\n\nvalid_max :\n\n31\n\nflag_masks :\n\n[1, 2, 4, 8, 16]\n\nflag_meanings :\n\nopen_sea land open_lake open_sea_with_ice_in_the_grid open_lake_with_ice_in_the_grid\n\ncomment :\n\nmask can be used to further filter the data.\n\nsource :\n\nGMT \\\"grdlandmask\\\", ice flag from sea_ice_fraction data\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n2.41 GiB\n15.98 MiB\n\n\nShape\n(1, 17999, 36000)\n(1, 1447, 2895)\n\n\nCount\n170 Tasks\n169 Chunks\n\n\nType\nfloat32\nnumpy.ndarray\n\n\n\n\n\n\n\n\n\nsea_ice_fraction\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(1, 1447, 2895), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\nsea ice area fraction\n\nstandard_name :\n\nsea_ice_area_fraction\n\nvalid_min :\n\n0\n\nvalid_max :\n\n100\n\nsource :\n\nEUMETSAT OSI-SAF, copyright EUMETSAT\n\ncomment :\n\nice fraction is a dimensionless quantity between 0 and 1; it has been interpolated by a nearest neighbor approach.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n2.41 GiB\n15.98 MiB\n\n\nShape\n(1, 17999, 36000)\n(1, 1447, 2895)\n\n\nCount\n170 Tasks\n169 Chunks\n\n\nType\nfloat32\nnumpy.ndarray\n\n\n\n\n\n\n\n\n\nsst_anomaly\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(1, 1023, 2047), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\nSST anomaly from a seasonal SST climatology based on the MUR data over 2003-2014 period\n\nunits :\n\nkelvin\n\nvalid_min :\n\n-32767\n\nvalid_max :\n\n32767\n\ncomment :\n\nanomaly reference to the day-of-year average between 2003 and 2014\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n2.41 GiB\n7.99 MiB\n\n\nShape\n(1, 17999, 36000)\n(1, 1023, 2047)\n\n\nCount\n325 Tasks\n324 Chunks\n\n\nType\nfloat32\nnumpy.ndarray\n\n\n\n\n\n\n\n\nAttributes: (47)Conventions :CF-1.7title :Daily MUR SST, Final productsummary :A merged, multi-sensor L4 Foundation SST analysis product from JPL.references :http://podaac.jpl.nasa.gov/Multi-scale_Ultra-high_Resolution_MUR-SSTinstitution :Jet Propulsion Laboratoryhistory :created at nominal 4-day latency; replaced nrt (1-day latency) version.comment :MUR = \\\"Multi-scale Ultra-high Resolution\\\"license :These data are available free of charge under data policy of JPL PO.DAAC.id :MUR-JPL-L4-GLOB-v04.1naming_authority :org.ghrsstproduct_version :04.1uuid :27665bc0-d5fc-11e1-9b23-0800200c9a66gds_version_id :2.0netcdf_version_id :4.1date_created :20210910T072132Zstart_time :20210901T090000Zstop_time :20210901T090000Ztime_coverage_start :20210831T210000Ztime_coverage_end :20210901T210000Zfile_quality_level :3source :MODIS_T-JPL, MODIS_A-JPL, AMSR2-REMSS, AVHRRMTA_G-NAVO, AVHRRMTB_G-NAVO, iQUAM-NOAA/NESDIS, Ice_Conc-OSISAFplatform :Terra, Aqua, GCOM-W, MetOp-A, MetOp-B, Buoys/Shipssensor :MODIS, AMSR2, AVHRR, in-situMetadata_Conventions :Unidata Observation Dataset v1.0metadata_link :http://podaac.jpl.nasa.gov/ws/metadata/dataset/?format=iso&shortName=MUR-JPL-L4-GLOB-v04.1keywords :Oceans &gt; Ocean Temperature &gt; Sea Surface Temperaturekeywords_vocabulary :NASA Global Change Master Directory (GCMD) Science Keywordsstandard_name_vocabulary :NetCDF Climate and Forecast (CF) Metadata Conventionsouthernmost_latitude :-90.0northernmost_latitude :90.0westernmost_longitude :-180.0easternmost_longitude :180.0spatial_resolution :0.01 degreesgeospatial_lat_units :degrees northgeospatial_lat_resolution :0.009999999776geospatial_lon_units :degrees eastgeospatial_lon_resolution :0.009999999776acknowledgment :Please acknowledge the use of these data with the following statement:  These data were provided by JPL under support by NASA MEaSUREs program.creator_name :JPL MUR SST projectcreator_email :ghrsst@podaac.jpl.nasa.govcreator_url :http://mur.jpl.nasa.govproject :NASA Making Earth Science Data Records for Use in Research Environments (MEaSUREs) Programpublisher_name :GHRSST Project Officepublisher_url :http://www.ghrsst.orgpublisher_email :ghrsst-po@nceo.ac.ukprocessing_level :L4cdm_data_type :grid\n\n\n\nds.analysed_sst\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.DataArray 'analysed_sst' (time: 1, lat: 17999, lon: 36000)&gt;\ndask.array&lt;open_dataset-4d5a9a1e1fda090e80524b67b2e413c6analysed_sst, shape=(1, 17999, 36000), dtype=float32, chunksize=(1, 1023, 2047), chunktype=numpy.ndarray&gt;\nCoordinates:\n  * lat      (lat) float32 -89.99 -89.98 -89.97 -89.96 ... 89.97 89.98 89.99\n  * lon      (lon) float32 -180.0 -180.0 -180.0 -180.0 ... 180.0 180.0 180.0\n  * time     (time) datetime64[ns] 2021-09-01T09:00:00\nAttributes:\n    long_name:      analysed sea surface temperature\n    standard_name:  sea_surface_foundation_temperature\n    units:          kelvin\n    valid_min:      -32767\n    valid_max:      32767\n    comment:        \\\"Final\\\" version using Multi-Resolution Variational Anal...\n    source:         MODIS_T-JPL, MODIS_A-JPL, AMSR2-REMSS, AVHRRMTA_G-NAVO, A...xarray.DataArray'analysed_sst'time: 1lat: 17999lon: 36000dask.array&lt;chunksize=(1, 1023, 2047), meta=np.ndarray&gt;\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n2.41 GiB\n7.99 MiB\n\n\nShape\n(1, 17999, 36000)\n(1, 1023, 2047)\n\n\nCount\n325 Tasks\n324 Chunks\n\n\nType\nfloat32\nnumpy.ndarray\n\n\n\n\n\n\n\nCoordinates: (3)lat(lat)float32-89.99 -89.98 ... 89.98 89.99long_name :latitudestandard_name :latitudeaxis :Yunits :degrees_northvalid_min :-90.0valid_max :90.0comment :geolocations inherited from the input data without correctionarray([-89.99, -89.98, -89.97, ...,  89.97,  89.98,  89.99], dtype=float32)lon(lon)float32-180.0 -180.0 ... 180.0 180.0long_name :longitudestandard_name :longitudeaxis :Xunits :degrees_eastvalid_min :-180.0valid_max :180.0comment :geolocations inherited from the input data without correctionarray([-179.99, -179.98, -179.97, ...,  179.98,  179.99,  180.  ],\n      dtype=float32)time(time)datetime64[ns]2021-09-01T09:00:00long_name :reference time of sst fieldstandard_name :timeaxis :Tcomment :Nominal time of analyzed fieldsarray(['2021-09-01T09:00:00.000000000'], dtype='datetime64[ns]')Attributes: (7)long_name :analysed sea surface temperaturestandard_name :sea_surface_foundation_temperatureunits :kelvinvalid_min :-32767valid_max :32767comment :\\\"Final\\\" version using Multi-Resolution Variational Analysis (MRVA) method for interpolationsource :MODIS_T-JPL, MODIS_A-JPL, AMSR2-REMSS, AVHRRMTA_G-NAVO, AVHRRMTB_G-NAVO, iQUAM-NOAA/NESDIS, Ice_Conc-OSISAF\n\n\n\nsst = ds.analysed_sst.sel(lat=lats, lon=lons)\nsst\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.DataArray 'analysed_sst' (time: 1, lat: 801, lon: 1701)&gt;\ndask.array&lt;getitem, shape=(1, 801, 1701), dtype=float32, chunksize=(1, 601, 1536), chunktype=numpy.ndarray&gt;\nCoordinates:\n  * lat      (lat) float32 41.0 41.01 41.02 41.03 ... 48.97 48.98 48.99 49.0\n  * lon      (lon) float32 -93.0 -92.99 -92.98 -92.97 ... -76.02 -76.01 -76.0\n  * time     (time) datetime64[ns] 2021-09-01T09:00:00\nAttributes:\n    long_name:      analysed sea surface temperature\n    standard_name:  sea_surface_foundation_temperature\n    units:          kelvin\n    valid_min:      -32767\n    valid_max:      32767\n    comment:        \\\"Final\\\" version using Multi-Resolution Variational Anal...\n    source:         MODIS_T-JPL, MODIS_A-JPL, AMSR2-REMSS, AVHRRMTA_G-NAVO, A...xarray.DataArray'analysed_sst'time: 1lat: 801lon: 1701dask.array&lt;chunksize=(1, 200, 1536), meta=np.ndarray&gt;\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n5.20 MiB\n3.52 MiB\n\n\nShape\n(1, 801, 1701)\n(1, 601, 1536)\n\n\nCount\n329 Tasks\n4 Chunks\n\n\nType\nfloat32\nnumpy.ndarray\n\n\n\n\n\n\n\nCoordinates: (3)lat(lat)float3241.0 41.01 41.02 ... 48.99 49.0long_name :latitudestandard_name :latitudeaxis :Yunits :degrees_northvalid_min :-90.0valid_max :90.0comment :geolocations inherited from the input data without correctionarray([41.  , 41.01, 41.02, ..., 48.98, 48.99, 49.  ], dtype=float32)lon(lon)float32-93.0 -92.99 ... -76.01 -76.0long_name :longitudestandard_name :longitudeaxis :Xunits :degrees_eastvalid_min :-180.0valid_max :180.0comment :geolocations inherited from the input data without correctionarray([-93.  , -92.99, -92.98, ..., -76.02, -76.01, -76.  ], dtype=float32)time(time)datetime64[ns]2021-09-01T09:00:00long_name :reference time of sst fieldstandard_name :timeaxis :Tcomment :Nominal time of analyzed fieldsarray(['2021-09-01T09:00:00.000000000'], dtype='datetime64[ns]')Attributes: (7)long_name :analysed sea surface temperaturestandard_name :sea_surface_foundation_temperatureunits :kelvinvalid_min :-32767valid_max :32767comment :\\\"Final\\\" version using Multi-Resolution Variational Analysis (MRVA) method for interpolationsource :MODIS_T-JPL, MODIS_A-JPL, AMSR2-REMSS, AVHRRMTA_G-NAVO, AVHRRMTB_G-NAVO, iQUAM-NOAA/NESDIS, Ice_Conc-OSISAF\n\n\n\nsst.plot()\n\n&lt;matplotlib.collections.QuadMesh at 0x7f2d9848d4c0&gt;\n\n\n\n\n\n\n\n\nAggregate and analyze 30 files\nSet up a function to open all of our URLs as XArrays in parallel\n\ndef open_as_zarr_xarray(url):\n    return xr.open_zarr(EosdisStore(url), consolidated=False)\n\ndatasets = pqdm(urls, open_as_zarr_xarray, n_jobs=30)\n\n\n\n\n\n\n\n\n\n\nCombine the individual file-based datasets into a single xarray dataset with a time axis\n\nds = xr.concat(datasets, 'time')\nds\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:           (time: 30, lat: 17999, lon: 36000)\nCoordinates:\n  * lat               (lat) float32 -89.99 -89.98 -89.97 ... 89.97 89.98 89.99\n  * lon               (lon) float32 -180.0 -180.0 -180.0 ... 180.0 180.0 180.0\n  * time              (time) datetime64[ns] 2021-09-01T09:00:00 ... 2021-09-3...\nData variables:\n    analysed_sst      (time, lat, lon) float32 dask.array&lt;chunksize=(1, 1023, 2047), meta=np.ndarray&gt;\n    analysis_error    (time, lat, lon) float32 dask.array&lt;chunksize=(1, 1023, 2047), meta=np.ndarray&gt;\n    dt_1km_data       (time, lat, lon) timedelta64[ns] dask.array&lt;chunksize=(1, 1447, 2895), meta=np.ndarray&gt;\n    mask              (time, lat, lon) float32 dask.array&lt;chunksize=(1, 1447, 2895), meta=np.ndarray&gt;\n    sea_ice_fraction  (time, lat, lon) float32 dask.array&lt;chunksize=(1, 1447, 2895), meta=np.ndarray&gt;\n    sst_anomaly       (time, lat, lon) float32 dask.array&lt;chunksize=(1, 1023, 2047), meta=np.ndarray&gt;\nAttributes: (12/47)\n    Conventions:                CF-1.7\n    title:                      Daily MUR SST, Final product\n    summary:                    A merged, multi-sensor L4 Foundation SST anal...\n    references:                 http://podaac.jpl.nasa.gov/Multi-scale_Ultra-...\n    institution:                Jet Propulsion Laboratory\n    history:                    created at nominal 4-day latency; replaced nr...\n    ...                         ...\n    project:                    NASA Making Earth Science Data Records for Us...\n    publisher_name:             GHRSST Project Office\n    publisher_url:              http://www.ghrsst.org\n    publisher_email:            ghrsst-po@nceo.ac.uk\n    processing_level:           L4\n    cdm_data_type:              gridxarray.DatasetDimensions:time: 30lat: 17999lon: 36000Coordinates: (3)lat(lat)float32-89.99 -89.98 ... 89.98 89.99long_name :latitudestandard_name :latitudeaxis :Yunits :degrees_northvalid_min :-90.0valid_max :90.0comment :geolocations inherited from the input data without correctionarray([-89.99, -89.98, -89.97, ...,  89.97,  89.98,  89.99], dtype=float32)lon(lon)float32-180.0 -180.0 ... 180.0 180.0long_name :longitudestandard_name :longitudeaxis :Xunits :degrees_eastvalid_min :-180.0valid_max :180.0comment :geolocations inherited from the input data without correctionarray([-179.99, -179.98, -179.97, ...,  179.98,  179.99,  180.  ],\n      dtype=float32)time(time)datetime64[ns]2021-09-01T09:00:00 ... 2021-09-...long_name :reference time of sst fieldstandard_name :timeaxis :Tcomment :Nominal time of analyzed fieldsarray(['2021-09-01T09:00:00.000000000', '2021-09-02T09:00:00.000000000',\n       '2021-09-03T09:00:00.000000000', '2021-09-04T09:00:00.000000000',\n       '2021-09-05T09:00:00.000000000', '2021-09-06T09:00:00.000000000',\n       '2021-09-07T09:00:00.000000000', '2021-09-08T09:00:00.000000000',\n       '2021-09-09T09:00:00.000000000', '2021-09-10T09:00:00.000000000',\n       '2021-09-11T09:00:00.000000000', '2021-09-12T09:00:00.000000000',\n       '2021-09-13T09:00:00.000000000', '2021-09-14T09:00:00.000000000',\n       '2021-09-15T09:00:00.000000000', '2021-09-16T09:00:00.000000000',\n       '2021-09-17T09:00:00.000000000', '2021-09-18T09:00:00.000000000',\n       '2021-09-19T09:00:00.000000000', '2021-09-20T09:00:00.000000000',\n       '2021-09-21T09:00:00.000000000', '2021-09-22T09:00:00.000000000',\n       '2021-09-23T09:00:00.000000000', '2021-09-24T09:00:00.000000000',\n       '2021-09-25T09:00:00.000000000', '2021-09-26T09:00:00.000000000',\n       '2021-09-27T09:00:00.000000000', '2021-09-28T09:00:00.000000000',\n       '2021-09-29T09:00:00.000000000', '2021-09-30T09:00:00.000000000'],\n      dtype='datetime64[ns]')Data variables: (6)analysed_sst(time, lat, lon)float32dask.array&lt;chunksize=(1, 1023, 2047), meta=np.ndarray&gt;long_name :analysed sea surface temperaturestandard_name :sea_surface_foundation_temperatureunits :kelvinvalid_min :-32767valid_max :32767comment :\\\"Final\\\" version using Multi-Resolution Variational Analysis (MRVA) method for interpolationsource :MODIS_T-JPL, MODIS_A-JPL, AMSR2-REMSS, AVHRRMTA_G-NAVO, AVHRRMTB_G-NAVO, iQUAM-NOAA/NESDIS, Ice_Conc-OSISAF\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n72.42 GiB\n7.99 MiB\n\n\nShape\n(30, 17999, 36000)\n(1, 1023, 2047)\n\n\nCount\n19470 Tasks\n9720 Chunks\n\n\nType\nfloat32\nnumpy.ndarray\n\n\n\n\n\n\n\n\nanalysis_error\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(1, 1023, 2047), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\nestimated error standard deviation of analysed_sst\n\nunits :\n\nkelvin\n\nvalid_min :\n\n0\n\nvalid_max :\n\n32767\n\ncomment :\n\nuncertainty in \\\"analysed_sst\\\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n72.42 GiB\n7.99 MiB\n\n\nShape\n(30, 17999, 36000)\n(1, 1023, 2047)\n\n\nCount\n19470 Tasks\n9720 Chunks\n\n\nType\nfloat32\nnumpy.ndarray\n\n\n\n\n\n\n\n\n\ndt_1km_data\n\n\n(time, lat, lon)\n\n\ntimedelta64[ns]\n\n\ndask.array&lt;chunksize=(1, 1447, 2895), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\ntime to most recent 1km data\n\nvalid_min :\n\n-127\n\nvalid_max :\n\n127\n\nsource :\n\nMODIS and VIIRS pixels ingested by MUR\n\ncomment :\n\nThe grid value is hours between the analysis time and the most recent MODIS or VIIRS 1km L2P datum within 0.01 degrees from the grid point. \\\"Fill value\\\" indicates absence of such 1km data at the grid point.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n144.83 GiB\n31.96 MiB\n\n\nShape\n(30, 17999, 36000)\n(1, 1447, 2895)\n\n\nCount\n10170 Tasks\n5070 Chunks\n\n\nType\ntimedelta64[ns]\nnumpy.ndarray\n\n\n\n\n\n\n\n\n\nmask\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(1, 1447, 2895), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\nsea/land field composite mask\n\nvalid_min :\n\n1\n\nvalid_max :\n\n31\n\nflag_masks :\n\n[1, 2, 4, 8, 16]\n\nflag_meanings :\n\nopen_sea land open_lake open_sea_with_ice_in_the_grid open_lake_with_ice_in_the_grid\n\ncomment :\n\nmask can be used to further filter the data.\n\nsource :\n\nGMT \\\"grdlandmask\\\", ice flag from sea_ice_fraction data\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n72.42 GiB\n15.98 MiB\n\n\nShape\n(30, 17999, 36000)\n(1, 1447, 2895)\n\n\nCount\n10170 Tasks\n5070 Chunks\n\n\nType\nfloat32\nnumpy.ndarray\n\n\n\n\n\n\n\n\n\nsea_ice_fraction\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(1, 1447, 2895), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\nsea ice area fraction\n\nstandard_name :\n\nsea_ice_area_fraction\n\nvalid_min :\n\n0\n\nvalid_max :\n\n100\n\nsource :\n\nEUMETSAT OSI-SAF, copyright EUMETSAT\n\ncomment :\n\nice fraction is a dimensionless quantity between 0 and 1; it has been interpolated by a nearest neighbor approach.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n72.42 GiB\n15.98 MiB\n\n\nShape\n(30, 17999, 36000)\n(1, 1447, 2895)\n\n\nCount\n10170 Tasks\n5070 Chunks\n\n\nType\nfloat32\nnumpy.ndarray\n\n\n\n\n\n\n\n\n\nsst_anomaly\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(1, 1023, 2047), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\nSST anomaly from a seasonal SST climatology based on the MUR data over 2003-2014 period\n\nunits :\n\nkelvin\n\nvalid_min :\n\n-32767\n\nvalid_max :\n\n32767\n\ncomment :\n\nanomaly reference to the day-of-year average between 2003 and 2014\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n72.42 GiB\n7.99 MiB\n\n\nShape\n(30, 17999, 36000)\n(1, 1023, 2047)\n\n\nCount\n19470 Tasks\n9720 Chunks\n\n\nType\nfloat32\nnumpy.ndarray\n\n\n\n\n\n\n\n\nAttributes: (47)Conventions :CF-1.7title :Daily MUR SST, Final productsummary :A merged, multi-sensor L4 Foundation SST analysis product from JPL.references :http://podaac.jpl.nasa.gov/Multi-scale_Ultra-high_Resolution_MUR-SSTinstitution :Jet Propulsion Laboratoryhistory :created at nominal 4-day latency; replaced nrt (1-day latency) version.comment :MUR = \\\"Multi-scale Ultra-high Resolution\\\"license :These data are available free of charge under data policy of JPL PO.DAAC.id :MUR-JPL-L4-GLOB-v04.1naming_authority :org.ghrsstproduct_version :04.1uuid :27665bc0-d5fc-11e1-9b23-0800200c9a66gds_version_id :2.0netcdf_version_id :4.1date_created :20210910T072132Zstart_time :20210901T090000Zstop_time :20210901T090000Ztime_coverage_start :20210831T210000Ztime_coverage_end :20210901T210000Zfile_quality_level :3source :MODIS_T-JPL, MODIS_A-JPL, AMSR2-REMSS, AVHRRMTA_G-NAVO, AVHRRMTB_G-NAVO, iQUAM-NOAA/NESDIS, Ice_Conc-OSISAFplatform :Terra, Aqua, GCOM-W, MetOp-A, MetOp-B, Buoys/Shipssensor :MODIS, AMSR2, AVHRR, in-situMetadata_Conventions :Unidata Observation Dataset v1.0metadata_link :http://podaac.jpl.nasa.gov/ws/metadata/dataset/?format=iso&shortName=MUR-JPL-L4-GLOB-v04.1keywords :Oceans &gt; Ocean Temperature &gt; Sea Surface Temperaturekeywords_vocabulary :NASA Global Change Master Directory (GCMD) Science Keywordsstandard_name_vocabulary :NetCDF Climate and Forecast (CF) Metadata Conventionsouthernmost_latitude :-90.0northernmost_latitude :90.0westernmost_longitude :-180.0easternmost_longitude :180.0spatial_resolution :0.01 degreesgeospatial_lat_units :degrees northgeospatial_lat_resolution :0.009999999776geospatial_lon_units :degrees eastgeospatial_lon_resolution :0.009999999776acknowledgment :Please acknowledge the use of these data with the following statement:  These data were provided by JPL under support by NASA MEaSUREs program.creator_name :JPL MUR SST projectcreator_email :ghrsst@podaac.jpl.nasa.govcreator_url :http://mur.jpl.nasa.govproject :NASA Making Earth Science Data Records for Use in Research Environments (MEaSUREs) Programpublisher_name :GHRSST Project Officepublisher_url :http://www.ghrsst.orgpublisher_email :ghrsst-po@nceo.ac.ukprocessing_level :L4cdm_data_type :grid\n\n\nLook at the Analysed SST variable metadata\n\nall_sst = ds.analysed_sst\nall_sst\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.DataArray 'analysed_sst' (time: 30, lat: 17999, lon: 36000)&gt;\ndask.array&lt;concatenate, shape=(30, 17999, 36000), dtype=float32, chunksize=(1, 1023, 2047), chunktype=numpy.ndarray&gt;\nCoordinates:\n  * lat      (lat) float32 -89.99 -89.98 -89.97 -89.96 ... 89.97 89.98 89.99\n  * lon      (lon) float32 -180.0 -180.0 -180.0 -180.0 ... 180.0 180.0 180.0\n  * time     (time) datetime64[ns] 2021-09-01T09:00:00 ... 2021-09-30T09:00:00\nAttributes:\n    long_name:      analysed sea surface temperature\n    standard_name:  sea_surface_foundation_temperature\n    units:          kelvin\n    valid_min:      -32767\n    valid_max:      32767\n    comment:        \\\"Final\\\" version using Multi-Resolution Variational Anal...\n    source:         MODIS_T-JPL, MODIS_A-JPL, AMSR2-REMSS, AVHRRMTA_G-NAVO, A...xarray.DataArray'analysed_sst'time: 30lat: 17999lon: 36000dask.array&lt;chunksize=(1, 1023, 2047), meta=np.ndarray&gt;\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n72.42 GiB\n7.99 MiB\n\n\nShape\n(30, 17999, 36000)\n(1, 1023, 2047)\n\n\nCount\n19470 Tasks\n9720 Chunks\n\n\nType\nfloat32\nnumpy.ndarray\n\n\n\n\n\n\n\nCoordinates: (3)lat(lat)float32-89.99 -89.98 ... 89.98 89.99long_name :latitudestandard_name :latitudeaxis :Yunits :degrees_northvalid_min :-90.0valid_max :90.0comment :geolocations inherited from the input data without correctionarray([-89.99, -89.98, -89.97, ...,  89.97,  89.98,  89.99], dtype=float32)lon(lon)float32-180.0 -180.0 ... 180.0 180.0long_name :longitudestandard_name :longitudeaxis :Xunits :degrees_eastvalid_min :-180.0valid_max :180.0comment :geolocations inherited from the input data without correctionarray([-179.99, -179.98, -179.97, ...,  179.98,  179.99,  180.  ],\n      dtype=float32)time(time)datetime64[ns]2021-09-01T09:00:00 ... 2021-09-...long_name :reference time of sst fieldstandard_name :timeaxis :Tcomment :Nominal time of analyzed fieldsarray(['2021-09-01T09:00:00.000000000', '2021-09-02T09:00:00.000000000',\n       '2021-09-03T09:00:00.000000000', '2021-09-04T09:00:00.000000000',\n       '2021-09-05T09:00:00.000000000', '2021-09-06T09:00:00.000000000',\n       '2021-09-07T09:00:00.000000000', '2021-09-08T09:00:00.000000000',\n       '2021-09-09T09:00:00.000000000', '2021-09-10T09:00:00.000000000',\n       '2021-09-11T09:00:00.000000000', '2021-09-12T09:00:00.000000000',\n       '2021-09-13T09:00:00.000000000', '2021-09-14T09:00:00.000000000',\n       '2021-09-15T09:00:00.000000000', '2021-09-16T09:00:00.000000000',\n       '2021-09-17T09:00:00.000000000', '2021-09-18T09:00:00.000000000',\n       '2021-09-19T09:00:00.000000000', '2021-09-20T09:00:00.000000000',\n       '2021-09-21T09:00:00.000000000', '2021-09-22T09:00:00.000000000',\n       '2021-09-23T09:00:00.000000000', '2021-09-24T09:00:00.000000000',\n       '2021-09-25T09:00:00.000000000', '2021-09-26T09:00:00.000000000',\n       '2021-09-27T09:00:00.000000000', '2021-09-28T09:00:00.000000000',\n       '2021-09-29T09:00:00.000000000', '2021-09-30T09:00:00.000000000'],\n      dtype='datetime64[ns]')Attributes: (7)long_name :analysed sea surface temperaturestandard_name :sea_surface_foundation_temperatureunits :kelvinvalid_min :-32767valid_max :32767comment :\\\"Final\\\" version using Multi-Resolution Variational Analysis (MRVA) method for interpolationsource :MODIS_T-JPL, MODIS_A-JPL, AMSR2-REMSS, AVHRRMTA_G-NAVO, AVHRRMTB_G-NAVO, iQUAM-NOAA/NESDIS, Ice_Conc-OSISAF\n\n\nCreate a dataset / variable that is only our area of interest and view its metadata\n\nsst = ds.analysed_sst.sel(lat=lats, lon=lons)\nsst\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.DataArray 'analysed_sst' (time: 30, lat: 801, lon: 1701)&gt;\ndask.array&lt;getitem, shape=(30, 801, 1701), dtype=float32, chunksize=(1, 601, 1536), chunktype=numpy.ndarray&gt;\nCoordinates:\n  * lat      (lat) float32 41.0 41.01 41.02 41.03 ... 48.97 48.98 48.99 49.0\n  * lon      (lon) float32 -93.0 -92.99 -92.98 -92.97 ... -76.02 -76.01 -76.0\n  * time     (time) datetime64[ns] 2021-09-01T09:00:00 ... 2021-09-30T09:00:00\nAttributes:\n    long_name:      analysed sea surface temperature\n    standard_name:  sea_surface_foundation_temperature\n    units:          kelvin\n    valid_min:      -32767\n    valid_max:      32767\n    comment:        \\\"Final\\\" version using Multi-Resolution Variational Anal...\n    source:         MODIS_T-JPL, MODIS_A-JPL, AMSR2-REMSS, AVHRRMTA_G-NAVO, A...xarray.DataArray'analysed_sst'time: 30lat: 801lon: 1701dask.array&lt;chunksize=(1, 200, 1536), meta=np.ndarray&gt;\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n155.93 MiB\n3.52 MiB\n\n\nShape\n(30, 801, 1701)\n(1, 601, 1536)\n\n\nCount\n19590 Tasks\n120 Chunks\n\n\nType\nfloat32\nnumpy.ndarray\n\n\n\n\n\n\n\nCoordinates: (3)lat(lat)float3241.0 41.01 41.02 ... 48.99 49.0long_name :latitudestandard_name :latitudeaxis :Yunits :degrees_northvalid_min :-90.0valid_max :90.0comment :geolocations inherited from the input data without correctionarray([41.  , 41.01, 41.02, ..., 48.98, 48.99, 49.  ], dtype=float32)lon(lon)float32-93.0 -92.99 ... -76.01 -76.0long_name :longitudestandard_name :longitudeaxis :Xunits :degrees_eastvalid_min :-180.0valid_max :180.0comment :geolocations inherited from the input data without correctionarray([-93.  , -92.99, -92.98, ..., -76.02, -76.01, -76.  ], dtype=float32)time(time)datetime64[ns]2021-09-01T09:00:00 ... 2021-09-...long_name :reference time of sst fieldstandard_name :timeaxis :Tcomment :Nominal time of analyzed fieldsarray(['2021-09-01T09:00:00.000000000', '2021-09-02T09:00:00.000000000',\n       '2021-09-03T09:00:00.000000000', '2021-09-04T09:00:00.000000000',\n       '2021-09-05T09:00:00.000000000', '2021-09-06T09:00:00.000000000',\n       '2021-09-07T09:00:00.000000000', '2021-09-08T09:00:00.000000000',\n       '2021-09-09T09:00:00.000000000', '2021-09-10T09:00:00.000000000',\n       '2021-09-11T09:00:00.000000000', '2021-09-12T09:00:00.000000000',\n       '2021-09-13T09:00:00.000000000', '2021-09-14T09:00:00.000000000',\n       '2021-09-15T09:00:00.000000000', '2021-09-16T09:00:00.000000000',\n       '2021-09-17T09:00:00.000000000', '2021-09-18T09:00:00.000000000',\n       '2021-09-19T09:00:00.000000000', '2021-09-20T09:00:00.000000000',\n       '2021-09-21T09:00:00.000000000', '2021-09-22T09:00:00.000000000',\n       '2021-09-23T09:00:00.000000000', '2021-09-24T09:00:00.000000000',\n       '2021-09-25T09:00:00.000000000', '2021-09-26T09:00:00.000000000',\n       '2021-09-27T09:00:00.000000000', '2021-09-28T09:00:00.000000000',\n       '2021-09-29T09:00:00.000000000', '2021-09-30T09:00:00.000000000'],\n      dtype='datetime64[ns]')Attributes: (7)long_name :analysed sea surface temperaturestandard_name :sea_surface_foundation_temperatureunits :kelvinvalid_min :-32767valid_max :32767comment :\\\"Final\\\" version using Multi-Resolution Variational Analysis (MRVA) method for interpolationsource :MODIS_T-JPL, MODIS_A-JPL, AMSR2-REMSS, AVHRRMTA_G-NAVO, AVHRRMTB_G-NAVO, iQUAM-NOAA/NESDIS, Ice_Conc-OSISAF\n\n\nXArray reads data lazily, i.e.¬†only when our code actually needs it. Up to this point, we haven‚Äôt read any data values, only metadata. The next line will force XArray to read the portions of the source files containing our area of interest. Behind the scenes, the eosdis-zarr-store library is ensuring data is fetched as efficiently as possible.\nNote: This line isn‚Äôt strictly necessary, since XArray will automatically read the data we need the first time our code tries to use it, but calling this will make sure that we can read the data multiple times later on without re-fetching anything from the source files.\nThis line will take several seconds to complete, but since it is retrieving only about 50 MB of data from 22 GB of source files, several seconds constitutes a significant time, bandwidth, and disk space savings.\n\nsst.load();\n\nNow we can start looking at aggregations across the time dimension. In this case, plot the standard deviation of the temperature at each point to get a visual sense of how much temperatures fluctuate over the course of the month.\n\n# We expect a warning here, from finding the standard deviation of arrays that contain all N/A values.\n# numpy produces N/A for these points, though, which is exactly what we want.\nstdev_sst = sst.std('time')\nstdev_sst.name = 'stdev of analysed_sst [Kelvin]'\nstdev_sst.plot();\n\n/srv/conda/envs/notebook/lib/python3.9/site-packages/numpy/lib/nanfunctions.py:1670: RuntimeWarning: Degrees of freedom &lt;= 0 for slice.\n  var = nanvar(a, axis=axis, dtype=dtype, out=out, ddof=ddof,\n\n\n\n\n\n\nInteractive animation of a month of data\nThis section isn‚Äôt as important to fully understand. It shows us a way to get an interactive animation to see what we have retrieved so far\nDefine an animation function to plot the ith time step. We need to make sure each plot is using the same color scale, set by vmin and vmax so the animation is consistent\n\nsst_min = sst.min()\nsst_max = sst.max()\n\ndef show_time_step(i):\n    plt.clf()\n    res = sst[i].plot.imshow(vmin=sst_min, vmax=sst_max)\n    return (res,)\n\nRender each time slice once and show it as an HTML animation with interactive controls\n\n#anim = animation.FuncAnimation(plt.gcf(), func=show_time_step, frames=len(sst))\n#display(HTML(anim.to_jshtml()))\n#plt.close()\n\n\n\n\nSupplemental: What‚Äôs happening here?\nFor EOSDIS data in the cloud, we have begun producing a metadata sidecar file in a format called DMR++ that extracts all of the information about arrays, variables, and dimensions from data files, as well as the byte offsets in the NetCDF4 file where data can be found. This information is sufficient to let the Zarr library read data from our NetCDF4 files, but it‚Äôs in the wrong format. zarr-eosdis-store knows how to fetch the sidecar file and transform it into something the Zarr library understands. Passing it when reading Zarr using XArray or the Zarr library lets these libraries interact with EOSDIS data exactly as if they were Zarr stores in a way that‚Äôs more optimal for reading data in the cloud. Beyond this, the zarr-eosdis-store library makes some optimizations in the way it reads data to help make up for situations where the NetCDF4 file is not internally arranged well for cloud-based access patterns."
  },
  {
    "objectID": "python-notebooks/04_Appending_Data.html#load-in-data",
    "href": "python-notebooks/04_Appending_Data.html#load-in-data",
    "title": "Adding new data",
    "section": "Load in data",
    "text": "Load in data\n\nog_ds = xr.open_zarr('demonstrated data/final-sample-appending.zarr/')\nnew_ds = xr.open_zarr('demonstrated data/new-data-sample.zarr/')\n\nNote that our new dataset does not have any metadata. As shown in the previous notebooks, metadata is added at the last step, so now we are going to copy all metadata from the original dataset to our new one."
  },
  {
    "objectID": "python-notebooks/04_Appending_Data.html#add-metadata",
    "href": "python-notebooks/04_Appending_Data.html#add-metadata",
    "title": "Adding new data",
    "section": "Add metadata",
    "text": "Add metadata\n\n# copy dataset metadata\nnew_ds.attrs = og_ds.attrs\n\n# copy variables/dimensions metadata\n# make sure that all vars in new_ds exist in og_ds\nfor var in new_ds.variables:\n    new_ds[var].attrs = og_ds[var].attrs\n\n\n# double-check\nnew_ds\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:          (time: 2556, lat: 81, lon: 81)\nCoordinates:\n  * lat              (lat) float32 25.0 24.75 24.5 24.25 ... 5.75 5.5 5.25 5.0\n  * lon              (lon) float32 60.0 60.25 60.5 60.75 ... 79.5 79.75 80.0\n  * time             (time) datetime64[ns] 1993-01-01 1993-01-02 ... 1999-12-31\nData variables: (12/14)\n    CHL              (time, lat, lon) float32 dask.array&lt;chunksize=(100, 81, 81), meta=np.ndarray&gt;\n    CHL_uncertainty  (time, lat, lon) float32 dask.array&lt;chunksize=(100, 81, 81), meta=np.ndarray&gt;\n    adt              (time, lat, lon) float32 dask.array&lt;chunksize=(100, 81, 81), meta=np.ndarray&gt;\n    air_temp         (time, lat, lon) float32 dask.array&lt;chunksize=(100, 81, 81), meta=np.ndarray&gt;\n    direction        (time, lat, lon) float32 dask.array&lt;chunksize=(100, 81, 81), meta=np.ndarray&gt;\n    sla              (time, lat, lon) float32 dask.array&lt;chunksize=(100, 81, 81), meta=np.ndarray&gt;\n    ...               ...\n    u_curr           (time, lat, lon) float32 dask.array&lt;chunksize=(100, 81, 81), meta=np.ndarray&gt;\n    u_wind           (time, lat, lon) float32 dask.array&lt;chunksize=(100, 81, 81), meta=np.ndarray&gt;\n    ug_curr          (time, lat, lon) float32 dask.array&lt;chunksize=(100, 81, 81), meta=np.ndarray&gt;\n    v_curr           (time, lat, lon) float32 dask.array&lt;chunksize=(100, 81, 81), meta=np.ndarray&gt;\n    v_wind           (time, lat, lon) float32 dask.array&lt;chunksize=(100, 81, 81), meta=np.ndarray&gt;\n    vg_curr          (time, lat, lon) float32 dask.array&lt;chunksize=(100, 81, 81), meta=np.ndarray&gt;\nAttributes: (12/17)\n    creator_email:              minhphan@uw.edu\n    creator_name:               Minh Phan\n    creator_type:               person\n    date_created:               2023-11-11\n    geospatial_lat_max:         25.0\n    geospatial_lat_min:         5.0\n    ...                         ...\n    geospatial_lon_units:       degrees_east\n    source:                     OSCAR, ERA5 Reanalysis, Copernicus Climate Ch...\n    summary:                    Daily mean of 0.25 x 0.25 degrees gridded dat...\n    time_coverage_end:          2002-12-31T23:59:59\n    time_coverage_start:        2000-01-01T00:00:00\n    title:                      Sample of Climate Data for Coastal Upwelling ...xarray.DatasetDimensions:time: 2556lat: 81lon: 81Coordinates: (3)lat(lat)float3225.0 24.75 24.5 ... 5.5 5.25 5.0long_name :latitudestandard_name :latitudeunits :degrees_northarray([25.  , 24.75, 24.5 , 24.25, 24.  , 23.75, 23.5 , 23.25, 23.  , 22.75,\n       22.5 , 22.25, 22.  , 21.75, 21.5 , 21.25, 21.  , 20.75, 20.5 , 20.25,\n       20.  , 19.75, 19.5 , 19.25, 19.  , 18.75, 18.5 , 18.25, 18.  , 17.75,\n       17.5 , 17.25, 17.  , 16.75, 16.5 , 16.25, 16.  , 15.75, 15.5 , 15.25,\n       15.  , 14.75, 14.5 , 14.25, 14.  , 13.75, 13.5 , 13.25, 13.  , 12.75,\n       12.5 , 12.25, 12.  , 11.75, 11.5 , 11.25, 11.  , 10.75, 10.5 , 10.25,\n       10.  ,  9.75,  9.5 ,  9.25,  9.  ,  8.75,  8.5 ,  8.25,  8.  ,  7.75,\n        7.5 ,  7.25,  7.  ,  6.75,  6.5 ,  6.25,  6.  ,  5.75,  5.5 ,  5.25,\n        5.  ], dtype=float32)lon(lon)float3260.0 60.25 60.5 ... 79.5 79.75 80.0long_name :longitudestandard_name :longitudeunits :degrees_eastarray([60.  , 60.25, 60.5 , 60.75, 61.  , 61.25, 61.5 , 61.75, 62.  , 62.25,\n       62.5 , 62.75, 63.  , 63.25, 63.5 , 63.75, 64.  , 64.25, 64.5 , 64.75,\n       65.  , 65.25, 65.5 , 65.75, 66.  , 66.25, 66.5 , 66.75, 67.  , 67.25,\n       67.5 , 67.75, 68.  , 68.25, 68.5 , 68.75, 69.  , 69.25, 69.5 , 69.75,\n       70.  , 70.25, 70.5 , 70.75, 71.  , 71.25, 71.5 , 71.75, 72.  , 72.25,\n       72.5 , 72.75, 73.  , 73.25, 73.5 , 73.75, 74.  , 74.25, 74.5 , 74.75,\n       75.  , 75.25, 75.5 , 75.75, 76.  , 76.25, 76.5 , 76.75, 77.  , 77.25,\n       77.5 , 77.75, 78.  , 78.25, 78.5 , 78.75, 79.  , 79.25, 79.5 , 79.75,\n       80.  ], dtype=float32)time(time)datetime64[ns]1993-01-01 ... 1999-12-31_ChunkSizes :1_CoordinateAxisType :Timeaxis :Tcoverage_content_type :coordinatelong_name :reference timestandard_name :timevalid_max :401767.0valid_min :0.0array(['1993-01-01T00:00:00.000000000', '1993-01-02T00:00:00.000000000',\n       '1993-01-03T00:00:00.000000000', ..., '1999-12-29T00:00:00.000000000',\n       '1999-12-30T00:00:00.000000000', '1999-12-31T00:00:00.000000000'],\n      dtype='datetime64[ns]')Data variables: (14)CHL(time, lat, lon)float32dask.array&lt;chunksize=(100, 81, 81), meta=np.ndarray&gt;_ChunkSizes :[1, 256, 256]ancillary_variables :flags CHL_uncertaintycoverage_content_type :modelResultinput_files_reprocessings :Processors versions: MODIS R2022.0NRT/VIIRSN R2022.0NRT/OLCIA 07.02/VIIRSJ1 R2022.0NRT/OLCIB 07.02long_name :Chlorophyll-a concentration - Mean of the binned pixelsstandard_name :mass_concentration_of_chlorophyll_a_in_sea_watertype :surfaceunits :milligram m-3valid_max :1000.0valid_min :0.0\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n63.97 MiB\n2.50 MiB\n\n\nShape\n(2556, 81, 81)\n(100, 81, 81)\n\n\nDask graph\n26 chunks in 2 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\nCHL_uncertainty\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(100, 81, 81), meta=np.ndarray&gt;\n\n\n\n\n_ChunkSizes :\n\n[1, 256, 256]\n\ncoverage_content_type :\n\nqualityInformation\n\nlong_name :\n\nChlorophyll-a concentration - Uncertainty estimation\n\nunits :\n\n%\n\nvalid_max :\n\n32767\n\nvalid_min :\n\n0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n63.97 MiB\n2.50 MiB\n\n\nShape\n(2556, 81, 81)\n(100, 81, 81)\n\n\nDask graph\n26 chunks in 2 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nadt\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(100, 81, 81), meta=np.ndarray&gt;\n\n\n\n\n_ChunkSizes :\n\n[1, 50, 50]\n\ncomment :\n\nThe absolute dynamic topography is the sea surface height above geoid; the adt is obtained as follows: adt=sla+mdt where mdt is the mean dynamic topography; see the product user manual for details\n\ngrid_mapping :\n\ncrs\n\nlong_name :\n\nAbsolute dynamic topography\n\nstandard_name :\n\nsea_surface_height_above_geoid\n\nunits :\n\nm\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n63.97 MiB\n2.50 MiB\n\n\nShape\n(2556, 81, 81)\n(100, 81, 81)\n\n\nDask graph\n26 chunks in 2 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nair_temp\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(100, 81, 81), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\n2 metre temperature\n\nnameCDM :\n\n2_metre_temperature_surface\n\nnameECMWF :\n\n2 metre temperature\n\nproduct_type :\n\nanalysis\n\nshortNameECMWF :\n\n2t\n\nstandard_name :\n\nair_temperature\n\nunits :\n\nK\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n63.97 MiB\n2.50 MiB\n\n\nShape\n(2556, 81, 81)\n(100, 81, 81)\n\n\nDask graph\n26 chunks in 2 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\ndirection\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(100, 81, 81), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\n10 metre wind direction\n\nunits :\n\n¬∞C\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n63.97 MiB\n2.50 MiB\n\n\nShape\n(2556, 81, 81)\n(100, 81, 81)\n\n\nDask graph\n26 chunks in 2 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nsla\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(100, 81, 81), meta=np.ndarray&gt;\n\n\n\n\n_ChunkSizes :\n\n[1, 50, 50]\n\nancillary_variables :\n\nerr_sla\n\ncomment :\n\nThe sea level anomaly is the sea surface height above mean sea surface; it is referenced to the [1993, 2012] period; see the product user manual for details\n\ngrid_mapping :\n\ncrs\n\nlong_name :\n\nSea level anomaly\n\nstandard_name :\n\nsea_surface_height_above_sea_level\n\nunits :\n\nm\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n63.97 MiB\n2.50 MiB\n\n\nShape\n(2556, 81, 81)\n(100, 81, 81)\n\n\nDask graph\n26 chunks in 2 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nspeed\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(100, 81, 81), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\n10 metre absolute speed\n\nunits :\n\nm s**-1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n63.97 MiB\n2.50 MiB\n\n\nShape\n(2556, 81, 81)\n(100, 81, 81)\n\n\nDask graph\n26 chunks in 2 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nsst\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(100, 81, 81), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\nSea surface temperature\n\nnameCDM :\n\nSea_surface_temperature_surface\n\nnameECMWF :\n\nSea surface temperature\n\nproduct_type :\n\nanalysis\n\nshortNameECMWF :\n\nsst\n\nstandard_name :\n\nsea_surface_temperature\n\nunits :\n\nK\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n63.97 MiB\n2.50 MiB\n\n\nShape\n(2556, 81, 81)\n(100, 81, 81)\n\n\nDask graph\n26 chunks in 2 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nu_curr\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(100, 81, 81), meta=np.ndarray&gt;\n\n\n\n\ncomment :\n\nVelocities are an average over the top 30m of the mixed layer\n\ncoverage_content_type :\n\nmodelResult\n\ndepth :\n\n15m\n\nlong_name :\n\nzonal total surface current\n\nsource :\n\nSSH source: CMEMS SSALTO/DUACS SEALEVEL_GLO_PHY_L4_MY_008_047 DOI: 10.48670/moi-00148 ; WIND source: ECMWF ERA5 10m wind DOI: 10.24381/cds.adbb2d47 ; SST source: CMC 0.2 deg SST V2.0 DOI: 10.5067/GHCMC-4FM02\n\nstandard_name :\n\neastward_sea_water_velocity\n\nunits :\n\nm s-1\n\nvalid_max :\n\n3.0\n\nvalid_min :\n\n-3.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n63.97 MiB\n2.50 MiB\n\n\nShape\n(2556, 81, 81)\n(100, 81, 81)\n\n\nDask graph\n26 chunks in 2 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nu_wind\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(100, 81, 81), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\n10 metre U wind component\n\nnameCDM :\n\n10_metre_U_wind_component_surface\n\nnameECMWF :\n\n10 metre U wind component\n\nproduct_type :\n\nanalysis\n\nshortNameECMWF :\n\n10u\n\nstandard_name :\n\neastward_wind\n\nunits :\n\nm s**-1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n63.97 MiB\n2.50 MiB\n\n\nShape\n(2556, 81, 81)\n(100, 81, 81)\n\n\nDask graph\n26 chunks in 2 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nug_curr\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(100, 81, 81), meta=np.ndarray&gt;\n\n\n\n\ncomment :\n\nGeostrophic velocities calculated from absolute dynamic topography\n\ndepth :\n\n15m\n\nlong_name :\n\nzonal geostrophic surface current\n\nsource :\n\nSSH source: CMEMS SSALTO/DUACS SEALEVEL_GLO_PHY_L4_MY_008_047 DOI: 10.48670/moi-00148\n\nstandard_name :\n\ngeostrophic_eastward_sea_water_velocity\n\nunits :\n\nm s-1\n\nvalid_max :\n\n3.0\n\nvalid_min :\n\n-3.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n63.97 MiB\n2.50 MiB\n\n\nShape\n(2556, 81, 81)\n(100, 81, 81)\n\n\nDask graph\n26 chunks in 2 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nv_curr\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(100, 81, 81), meta=np.ndarray&gt;\n\n\n\n\ncomment :\n\nVelocities are an average over the top 30m of the mixed layer\n\ncoverage_content_type :\n\nmodelResult\n\ndepth :\n\n15m\n\nlong_name :\n\nmeridional total surface current\n\nsource :\n\nSSH source: CMEMS SSALTO/DUACS SEALEVEL_GLO_PHY_L4_MY_008_047 DOI: 10.48670/moi-00148 ; WIND source: ECMWF ERA5 10m wind DOI: 10.24381/cds.adbb2d47 ; SST source: CMC 0.2 deg SST V2.0 DOI: 10.5067/GHCMC-4FM02\n\nstandard_name :\n\nnorthward_sea_water_velocity\n\nunits :\n\nm s-1\n\nvalid_max :\n\n3.0\n\nvalid_min :\n\n-3.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n63.97 MiB\n2.50 MiB\n\n\nShape\n(2556, 81, 81)\n(100, 81, 81)\n\n\nDask graph\n26 chunks in 2 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nv_wind\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(100, 81, 81), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\n10 metre V wind component\n\nnameCDM :\n\n10_metre_V_wind_component_surface\n\nnameECMWF :\n\n10 metre V wind component\n\nproduct_type :\n\nanalysis\n\nshortNameECMWF :\n\n10v\n\nstandard_name :\n\nnorthward_wind\n\nunits :\n\nm s**-1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n63.97 MiB\n2.50 MiB\n\n\nShape\n(2556, 81, 81)\n(100, 81, 81)\n\n\nDask graph\n26 chunks in 2 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nvg_curr\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(100, 81, 81), meta=np.ndarray&gt;\n\n\n\n\ncomment :\n\nGeostrophic velocities calculated from absolute dynamic topography\n\ndepth :\n\n15m\n\nlong_name :\n\nmeridional geostrophic surface current\n\nsource :\n\nSSH source: CMEMS SSALTO/DUACS SEALEVEL_GLO_PHY_L4_MY_008_047 DOI: 10.48670/moi-00148\n\nstandard_name :\n\ngeostrophic_northward_sea_water_velocity\n\nunits :\n\nm s-1\n\nvalid_max :\n\n3.0\n\nvalid_min :\n\n-3.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n63.97 MiB\n2.50 MiB\n\n\nShape\n(2556, 81, 81)\n(100, 81, 81)\n\n\nDask graph\n26 chunks in 2 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\nAttributes: (17)creator_email :minhphan@uw.educreator_name :Minh Phancreator_type :persondate_created :2023-11-11geospatial_lat_max :25.0geospatial_lat_min :5.0geospatial_lat_resolution :0.25geospatial_lat_units :degrees_northgeospatial_lon_max :80.0geospatial_lon_min :60.0geospatial_lon_resolution :0.25geospatial_lon_units :degrees_eastsource :OSCAR, ERA5 Reanalysis, Copernicus Climate Change Service (C3S), Copernicus Marine Environment Monitoring Service (CMEMS)summary :Daily mean of 0.25 x 0.25 degrees gridded data from multiple climate variables that may influence the patterns of coastal upwelling in the focused areatime_coverage_end :2002-12-31T23:59:59time_coverage_start :2000-01-01T00:00:00title :Sample of Climate Data for Coastal Upwelling Machine Learning Project in Indian Ocean"
  },
  {
    "objectID": "python-notebooks/04_Appending_Data.html#appending-data",
    "href": "python-notebooks/04_Appending_Data.html#appending-data",
    "title": "Adding new data",
    "section": "Appending data",
    "text": "Appending data\n\nnew_ds.to_zarr('demonstrated data/final-sample-appending.zarr/', append_dim='time', mode='a')\n\n&lt;xarray.backends.zarr.ZarrStore at 0x7f1455c51dd0&gt;"
  },
  {
    "objectID": "python-notebooks/04_Appending_Data.html#final-result",
    "href": "python-notebooks/04_Appending_Data.html#final-result",
    "title": "Adding new data",
    "section": "Final result",
    "text": "Final result\n\nxr.open_zarr('demonstrated data/final-sample-appending.zarr/')\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:          (time: 3287, lat: 81, lon: 81)\nCoordinates:\n  * lat              (lat) float32 25.0 24.75 24.5 24.25 ... 5.75 5.5 5.25 5.0\n  * lon              (lon) float32 60.0 60.25 60.5 60.75 ... 79.5 79.75 80.0\n  * time             (time) datetime64[ns] 2000-01-01 2000-01-02 ... 1999-12-31\nData variables: (12/14)\n    CHL              (time, lat, lon) float32 dask.array&lt;chunksize=(100, 81, 81), meta=np.ndarray&gt;\n    CHL_uncertainty  (time, lat, lon) float32 dask.array&lt;chunksize=(100, 81, 81), meta=np.ndarray&gt;\n    adt              (time, lat, lon) float32 dask.array&lt;chunksize=(100, 81, 81), meta=np.ndarray&gt;\n    air_temp         (time, lat, lon) float32 dask.array&lt;chunksize=(100, 81, 81), meta=np.ndarray&gt;\n    direction        (time, lat, lon) float32 dask.array&lt;chunksize=(100, 81, 81), meta=np.ndarray&gt;\n    sla              (time, lat, lon) float32 dask.array&lt;chunksize=(100, 81, 81), meta=np.ndarray&gt;\n    ...               ...\n    u_curr           (time, lat, lon) float32 dask.array&lt;chunksize=(100, 81, 81), meta=np.ndarray&gt;\n    u_wind           (time, lat, lon) float32 dask.array&lt;chunksize=(100, 81, 81), meta=np.ndarray&gt;\n    ug_curr          (time, lat, lon) float32 dask.array&lt;chunksize=(100, 81, 81), meta=np.ndarray&gt;\n    v_curr           (time, lat, lon) float32 dask.array&lt;chunksize=(100, 81, 81), meta=np.ndarray&gt;\n    v_wind           (time, lat, lon) float32 dask.array&lt;chunksize=(100, 81, 81), meta=np.ndarray&gt;\n    vg_curr          (time, lat, lon) float32 dask.array&lt;chunksize=(100, 81, 81), meta=np.ndarray&gt;\nAttributes: (12/17)\n    creator_email:              minhphan@uw.edu\n    creator_name:               Minh Phan\n    creator_type:               person\n    date_created:               2023-11-11\n    geospatial_lat_max:         25.0\n    geospatial_lat_min:         5.0\n    ...                         ...\n    geospatial_lon_units:       degrees_east\n    source:                     OSCAR, ERA5 Reanalysis, Copernicus Climate Ch...\n    summary:                    Daily mean of 0.25 x 0.25 degrees gridded dat...\n    time_coverage_end:          2002-12-31T23:59:59\n    time_coverage_start:        2000-01-01T00:00:00\n    title:                      Sample of Climate Data for Coastal Upwelling ...xarray.DatasetDimensions:time: 3287lat: 81lon: 81Coordinates: (3)lat(lat)float3225.0 24.75 24.5 ... 5.5 5.25 5.0long_name :latitudestandard_name :latitudeunits :degrees_northarray([25.  , 24.75, 24.5 , 24.25, 24.  , 23.75, 23.5 , 23.25, 23.  , 22.75,\n       22.5 , 22.25, 22.  , 21.75, 21.5 , 21.25, 21.  , 20.75, 20.5 , 20.25,\n       20.  , 19.75, 19.5 , 19.25, 19.  , 18.75, 18.5 , 18.25, 18.  , 17.75,\n       17.5 , 17.25, 17.  , 16.75, 16.5 , 16.25, 16.  , 15.75, 15.5 , 15.25,\n       15.  , 14.75, 14.5 , 14.25, 14.  , 13.75, 13.5 , 13.25, 13.  , 12.75,\n       12.5 , 12.25, 12.  , 11.75, 11.5 , 11.25, 11.  , 10.75, 10.5 , 10.25,\n       10.  ,  9.75,  9.5 ,  9.25,  9.  ,  8.75,  8.5 ,  8.25,  8.  ,  7.75,\n        7.5 ,  7.25,  7.  ,  6.75,  6.5 ,  6.25,  6.  ,  5.75,  5.5 ,  5.25,\n        5.  ], dtype=float32)lon(lon)float3260.0 60.25 60.5 ... 79.5 79.75 80.0long_name :longitudestandard_name :longitudeunits :degrees_eastarray([60.  , 60.25, 60.5 , 60.75, 61.  , 61.25, 61.5 , 61.75, 62.  , 62.25,\n       62.5 , 62.75, 63.  , 63.25, 63.5 , 63.75, 64.  , 64.25, 64.5 , 64.75,\n       65.  , 65.25, 65.5 , 65.75, 66.  , 66.25, 66.5 , 66.75, 67.  , 67.25,\n       67.5 , 67.75, 68.  , 68.25, 68.5 , 68.75, 69.  , 69.25, 69.5 , 69.75,\n       70.  , 70.25, 70.5 , 70.75, 71.  , 71.25, 71.5 , 71.75, 72.  , 72.25,\n       72.5 , 72.75, 73.  , 73.25, 73.5 , 73.75, 74.  , 74.25, 74.5 , 74.75,\n       75.  , 75.25, 75.5 , 75.75, 76.  , 76.25, 76.5 , 76.75, 77.  , 77.25,\n       77.5 , 77.75, 78.  , 78.25, 78.5 , 78.75, 79.  , 79.25, 79.5 , 79.75,\n       80.  ], dtype=float32)time(time)datetime64[ns]2000-01-01 ... 1999-12-31_ChunkSizes :1_CoordinateAxisType :Timeaxis :Tcoverage_content_type :coordinatelong_name :reference timestandard_name :timevalid_max :401767.0valid_min :0.0array(['2000-01-01T00:00:00.000000000', '2000-01-02T00:00:00.000000000',\n       '2000-01-03T00:00:00.000000000', ..., '1999-12-29T00:00:00.000000000',\n       '1999-12-30T00:00:00.000000000', '1999-12-31T00:00:00.000000000'],\n      dtype='datetime64[ns]')Data variables: (14)CHL(time, lat, lon)float32dask.array&lt;chunksize=(100, 81, 81), meta=np.ndarray&gt;_ChunkSizes :[1, 256, 256]ancillary_variables :flags CHL_uncertaintycoverage_content_type :modelResultinput_files_reprocessings :Processors versions: MODIS R2022.0NRT/VIIRSN R2022.0NRT/OLCIA 07.02/VIIRSJ1 R2022.0NRT/OLCIB 07.02long_name :Chlorophyll-a concentration - Mean of the binned pixelsstandard_name :mass_concentration_of_chlorophyll_a_in_sea_watertype :surfaceunits :milligram m-3valid_max :1000.0valid_min :0.0\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n82.27 MiB\n2.50 MiB\n\n\nShape\n(3287, 81, 81)\n(100, 81, 81)\n\n\nDask graph\n33 chunks in 2 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\nCHL_uncertainty\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(100, 81, 81), meta=np.ndarray&gt;\n\n\n\n\n_ChunkSizes :\n\n[1, 256, 256]\n\ncoverage_content_type :\n\nqualityInformation\n\nlong_name :\n\nChlorophyll-a concentration - Uncertainty estimation\n\nunits :\n\n%\n\nvalid_max :\n\n32767\n\nvalid_min :\n\n0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n82.27 MiB\n2.50 MiB\n\n\nShape\n(3287, 81, 81)\n(100, 81, 81)\n\n\nDask graph\n33 chunks in 2 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nadt\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(100, 81, 81), meta=np.ndarray&gt;\n\n\n\n\n_ChunkSizes :\n\n[1, 50, 50]\n\ncomment :\n\nThe absolute dynamic topography is the sea surface height above geoid; the adt is obtained as follows: adt=sla+mdt where mdt is the mean dynamic topography; see the product user manual for details\n\ngrid_mapping :\n\ncrs\n\nlong_name :\n\nAbsolute dynamic topography\n\nstandard_name :\n\nsea_surface_height_above_geoid\n\nunits :\n\nm\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n82.27 MiB\n2.50 MiB\n\n\nShape\n(3287, 81, 81)\n(100, 81, 81)\n\n\nDask graph\n33 chunks in 2 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nair_temp\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(100, 81, 81), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\n2 metre temperature\n\nnameCDM :\n\n2_metre_temperature_surface\n\nnameECMWF :\n\n2 metre temperature\n\nproduct_type :\n\nanalysis\n\nshortNameECMWF :\n\n2t\n\nstandard_name :\n\nair_temperature\n\nunits :\n\nK\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n82.27 MiB\n2.50 MiB\n\n\nShape\n(3287, 81, 81)\n(100, 81, 81)\n\n\nDask graph\n33 chunks in 2 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\ndirection\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(100, 81, 81), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\n10 metre wind direction\n\nunits :\n\n¬∞C\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n82.27 MiB\n2.50 MiB\n\n\nShape\n(3287, 81, 81)\n(100, 81, 81)\n\n\nDask graph\n33 chunks in 2 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nsla\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(100, 81, 81), meta=np.ndarray&gt;\n\n\n\n\n_ChunkSizes :\n\n[1, 50, 50]\n\nancillary_variables :\n\nerr_sla\n\ncomment :\n\nThe sea level anomaly is the sea surface height above mean sea surface; it is referenced to the [1993, 2012] period; see the product user manual for details\n\ngrid_mapping :\n\ncrs\n\nlong_name :\n\nSea level anomaly\n\nstandard_name :\n\nsea_surface_height_above_sea_level\n\nunits :\n\nm\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n82.27 MiB\n2.50 MiB\n\n\nShape\n(3287, 81, 81)\n(100, 81, 81)\n\n\nDask graph\n33 chunks in 2 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nspeed\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(100, 81, 81), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\n10 metre absolute speed\n\nunits :\n\nm s**-1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n82.27 MiB\n2.50 MiB\n\n\nShape\n(3287, 81, 81)\n(100, 81, 81)\n\n\nDask graph\n33 chunks in 2 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nsst\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(100, 81, 81), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\nSea surface temperature\n\nnameCDM :\n\nSea_surface_temperature_surface\n\nnameECMWF :\n\nSea surface temperature\n\nproduct_type :\n\nanalysis\n\nshortNameECMWF :\n\nsst\n\nstandard_name :\n\nsea_surface_temperature\n\nunits :\n\nK\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n82.27 MiB\n2.50 MiB\n\n\nShape\n(3287, 81, 81)\n(100, 81, 81)\n\n\nDask graph\n33 chunks in 2 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nu_curr\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(100, 81, 81), meta=np.ndarray&gt;\n\n\n\n\ncomment :\n\nVelocities are an average over the top 30m of the mixed layer\n\ncoverage_content_type :\n\nmodelResult\n\ndepth :\n\n15m\n\nlong_name :\n\nzonal total surface current\n\nsource :\n\nSSH source: CMEMS SSALTO/DUACS SEALEVEL_GLO_PHY_L4_MY_008_047 DOI: 10.48670/moi-00148 ; WIND source: ECMWF ERA5 10m wind DOI: 10.24381/cds.adbb2d47 ; SST source: CMC 0.2 deg SST V2.0 DOI: 10.5067/GHCMC-4FM02\n\nstandard_name :\n\neastward_sea_water_velocity\n\nunits :\n\nm s-1\n\nvalid_max :\n\n3.0\n\nvalid_min :\n\n-3.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n82.27 MiB\n2.50 MiB\n\n\nShape\n(3287, 81, 81)\n(100, 81, 81)\n\n\nDask graph\n33 chunks in 2 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nu_wind\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(100, 81, 81), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\n10 metre U wind component\n\nnameCDM :\n\n10_metre_U_wind_component_surface\n\nnameECMWF :\n\n10 metre U wind component\n\nproduct_type :\n\nanalysis\n\nshortNameECMWF :\n\n10u\n\nstandard_name :\n\neastward_wind\n\nunits :\n\nm s**-1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n82.27 MiB\n2.50 MiB\n\n\nShape\n(3287, 81, 81)\n(100, 81, 81)\n\n\nDask graph\n33 chunks in 2 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nug_curr\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(100, 81, 81), meta=np.ndarray&gt;\n\n\n\n\ncomment :\n\nGeostrophic velocities calculated from absolute dynamic topography\n\ndepth :\n\n15m\n\nlong_name :\n\nzonal geostrophic surface current\n\nsource :\n\nSSH source: CMEMS SSALTO/DUACS SEALEVEL_GLO_PHY_L4_MY_008_047 DOI: 10.48670/moi-00148\n\nstandard_name :\n\ngeostrophic_eastward_sea_water_velocity\n\nunits :\n\nm s-1\n\nvalid_max :\n\n3.0\n\nvalid_min :\n\n-3.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n82.27 MiB\n2.50 MiB\n\n\nShape\n(3287, 81, 81)\n(100, 81, 81)\n\n\nDask graph\n33 chunks in 2 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nv_curr\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(100, 81, 81), meta=np.ndarray&gt;\n\n\n\n\ncomment :\n\nVelocities are an average over the top 30m of the mixed layer\n\ncoverage_content_type :\n\nmodelResult\n\ndepth :\n\n15m\n\nlong_name :\n\nmeridional total surface current\n\nsource :\n\nSSH source: CMEMS SSALTO/DUACS SEALEVEL_GLO_PHY_L4_MY_008_047 DOI: 10.48670/moi-00148 ; WIND source: ECMWF ERA5 10m wind DOI: 10.24381/cds.adbb2d47 ; SST source: CMC 0.2 deg SST V2.0 DOI: 10.5067/GHCMC-4FM02\n\nstandard_name :\n\nnorthward_sea_water_velocity\n\nunits :\n\nm s-1\n\nvalid_max :\n\n3.0\n\nvalid_min :\n\n-3.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n82.27 MiB\n2.50 MiB\n\n\nShape\n(3287, 81, 81)\n(100, 81, 81)\n\n\nDask graph\n33 chunks in 2 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nv_wind\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(100, 81, 81), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\n10 metre V wind component\n\nnameCDM :\n\n10_metre_V_wind_component_surface\n\nnameECMWF :\n\n10 metre V wind component\n\nproduct_type :\n\nanalysis\n\nshortNameECMWF :\n\n10v\n\nstandard_name :\n\nnorthward_wind\n\nunits :\n\nm s**-1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n82.27 MiB\n2.50 MiB\n\n\nShape\n(3287, 81, 81)\n(100, 81, 81)\n\n\nDask graph\n33 chunks in 2 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nvg_curr\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(100, 81, 81), meta=np.ndarray&gt;\n\n\n\n\ncomment :\n\nGeostrophic velocities calculated from absolute dynamic topography\n\ndepth :\n\n15m\n\nlong_name :\n\nmeridional geostrophic surface current\n\nsource :\n\nSSH source: CMEMS SSALTO/DUACS SEALEVEL_GLO_PHY_L4_MY_008_047 DOI: 10.48670/moi-00148\n\nstandard_name :\n\ngeostrophic_northward_sea_water_velocity\n\nunits :\n\nm s-1\n\nvalid_max :\n\n3.0\n\nvalid_min :\n\n-3.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n82.27 MiB\n2.50 MiB\n\n\nShape\n(3287, 81, 81)\n(100, 81, 81)\n\n\nDask graph\n33 chunks in 2 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\nAttributes: (17)creator_email :minhphan@uw.educreator_name :Minh Phancreator_type :persondate_created :2023-11-11geospatial_lat_max :25.0geospatial_lat_min :5.0geospatial_lat_resolution :0.25geospatial_lat_units :degrees_northgeospatial_lon_max :80.0geospatial_lon_min :60.0geospatial_lon_resolution :0.25geospatial_lon_units :degrees_eastsource :OSCAR, ERA5 Reanalysis, Copernicus Climate Change Service (C3S), Copernicus Marine Environment Monitoring Service (CMEMS)summary :Daily mean of 0.25 x 0.25 degrees gridded data from multiple climate variables that may influence the patterns of coastal upwelling in the focused areatime_coverage_end :2002-12-31T23:59:59time_coverage_start :2000-01-01T00:00:00title :Sample of Climate Data for Coastal Upwelling Machine Learning Project in Indian Ocean"
  },
  {
    "objectID": "python-notebooks/04_Combining_Data.html#loading-data",
    "href": "python-notebooks/04_Combining_Data.html#loading-data",
    "title": "Combine, clean, and export the data",
    "section": "Loading data",
    "text": "Loading data\nBegin by loading all the data into disk\n\nimport xarray as xr\nimport pandas as pd\nimport numpy as np\nfrom datetime import datetime, timedelta\n\n\nera5 = xr.combine_by_coords([xr.open_mfdataset('demonstrated data/era5/eastward_wind_at_10_metres/*.nc'),\n                             xr.open_mfdataset('demonstrated data/era5/northward_wind_at_10_metres/*.nc'),\n                            xr.open_mfdataset('demonstrated data/era5/sea_surface_temperature/*.nc'),\n                            xr.open_mfdataset('demonstrated data/era5/air_temperature_at_2_metres/*.nc')])\nmotu = xr.combine_by_coords([xr.open_mfdataset('demonstrated data/motu/*/*.nc')])\n\n\ncurrents = xr.open_mfdataset('demonstrated data/earth_data/OSCAR_L4_OC_FINAL_V2.0/*.nc')\n\nISSUE WITH EARTHDATA DATASET: As mentioned in the first notebook, we found out that the xarray Dataset object created from the currents dataset is not indexed properly, and wehad two approaches to deal with this issue when combining this object to the rest of the datasets [screenshot error when attempt slicing?]:\n\nAdd all variables of this dataset to the final combined dataset and make sure that the order and shape remain consistent\nReplace coordinate systems from other already cleaned datasets"
  },
  {
    "objectID": "python-notebooks/04_Combining_Data.html#process-era5-data-and-calculate-speeddirection",
    "href": "python-notebooks/04_Combining_Data.html#process-era5-data-and-calculate-speeddirection",
    "title": "Combine, clean, and export the data",
    "section": "Process ERA5 data and calculate speed/direction",
    "text": "Process ERA5 data and calculate speed/direction\n\n# adding calculated variables (direction and speed)\nera5 = era5.assign(speed = np.sqrt(era5.eastward_wind_at_10_metres**2 + era5.northward_wind_at_10_metres**2))\nera5 = era5.assign(direction = np.rad2deg(np.arctan2(era5.northward_wind_at_10_metres, era5.eastward_wind_at_10_metres)))\n\n# coarsen\nera5 = era5.coarsen(time0=24).mean(keep_attrs=True).compute()\n\n\nera5 = era5.rename({'time0': 'time', \n                    'eastward_wind_at_10_metres': 'u_wind', \n                    'northward_wind_at_10_metres': 'v_wind',\n                   'air_temperature_at_2_metres': 'air_temp',\n                   'sea_surface_temperature': 'sst'})\n\n\n# fix time coordinate by resetting to 12AM\nera5 = era5.assign_coords(time=np.arange('2000-01-01', '2002-01-01', timedelta(days=1), dtype='datetime64[ns]'))\n\n\nera5\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:    (time: 731, lat: 81, lon: 81)\nCoordinates:\n  * time       (time) datetime64[ns] 2000-01-01 2000-01-02 ... 2001-12-31\n  * lon        (lon) float32 60.0 60.25 60.5 60.75 ... 79.25 79.5 79.75 80.0\n  * lat        (lat) float32 25.0 24.75 24.5 24.25 24.0 ... 5.75 5.5 5.25 5.0\nData variables:\n    air_temp   (time, lat, lon) float32 295.9 295.9 295.8 ... 299.7 299.7 299.7\n    u_wind     (time, lat, lon) float32 -4.113 -4.231 -4.331 ... nan nan nan\n    v_wind     (time, lat, lon) float32 0.95 0.8631 0.7149 ... nan nan nan\n    sst        (time, lat, lon) float32 297.7 297.8 297.8 297.6 ... nan nan nan\n    speed      (time, lat, lon) float32 4.488 4.625 4.767 4.724 ... nan nan nan\n    direction  (time, lat, lon) float32 33.59 19.3 5.515 8.595 ... nan nan nan\nAttributes:\n    source:       Reanalysis\n    institution:  ECMWF\n    tilte:        ERA5 forecastsxarray.DatasetDimensions:time: 731lat: 81lon: 81Coordinates: (3)time(time)datetime64[ns]2000-01-01 ... 2001-12-31array(['2000-01-01T00:00:00.000000000', '2000-01-02T00:00:00.000000000',\n       '2000-01-03T00:00:00.000000000', ..., '2001-12-29T00:00:00.000000000',\n       '2001-12-30T00:00:00.000000000', '2001-12-31T00:00:00.000000000'],\n      dtype='datetime64[ns]')lon(lon)float3260.0 60.25 60.5 ... 79.5 79.75 80.0standard_name :longitudelong_name :longitudeunits :degrees_eastarray([60.  , 60.25, 60.5 , 60.75, 61.  , 61.25, 61.5 , 61.75, 62.  , 62.25,\n       62.5 , 62.75, 63.  , 63.25, 63.5 , 63.75, 64.  , 64.25, 64.5 , 64.75,\n       65.  , 65.25, 65.5 , 65.75, 66.  , 66.25, 66.5 , 66.75, 67.  , 67.25,\n       67.5 , 67.75, 68.  , 68.25, 68.5 , 68.75, 69.  , 69.25, 69.5 , 69.75,\n       70.  , 70.25, 70.5 , 70.75, 71.  , 71.25, 71.5 , 71.75, 72.  , 72.25,\n       72.5 , 72.75, 73.  , 73.25, 73.5 , 73.75, 74.  , 74.25, 74.5 , 74.75,\n       75.  , 75.25, 75.5 , 75.75, 76.  , 76.25, 76.5 , 76.75, 77.  , 77.25,\n       77.5 , 77.75, 78.  , 78.25, 78.5 , 78.75, 79.  , 79.25, 79.5 , 79.75,\n       80.  ], dtype=float32)lat(lat)float3225.0 24.75 24.5 ... 5.5 5.25 5.0standard_name :latitudelong_name :latitudeunits :degrees_northarray([25.  , 24.75, 24.5 , 24.25, 24.  , 23.75, 23.5 , 23.25, 23.  , 22.75,\n       22.5 , 22.25, 22.  , 21.75, 21.5 , 21.25, 21.  , 20.75, 20.5 , 20.25,\n       20.  , 19.75, 19.5 , 19.25, 19.  , 18.75, 18.5 , 18.25, 18.  , 17.75,\n       17.5 , 17.25, 17.  , 16.75, 16.5 , 16.25, 16.  , 15.75, 15.5 , 15.25,\n       15.  , 14.75, 14.5 , 14.25, 14.  , 13.75, 13.5 , 13.25, 13.  , 12.75,\n       12.5 , 12.25, 12.  , 11.75, 11.5 , 11.25, 11.  , 10.75, 10.5 , 10.25,\n       10.  ,  9.75,  9.5 ,  9.25,  9.  ,  8.75,  8.5 ,  8.25,  8.  ,  7.75,\n        7.5 ,  7.25,  7.  ,  6.75,  6.5 ,  6.25,  6.  ,  5.75,  5.5 ,  5.25,\n        5.  ], dtype=float32)Data variables: (6)air_temp(time, lat, lon)float32295.9 295.9 295.8 ... 299.7 299.7standard_name :air_temperatureunits :Klong_name :2 metre temperaturenameECMWF :2 metre temperatureshortNameECMWF :2tnameCDM :2_metre_temperature_surfaceproduct_type :analysisarray([[[295.8689 , 295.8622 , 295.7942 , ..., 286.89417, 287.03308,\n         287.05496],\n        [295.9501 , 295.91788, 295.87173, ..., 287.04333, 287.10535,\n         286.66663],\n        [295.96982, 296.03506, 296.04623, ..., 287.0115 , 287.0807 ,\n         286.61487],\n        ...,\n        [299.62637, 299.65186, 299.68393, ..., 299.75073, 299.70132,\n         299.64038],\n        [299.60562, 299.64868, 299.71323, ..., 299.72812, 299.71542,\n         299.7495 ],\n        [299.5206 , 299.5851 , 299.6473 , ..., 299.80005, 299.79614,\n         299.86133]],\n\n       [[295.37057, 295.33475, 295.27396, ..., 286.4972 , 286.82947,\n         286.58655],\n        [295.65018, 295.61234, 295.56198, ..., 286.69235, 287.095  ,\n         286.54172],\n        [295.8115 , 295.87805, 295.88693, ..., 286.57736, 287.01755,\n         286.429  ],\n...\n        [299.1224 , 299.1797 , 299.1875 , ..., 299.8776 , 299.8854 ,\n         299.67188],\n        [299.14322, 299.1875 , 299.15103, ..., 299.7526 , 299.67188,\n         299.54166],\n        [299.14844, 299.16406, 299.14062, ..., 299.63022, 299.5547 ,\n         299.45572]],\n\n       [[297.10156, 297.14584, 297.21094, ..., 287.54166, 287.21875,\n         286.9896 ],\n        [297.0625 , 297.15625, 297.22916, ..., 287.875  , 287.89844,\n         287.85678],\n        [297.     , 297.14844, 297.22916, ..., 287.65366, 287.85938,\n         287.84634],\n        ...,\n        [299.04166, 299.08853, 299.14584, ..., 299.85156, 299.77866,\n         299.6875 ],\n        [299.04688, 299.09897, 299.16147, ..., 299.76303, 299.72916,\n         299.73178],\n        [299.06772, 299.1276 , 299.1901 , ..., 299.73697, 299.71353,\n         299.71094]]], dtype=float32)u_wind(time, lat, lon)float32-4.113 -4.231 -4.331 ... nan nanstandard_name :eastward_windunits :m s**-1long_name :10 metre U wind componentnameECMWF :10 metre U wind componentshortNameECMWF :10unameCDM :10_metre_U_wind_component_surfaceproduct_type :analysisarray([[[-4.112824  , -4.2308254 , -4.3310046 , ..., -1.6301174 ,\n         -1.5427965 , -1.374258  ],\n        [-4.125194  , -4.2819324 , -4.3911037 , ..., -1.525259  ,\n         -1.4295152 , -1.3317776 ],\n        [-4.005972  , -4.153148  , -4.275625  , ..., -1.3727932 ,\n         -1.3187975 , -1.257925  ],\n        ...,\n        [-4.437775  , -4.3447576 , -4.1923733 , ...,  0.262949  ,\n          0.08452288, -1.0053616 ],\n        [-4.3429675 , -4.2527575 , -4.0964665 , ..., -0.5725816 ,\n         -1.4063219 , -2.6998196 ],\n        [-4.223705  , -4.124258  , -3.9852607 , ..., -1.905508  ,\n         -2.7831123 , -3.9883938 ]],\n\n       [[-3.420784  , -3.2627437 , -3.0619786 , ..., -0.9695714 ,\n         -0.7292557 , -0.5646642 ],\n        [-3.587532  , -3.5350418 , -3.3892899 , ..., -1.1579666 ,\n         -0.8951085 , -0.8335037 ],\n        [-3.6214268 , -3.5236485 , -3.471606  , ..., -1.2413406 ,\n         -1.029508  , -1.0020422 ],\n...\n        [        nan,         nan,         nan, ...,         nan,\n                 nan,         nan],\n        [        nan,         nan,         nan, ...,         nan,\n                 nan,         nan],\n        [        nan,         nan,         nan, ...,         nan,\n                 nan,         nan]],\n\n       [[        nan,         nan,         nan, ...,         nan,\n                 nan,         nan],\n        [        nan,         nan,         nan, ...,         nan,\n                 nan,         nan],\n        [        nan,         nan,         nan, ...,         nan,\n                 nan,         nan],\n        ...,\n        [        nan,         nan,         nan, ...,         nan,\n                 nan,         nan],\n        [        nan,         nan,         nan, ...,         nan,\n                 nan,         nan],\n        [        nan,         nan,         nan, ...,         nan,\n                 nan,         nan]]], dtype=float32)v_wind(time, lat, lon)float320.95 0.8631 0.7149 ... nan nan nanstandard_name :northward_windunits :m s**-1long_name :10 metre V wind componentnameECMWF :10 metre V wind componentshortNameECMWF :10vnameCDM :10_metre_V_wind_component_surfaceproduct_type :analysisarray([[[ 0.9500065 ,  0.8630517 ,  0.71485835, ..., -0.09703127,\n         -0.11656252, -0.13743655],\n        [ 0.7918847 ,  0.62822914,  0.4963118 , ..., -0.19961102,\n         -0.24860191, -0.24591637],\n        [ 0.5531966 ,  0.40768877,  0.29485512, ..., -0.5019385 ,\n         -0.6441911 , -0.6629899 ],\n        ...,\n        [-6.0406346 , -6.004502  , -5.987982  , ..., -1.708807  ,\n         -1.3493099 , -1.7472998 ],\n        [-5.985947  , -5.976385  , -5.9741473 , ..., -2.0273292 ,\n         -2.375962  , -3.0447037 ],\n        [-5.8998065 , -5.909857  , -5.881862  , ..., -2.8107765 ,\n         -3.2466896 , -4.2139745 ]],\n\n       [[ 0.5805308 ,  0.4403534 ,  0.21838887, ..., -0.0563914 ,\n         -0.21292622, -0.2826284 ],\n        [ 1.0544891 ,  0.8172658 ,  0.5639699 , ..., -0.0411733 ,\n         -0.22273254, -0.2920278 ],\n        [ 1.337977  ,  1.1177622 ,  0.90153503, ..., -0.4359487 ,\n         -0.5671336 , -0.6579539 ],\n...\n        [        nan,         nan,         nan, ...,         nan,\n                 nan,         nan],\n        [        nan,         nan,         nan, ...,         nan,\n                 nan,         nan],\n        [        nan,         nan,         nan, ...,         nan,\n                 nan,         nan]],\n\n       [[        nan,         nan,         nan, ...,         nan,\n                 nan,         nan],\n        [        nan,         nan,         nan, ...,         nan,\n                 nan,         nan],\n        [        nan,         nan,         nan, ...,         nan,\n                 nan,         nan],\n        ...,\n        [        nan,         nan,         nan, ...,         nan,\n                 nan,         nan],\n        [        nan,         nan,         nan, ...,         nan,\n                 nan,         nan],\n        [        nan,         nan,         nan, ...,         nan,\n                 nan,         nan]]], dtype=float32)sst(time, lat, lon)float32297.7 297.8 297.8 ... nan nan nanstandard_name :sea_surface_temperatureunits :Klong_name :Sea surface temperaturenameECMWF :Sea surface temperatureshortNameECMWF :sstnameCDM :Sea_surface_temperature_surfaceproduct_type :analysisarray([[[297.7471 , 297.7546 , 297.76443, ...,       nan,       nan,\n               nan],\n        [297.88733, 297.85852, 297.8888 , ...,       nan,       nan,\n               nan],\n        [298.01443, 297.98856, 298.00833, ...,       nan,       nan,\n               nan],\n        ...,\n        [300.63718, 300.68698, 300.77243, ..., 300.8075 , 300.82034,\n         300.7629 ],\n        [300.6327 , 300.67484, 300.77536, ..., 300.811  , 300.81375,\n         300.80423],\n        [300.6528 , 300.71756, 300.81418, ..., 300.84387, 300.83875,\n         300.8201 ]],\n\n       [[297.6781 , 297.68127, 297.69193, ...,       nan,       nan,\n               nan],\n        [297.8127 , 297.77795, 297.80783, ...,       nan,       nan,\n               nan],\n        [297.9294 , 297.89758, 297.90833, ...,       nan,       nan,\n               nan],\n...\n        [      nan,       nan,       nan, ...,       nan,       nan,\n               nan],\n        [      nan,       nan,       nan, ...,       nan,       nan,\n               nan],\n        [      nan,       nan,       nan, ...,       nan,       nan,\n               nan]],\n\n       [[      nan,       nan,       nan, ...,       nan,       nan,\n               nan],\n        [      nan,       nan,       nan, ...,       nan,       nan,\n               nan],\n        [      nan,       nan,       nan, ...,       nan,       nan,\n               nan],\n        ...,\n        [      nan,       nan,       nan, ...,       nan,       nan,\n               nan],\n        [      nan,       nan,       nan, ...,       nan,       nan,\n               nan],\n        [      nan,       nan,       nan, ...,       nan,       nan,\n               nan]]], dtype=float32)speed(time, lat, lon)float324.488 4.625 4.767 ... nan nan nanarray([[[4.488499 , 4.624528 , 4.7670054, ..., 2.0906909, 2.1036224,\n         1.9931256],\n        [4.4673686, 4.6341276, 4.77539  , ..., 1.9973131, 2.010266 ,\n         1.928409 ],\n        [4.341223 , 4.505151 , 4.6407204, ..., 1.8231722, 1.858904 ,\n         1.8116854],\n        ...,\n        [7.5211754, 7.440185 , 7.3393207, ..., 2.5481553, 2.6438372,\n         2.449413 ],\n        [7.4211545, 7.362189 , 7.2732296, ..., 2.8491848, 3.041434 ,\n         4.202109 ],\n        [7.2805324, 7.2327213, 7.135863 , ..., 3.5767057, 4.3809495,\n         5.8507996]],\n\n       [[3.6687508, 3.5600004, 3.5211973, ..., 1.720802 , 1.6092178,\n         1.5122393],\n        [3.8197134, 3.7501287, 3.6571178, ..., 1.7592373, 1.5714175,\n         1.528725 ],\n        [3.8979836, 3.7551668, 3.6623867, ..., 1.6610931, 1.5106525,\n         1.553871 ],\n...\n        [      nan,       nan,       nan, ...,       nan,       nan,\n               nan],\n        [      nan,       nan,       nan, ...,       nan,       nan,\n               nan],\n        [      nan,       nan,       nan, ...,       nan,       nan,\n               nan]],\n\n       [[      nan,       nan,       nan, ...,       nan,       nan,\n               nan],\n        [      nan,       nan,       nan, ...,       nan,       nan,\n               nan],\n        [      nan,       nan,       nan, ...,       nan,       nan,\n               nan],\n        ...,\n        [      nan,       nan,       nan, ...,       nan,       nan,\n               nan],\n        [      nan,       nan,       nan, ...,       nan,       nan,\n               nan],\n        [      nan,       nan,       nan, ...,       nan,       nan,\n               nan]]], dtype=float32)direction(time, lat, lon)float3233.59 19.3 5.515 ... nan nan nanstandard_name :northward_windunits :m s**-1long_name :10 metre V wind componentnameECMWF :10 metre V wind componentshortNameECMWF :10vnameCDM :10_metre_V_wind_component_surfaceproduct_type :analysisarray([[[  33.586975  ,   19.299866  ,    5.5145907 , ...,\n            4.7030787 ,    2.2623785 ,   -0.25532117],\n        [  20.783339  ,   22.084715  ,   22.661911  , ...,\n            8.552377  ,   -7.563846  ,   -5.4208064 ],\n        [  24.53271   ,   25.128256  ,   25.31457   , ...,\n          -25.685669  ,  -37.76059   ,  -33.482464  ],\n        ...,\n        [-126.79245   , -126.457184  , -125.622345  , ...,\n          -62.290222  ,  -42.269485  ,  -82.467705  ],\n        [-126.451256  , -125.97642   , -125.04302   , ...,\n          -70.07114   , -118.416626  , -131.17967   ],\n        [-126.063484  , -125.41434   , -124.700645  , ...,\n         -120.80697   , -129.24355   , -133.12593   ]],\n\n       [[  76.74645   ,   32.125744  ,   32.40063   , ...,\n           -8.000926  ,  -15.328074  ,  -17.452902  ],\n        [ 162.13469   ,  119.518486  ,   31.342909  , ...,\n           16.752283  ,   12.91404   ,    3.5444326 ],\n        [ 159.21642   ,  161.35905   ,  133.93562   , ...,\n           19.143072  ,   21.379738  ,   -1.3009249 ],\n...\n        [          nan,           nan,           nan, ...,\n                   nan,           nan,           nan],\n        [          nan,           nan,           nan, ...,\n                   nan,           nan,           nan],\n        [          nan,           nan,           nan, ...,\n                   nan,           nan,           nan]],\n\n       [[          nan,           nan,           nan, ...,\n                   nan,           nan,           nan],\n        [          nan,           nan,           nan, ...,\n                   nan,           nan,           nan],\n        [          nan,           nan,           nan, ...,\n                   nan,           nan,           nan],\n        ...,\n        [          nan,           nan,           nan, ...,\n                   nan,           nan,           nan],\n        [          nan,           nan,           nan, ...,\n                   nan,           nan,           nan],\n        [          nan,           nan,           nan, ...,\n                   nan,           nan,           nan]]], dtype=float32)Attributes: (3)source :Reanalysisinstitution :ECMWFtilte :ERA5 forecasts"
  },
  {
    "objectID": "python-notebooks/04_Combining_Data.html#process-earth-data-currents",
    "href": "python-notebooks/04_Combining_Data.html#process-earth-data-currents",
    "title": "Combine, clean, and export the data",
    "section": "Process EARTH DATA Currents",
    "text": "Process EARTH DATA Currents\n\n# interpolate\n### Convert time from CF time to datetime\ncurrents['time'] = currents.indexes['time'].to_datetimeindex()\n\n/tmp/ipykernel_364/1754246052.py:3: RuntimeWarning: Converting a CFTimeIndex with dates from a non-standard calendar, 'julian', to a pandas.DatetimeIndex, which uses dates from the standard calendar.  This may lead to subtle errors in operations that depend on the length of time between dates.\n  currents['time'] = currents.indexes['time'].to_datetimeindex()\n\n\n\ncurrents\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:  (latitude: 177, longitude: 241, time: 732)\nCoordinates:\n    lat      (latitude) float64 dask.array&lt;chunksize=(177,), meta=np.ndarray&gt;\n    lon      (longitude) float64 dask.array&lt;chunksize=(241,), meta=np.ndarray&gt;\n  * time     (time) datetime64[ns] 2000-01-01 2000-01-02 ... 2002-01-01\nDimensions without coordinates: latitude, longitude\nData variables:\n    u        (time, longitude, latitude) float64 dask.array&lt;chunksize=(366, 241, 177), meta=np.ndarray&gt;\n    v        (time, longitude, latitude) float64 dask.array&lt;chunksize=(366, 241, 177), meta=np.ndarray&gt;\n    ug       (time, longitude, latitude) float64 dask.array&lt;chunksize=(366, 241, 177), meta=np.ndarray&gt;\n    vg       (time, longitude, latitude) float64 dask.array&lt;chunksize=(366, 241, 177), meta=np.ndarray&gt;\nAttributes: (12/36)\n    title:                      Ocean Surface Current Analyses Real-time (OSC...\n    summary:                    Global, daily, 0.25 degree geostrophic and to...\n    keywords:                   ocean currents,ocean circulation,surface curr...\n    Conventions:                CF-1.8 Standard Names v77, ACDD-1.3, netcdf 4...\n    id:                         OSCAR_L4_OC_FINAL_V2.0\n    history:                    OSCAR 0.25 degree daily version 2.0 replaces ...\n    ...                         ...\n    geospatial_lon_max:         359.75\n    geospatial_lon_units:       degrees_east\n    geospatial_lon_resolution:  0.25 degree\n    time_coverage_start:        2000-01-01T00:00:00\n    time_coverage_end:          2000-01-01T23:59:59\n    date_created:               2022-01-07xarray.DatasetDimensions:latitude: 177longitude: 241time: 732Coordinates: (3)lat(latitude)float64dask.array&lt;chunksize=(177,), meta=np.ndarray&gt;long_name :latitudestandard_name :latitudeunits :degrees_northaxis :Yvalid_min :-89.75valid_max :89.75bounds :[-89.75,89.75]\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n1.38 kiB\n1.38 kiB\n\n\nShape\n(177,)\n(177,)\n\n\nDask graph\n1 chunks in 5 graph layers\n\n\nData type\nfloat64 numpy.ndarray\n\n\n\n\n\n\n\n\nlon\n\n\n(longitude)\n\n\nfloat64\n\n\ndask.array&lt;chunksize=(241,), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\nlongitude\n\nstandard_name :\n\nlongitude\n\nunits :\n\ndegrees_east\n\naxis :\n\nX\n\nvalid_min :\n\n0.0\n\nvalid_max :\n\n359.75\n\nbounds :\n\n[0,359.75]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n1.88 kiB\n1.88 kiB\n\n\nShape\n(241,)\n(241,)\n\n\nDask graph\n1 chunks in 5 graph layers\n\n\nData type\nfloat64 numpy.ndarray\n\n\n\n\n\n\n\n\n\ntime\n\n\n(time)\n\n\ndatetime64[ns]\n\n\n2000-01-01 ... 2002-01-01\n\n\n\n\n\n\n\narray(['2000-01-01T00:00:00.000000000', '2000-01-02T00:00:00.000000000',\n       '2000-01-03T00:00:00.000000000', ..., '2001-12-30T00:00:00.000000000',\n       '2001-12-31T00:00:00.000000000', '2002-01-01T00:00:00.000000000'],\n      dtype='datetime64[ns]')\n\nData variables: (4)\n\n\n\n\n\nu\n\n\n(time, longitude, latitude)\n\n\nfloat64\n\n\ndask.array&lt;chunksize=(366, 241, 177), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\nzonal total surface current\n\nstandard_name :\n\neastward_sea_water_velocity\n\nunits :\n\nm s-1\n\ncoverage_content_type :\n\nmodelResult\n\nvalid_min :\n\n-3.0\n\nvalid_max :\n\n3.0\n\ndepth :\n\n15m\n\ncomment :\n\nVelocities are an average over the top 30m of the mixed layer\n\nsource :\n\nSSH source: CMEMS SSALTO/DUACS SEALEVEL_GLO_PHY_L4_MY_008_047 DOI: 10.48670/moi-00148 ; WIND source: ECMWF ERA5 10m wind DOI: 10.24381/cds.adbb2d47 ; SST source: CMC 0.2 deg SST V2.0 DOI: 10.5067/GHCMC-4FM02\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n238.23 MiB\n119.11 MiB\n\n\nShape\n(732, 241, 177)\n(366, 241, 177)\n\n\nDask graph\n2 chunks in 5 graph layers\n\n\nData type\nfloat64 numpy.ndarray\n\n\n\n\n\n\n\n\n\nv\n\n\n(time, longitude, latitude)\n\n\nfloat64\n\n\ndask.array&lt;chunksize=(366, 241, 177), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\nmeridional total surface current\n\nstandard_name :\n\nnorthward_sea_water_velocity\n\nunits :\n\nm s-1\n\ncoverage_content_type :\n\nmodelResult\n\nvalid_min :\n\n-3.0\n\nvalid_max :\n\n3.0\n\ndepth :\n\n15m\n\ncomment :\n\nVelocities are an average over the top 30m of the mixed layer\n\nsource :\n\nSSH source: CMEMS SSALTO/DUACS SEALEVEL_GLO_PHY_L4_MY_008_047 DOI: 10.48670/moi-00148 ; WIND source: ECMWF ERA5 10m wind DOI: 10.24381/cds.adbb2d47 ; SST source: CMC 0.2 deg SST V2.0 DOI: 10.5067/GHCMC-4FM02\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n238.23 MiB\n119.11 MiB\n\n\nShape\n(732, 241, 177)\n(366, 241, 177)\n\n\nDask graph\n2 chunks in 5 graph layers\n\n\nData type\nfloat64 numpy.ndarray\n\n\n\n\n\n\n\n\n\nug\n\n\n(time, longitude, latitude)\n\n\nfloat64\n\n\ndask.array&lt;chunksize=(366, 241, 177), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\nzonal geostrophic surface current\n\nstandard_name :\n\ngeostrophic_eastward_sea_water_velocity\n\nunits :\n\nm s-1\n\nvalid_min :\n\n-3.0\n\nvalid_max :\n\n3.0\n\ndepth :\n\n15m\n\ncomment :\n\nGeostrophic velocities calculated from absolute dynamic topography\n\nsource :\n\nSSH source: CMEMS SSALTO/DUACS SEALEVEL_GLO_PHY_L4_MY_008_047 DOI: 10.48670/moi-00148\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n238.23 MiB\n119.11 MiB\n\n\nShape\n(732, 241, 177)\n(366, 241, 177)\n\n\nDask graph\n2 chunks in 5 graph layers\n\n\nData type\nfloat64 numpy.ndarray\n\n\n\n\n\n\n\n\n\nvg\n\n\n(time, longitude, latitude)\n\n\nfloat64\n\n\ndask.array&lt;chunksize=(366, 241, 177), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\nmeridional geostrophic surface current\n\nstandard_name :\n\ngeostrophic_northward_sea_water_velocity\n\nunits :\n\nm s-1\n\nvalid_min :\n\n-3.0\n\nvalid_max :\n\n3.0\n\ndepth :\n\n15m\n\ncomment :\n\nGeostrophic velocities calculated from absolute dynamic topography\n\nsource :\n\nSSH source: CMEMS SSALTO/DUACS SEALEVEL_GLO_PHY_L4_MY_008_047 DOI: 10.48670/moi-00148\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n238.23 MiB\n119.11 MiB\n\n\nShape\n(732, 241, 177)\n(366, 241, 177)\n\n\nDask graph\n2 chunks in 5 graph layers\n\n\nData type\nfloat64 numpy.ndarray\n\n\n\n\n\n\n\n\n\nAttributes: (36)title :Ocean Surface Current Analyses Real-time (OSCAR) Surface Currents - Final 0.25 Degree (Version 2.0)summary :Global, daily, 0.25 degree geostrophic and total mixed layer currents averaged over the top 30m. Highest quality OSCAR product.keywords :ocean currents,ocean circulation,surface currents,ekman,geostrophicConventions :CF-1.8 Standard Names v77, ACDD-1.3, netcdf 4.7.3, hdf5 1.8.12id :OSCAR_L4_OC_FINAL_V2.0history :OSCAR 0.25 degree daily version 2.0 replaces OSCAR third degree 5 daysource :OSCAR is based on simplified physics using satellite data; SSH source: CMEMS SSALTO/DUACS SEALEVEL_GLO_PHY_L4_MY_008_047 DOI: 10.48670/moi-00148 ; WIND source: ECMWF ERA5 10m wind DOI: 10.24381/cds.adbb2d47 ; SST source: CMC 0.2 deg SST V2.0 DOI: 10.5067/GHCMC-4FM02processing_level :L4standard_name_vocabulary :NetCDF Climate and Forecast (CF) Metadata Conventionacknowledgment :OSCAR products are supported by NASA and may be freely distributed.product_version :v2.0creator_name :Kathleen Dohancreator_email :kdohan@esr.orgcreator_url :www.esr.org/research/oscar/creator_type :personcreator_institution :ESRinstitution :Earth & Space Researchreferences :www.esr.org/research/oscar/, PO.DAAC user guide, DOI: 10.5067/OSCAR-25F20project :Ocean Surface Current Analyses Real-time (OSCAR)program :OSCARpublisher_name :NASA Physical Oceanography Distributed Active Archive Center (PO.DAAC)publisher_email :podaac@podaac.jpl.nasa.govpublisher_url :podaac.jpl.nasa.govpublisher_type :institutionpublisher_institution :PO.DAACgeospatial_lat_min :-89.75geospatial_lat_max :89.75geospatial_lat_units :degrees_northgeospatial_lat_resolution :0.25 degreegeospatial_lon_min :0.0geospatial_lon_max :359.75geospatial_lon_units :degrees_eastgeospatial_lon_resolution :0.25 degreetime_coverage_start :2000-01-01T00:00:00time_coverage_end :2000-01-01T23:59:59date_created :2022-01-07\n\n\n\nRebuild dataset\nAs we mentioned, the latitude and longitude dimensions on this dataset are not properly indexed, hence Xarray interpolation using interp() or interp_like() will not work. We are going to build another dataset from the ground up to fix this issue.\n\n# attempt to properly index\nlats = currents.lat.values\nlons = currents.lon.values\ntime = currents.time.values\n\nidx = pd.MultiIndex.from_product([time, lons, lats], names=['time', 'lon', 'lat'])\nd = { 'u': currents.u.values.flatten(), \n     'v': currents.v.values.flatten(),\n     'ug': currents.ug.values.flatten(),\n     'vg': currents.vg.values.flatten()}\ndf = pd.DataFrame(d, index=idx)\n\n\nds = xr.Dataset.from_dataframe(df)\n\n\ncurrents_sliced = ds.sel(lat=slice(5, 25), lon=slice(60, 80)).transpose('time', 'lat', 'lon')\n\n\ncurrents_interp = currents_sliced.interp_like(era5)\n\n\ncurrents_interp.isel(time=0).u.plot.imshow()\n\n&lt;matplotlib.image.AxesImage at 0x7f6286985cd0&gt;\n\n\n\n\n\n\ncurrents_interp\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:  (time: 731, lat: 81, lon: 81)\nCoordinates:\n  * time     (time) datetime64[ns] 2000-01-01 2000-01-02 ... 2001-12-31\n  * lon      (lon) float32 60.0 60.25 60.5 60.75 61.0 ... 79.25 79.5 79.75 80.0\n  * lat      (lat) float32 25.0 24.75 24.5 24.25 24.0 ... 6.0 5.75 5.5 5.25 5.0\nData variables:\n    u        (time, lat, lon) float64 -0.2163 -0.1152 ... -0.6347 -0.7386\n    v        (time, lat, lon) float64 0.1758 0.1223 0.0406 ... 0.1429 0.1075\n    ug       (time, lat, lon) float64 -0.2121 -0.1098 ... -0.4791 -0.5703\n    vg       (time, lat, lon) float64 0.1709 0.1173 ... 0.02541 -0.003819xarray.DatasetDimensions:time: 731lat: 81lon: 81Coordinates: (3)time(time)datetime64[ns]2000-01-01 ... 2001-12-31array(['2000-01-01T00:00:00.000000000', '2000-01-02T00:00:00.000000000',\n       '2000-01-03T00:00:00.000000000', ..., '2001-12-29T00:00:00.000000000',\n       '2001-12-30T00:00:00.000000000', '2001-12-31T00:00:00.000000000'],\n      dtype='datetime64[ns]')lon(lon)float3260.0 60.25 60.5 ... 79.5 79.75 80.0array([60.  , 60.25, 60.5 , 60.75, 61.  , 61.25, 61.5 , 61.75, 62.  , 62.25,\n       62.5 , 62.75, 63.  , 63.25, 63.5 , 63.75, 64.  , 64.25, 64.5 , 64.75,\n       65.  , 65.25, 65.5 , 65.75, 66.  , 66.25, 66.5 , 66.75, 67.  , 67.25,\n       67.5 , 67.75, 68.  , 68.25, 68.5 , 68.75, 69.  , 69.25, 69.5 , 69.75,\n       70.  , 70.25, 70.5 , 70.75, 71.  , 71.25, 71.5 , 71.75, 72.  , 72.25,\n       72.5 , 72.75, 73.  , 73.25, 73.5 , 73.75, 74.  , 74.25, 74.5 , 74.75,\n       75.  , 75.25, 75.5 , 75.75, 76.  , 76.25, 76.5 , 76.75, 77.  , 77.25,\n       77.5 , 77.75, 78.  , 78.25, 78.5 , 78.75, 79.  , 79.25, 79.5 , 79.75,\n       80.  ], dtype=float32)lat(lat)float3225.0 24.75 24.5 ... 5.5 5.25 5.0array([25.  , 24.75, 24.5 , 24.25, 24.  , 23.75, 23.5 , 23.25, 23.  , 22.75,\n       22.5 , 22.25, 22.  , 21.75, 21.5 , 21.25, 21.  , 20.75, 20.5 , 20.25,\n       20.  , 19.75, 19.5 , 19.25, 19.  , 18.75, 18.5 , 18.25, 18.  , 17.75,\n       17.5 , 17.25, 17.  , 16.75, 16.5 , 16.25, 16.  , 15.75, 15.5 , 15.25,\n       15.  , 14.75, 14.5 , 14.25, 14.  , 13.75, 13.5 , 13.25, 13.  , 12.75,\n       12.5 , 12.25, 12.  , 11.75, 11.5 , 11.25, 11.  , 10.75, 10.5 , 10.25,\n       10.  ,  9.75,  9.5 ,  9.25,  9.  ,  8.75,  8.5 ,  8.25,  8.  ,  7.75,\n        7.5 ,  7.25,  7.  ,  6.75,  6.5 ,  6.25,  6.  ,  5.75,  5.5 ,  5.25,\n        5.  ], dtype=float32)Data variables: (4)u(time, lat, lon)float64-0.2163 -0.1152 ... -0.6347 -0.7386array([[[-2.16329793e-01, -1.15205638e-01, -6.13580292e-02, ...,\n                     nan,             nan,             nan],\n        [-2.67597997e-01, -1.92997759e-01, -1.33166710e-01, ...,\n                     nan,             nan,             nan],\n        [-2.23533932e-01, -2.28077917e-01, -2.19973706e-01, ...,\n                     nan,             nan,             nan],\n        ...,\n        [-1.65040480e-01, -1.71987413e-01, -1.89558302e-01, ...,\n         -4.36580786e-01, -5.21121478e-01, -5.78623471e-01],\n        [-1.13352991e-01, -1.41514442e-01, -1.83131898e-01, ...,\n         -5.92808386e-01, -7.03506794e-01, -7.69103705e-01],\n        [-6.05071228e-02, -1.16488412e-01, -1.50332504e-01, ...,\n         -7.82638128e-01, -8.77663090e-01, -9.36166662e-01]],\n\n       [[-2.04018244e-01, -1.07527013e-01, -6.26679832e-02, ...,\n                     nan,             nan,             nan],\n        [-2.70675893e-01, -1.93174375e-01, -1.39464815e-01, ...,\n                     nan,             nan,             nan],\n        [-2.26310057e-01, -2.39305605e-01, -2.34721948e-01, ...,\n                     nan,             nan,             nan],\n...\n        [-2.46977761e-03,  1.60242172e-02,  1.30060198e-02, ...,\n         -3.62182186e-01, -4.48416930e-01, -5.46232466e-01],\n        [-3.72221920e-02, -3.19794831e-02, -4.25276740e-02, ...,\n         -4.67587208e-01, -6.00699171e-01, -7.12966891e-01],\n        [-1.04136717e-01, -1.08186101e-01, -9.38777884e-02, ...,\n         -4.83430936e-01, -5.86900377e-01, -6.84638069e-01]],\n\n       [[-7.85115058e-02, -7.01353606e-02, -7.01956468e-02, ...,\n                     nan,             nan,             nan],\n        [-4.99937370e-02, -8.35889665e-02, -1.11157585e-01, ...,\n                     nan,             nan,             nan],\n        [-2.46566897e-02, -7.82026501e-02, -1.27673716e-01, ...,\n                     nan,             nan,             nan],\n        ...,\n        [ 5.04988324e-02,  5.14542566e-02,  3.12174716e-02, ...,\n         -3.93258084e-01, -4.88031173e-01, -5.68671226e-01],\n        [ 2.10081518e-03,  2.06923076e-03, -2.19358869e-02, ...,\n         -4.76978446e-01, -6.17301914e-01, -7.22930244e-01],\n        [-6.40567371e-02, -6.56186310e-02, -6.70941659e-02, ...,\n         -5.07840775e-01, -6.34701823e-01, -7.38607936e-01]]])v(time, lat, lon)float640.1758 0.1223 ... 0.1429 0.1075array([[[ 0.17581382,  0.1223497 ,  0.04060171, ...,         nan,\n                 nan,         nan],\n        [ 0.27962411,  0.22099907,  0.09537801, ...,         nan,\n                 nan,         nan],\n        [ 0.33087173,  0.27562031,  0.14109354, ...,         nan,\n                 nan,         nan],\n        ...,\n        [ 0.23974562,  0.2146783 ,  0.16905831, ...,  0.09940819,\n          0.05113739,  0.00742983],\n        [ 0.24881928,  0.207477  ,  0.15428967, ...,  0.06824016,\n          0.01924601, -0.01641264],\n        [ 0.2283897 ,  0.17947196,  0.1464494 , ..., -0.03389545,\n         -0.04072035, -0.06296792]],\n\n       [[ 0.19013242,  0.11755865,  0.04124651, ...,         nan,\n                 nan,         nan],\n        [ 0.29901138,  0.21379557,  0.08956162, ...,         nan,\n                 nan,         nan],\n        [ 0.34159062,  0.26557376,  0.133666  , ...,         nan,\n                 nan,         nan],\n...\n        [ 0.15974768,  0.15141284,  0.13394718, ...,  0.2804523 ,\n          0.23092576,  0.17797142],\n        [ 0.1774607 ,  0.14959858,  0.11969227, ...,  0.21213661,\n          0.16393553,  0.1431547 ],\n        [ 0.17575619,  0.14698981,  0.12047752, ...,  0.1270319 ,\n          0.08760069,  0.04948463]],\n\n       [[ 0.08213705,  0.1106455 ,  0.10435769, ...,         nan,\n                 nan,         nan],\n        [ 0.07783279,  0.10185594,  0.11620673, ...,         nan,\n                 nan,         nan],\n        [ 0.02868244,  0.04827627,  0.07242787, ...,         nan,\n                 nan,         nan],\n        ...,\n        [ 0.1937754 ,  0.16497553,  0.13117042, ...,  0.35318518,\n          0.30436654,  0.21369744],\n        [ 0.19152782,  0.14561624,  0.12216206, ...,  0.2692158 ,\n          0.23875121,  0.19075344],\n        [ 0.18291421,  0.14327341,  0.1180734 , ...,  0.17077737,\n          0.14294798,  0.10749965]]])ug(time, lat, lon)float64-0.2121 -0.1098 ... -0.4791 -0.5703array([[[-0.21205931, -0.10981898, -0.05269309, ...,         nan,\n                 nan,         nan],\n        [-0.2614097 , -0.18526745, -0.12312671, ...,         nan,\n                 nan,         nan],\n        [-0.21334308, -0.21560184, -0.20656682, ...,         nan,\n                 nan,         nan],\n        ...,\n        [-0.01355595, -0.01607799, -0.02585089, ..., -0.40636332,\n         -0.44167185, -0.46247866],\n        [ 0.03170129,  0.0105671 , -0.02476663, ..., -0.49995573,\n         -0.57095341, -0.5996827 ],\n        [ 0.07349779,  0.0253082 , -0.00762713, ..., -0.64379907,\n         -0.69996248, -0.7332445 ]],\n\n       [[-0.19861792, -0.10173985, -0.05383704, ...,         nan,\n                 nan,         nan],\n        [-0.26761656, -0.18923695, -0.1340248 , ...,         nan,\n                 nan,         nan],\n        [-0.22092084, -0.23236034, -0.22813429, ...,         nan,\n                 nan,         nan],\n...\n        [ 0.13114596,  0.13839682,  0.13051545, ..., -0.3417361 ,\n         -0.41645147, -0.49242785],\n        [ 0.08486699,  0.08684832,  0.07628122, ..., -0.41971184,\n         -0.53462901, -0.61850534],\n        [ 0.01282745,  0.01282745,  0.0253082 , ..., -0.41602525,\n         -0.49715017, -0.58035522]],\n\n       [[-0.07121075, -0.06034324, -0.05762637, ...,         nan,\n                 nan,         nan],\n        [-0.04806705, -0.0802561 , -0.10558873, ...,         nan,\n                 nan,         nan],\n        [-0.02360764, -0.07657909, -0.12481445, ...,         nan,\n                 nan,         nan],\n        ...,\n        [ 0.14911548,  0.13209172,  0.11286119, ..., -0.35119374,\n         -0.42685487, -0.48013292],\n        [ 0.09378298,  0.08189499,  0.06340258, ..., -0.38933144,\n         -0.50193706, -0.57656718],\n        [ 0.0253082 ,  0.0197612 ,  0.01906782, ..., -0.38031642,\n         -0.47912241, -0.57030128]]])vg(time, lat, lon)float640.1709 0.1173 ... 0.02541 -0.003819array([[[ 0.17089251,  0.11733811,  0.03311233, ...,         nan,\n                 nan,         nan],\n        [ 0.27516986,  0.21762427,  0.09056246, ...,         nan,\n                 nan,         nan],\n        [ 0.32789404,  0.27256798,  0.13619627, ...,         nan,\n                 nan,         nan],\n        ...,\n        [ 0.22835081,  0.20966424,  0.16722675, ...,  0.05004034,\n         -0.03546966, -0.09754937],\n        [ 0.23312529,  0.19963556,  0.15387101, ..., -0.01955038,\n         -0.0835596 , -0.13098003],\n        [ 0.20916163,  0.17087756,  0.14581811, ..., -0.13015069,\n         -0.1440736 , -0.166352  ]],\n\n       [[ 0.17617906,  0.10582156,  0.02971701, ...,         nan,\n                 nan,         nan],\n        [ 0.2854159 ,  0.20387646,  0.08143192, ...,         nan,\n                 nan,         nan],\n        [ 0.32879021,  0.25567457,  0.12553916, ...,         nan,\n                 nan,         nan],\n...\n        [ 0.09723046,  0.08804637,  0.07062706, ...,  0.26193668,\n          0.19320631,  0.11655139],\n        [ 0.11639408,  0.08854159,  0.06300886, ...,  0.15918308,\n          0.09551511,  0.05970216],\n        [ 0.12145894,  0.0876995 ,  0.06264072, ...,  0.05499892,\n          0.00279234, -0.03131491]],\n\n       [[ 0.08511064,  0.11366543,  0.10946919, ...,         nan,\n                 nan,         nan],\n        [ 0.081077  ,  0.10603812,  0.12192763, ...,         nan,\n                 nan,         nan],\n        [ 0.03054435,  0.05160108,  0.07705999, ...,         nan,\n                 nan,         nan],\n        ...,\n        [ 0.11813489,  0.09628438,  0.06429358, ...,  0.26510076,\n          0.20270373,  0.10261559],\n        [ 0.11805487,  0.07693571,  0.05339187, ...,  0.1591868 ,\n          0.12337106,  0.07262998],\n        [ 0.11449762,  0.07377872,  0.04837319, ...,  0.05395136,\n          0.02541404, -0.00381944]]])Attributes: (0)"
  },
  {
    "objectID": "python-notebooks/04_Combining_Data.html#process-motu-copernicus-datasets",
    "href": "python-notebooks/04_Combining_Data.html#process-motu-copernicus-datasets",
    "title": "Combine, clean, and export the data",
    "section": "Process MOTU-Copernicus datasets",
    "text": "Process MOTU-Copernicus datasets\n\n# inspecting motu, seeing that CHL & sla variables have different grids\n# solution: interpolate and add to our dataset\nmotu\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:          (time: 731, lat: 481, lon: 481, latitude: 81, longitude: 81)\nCoordinates:\n  * time             (time) datetime64[ns] 2000-01-01 2000-01-02 ... 2001-12-31\n  * lat              (lat) float32 25.02 24.98 24.94 24.9 ... 5.104 5.062 5.021\n  * lon              (lon) float32 59.98 60.02 60.06 60.1 ... 79.9 79.94 79.98\n  * latitude         (latitude) float32 4.875 5.125 5.375 ... 24.38 24.62 24.88\n  * longitude        (longitude) float32 59.88 60.12 60.38 ... 79.38 79.62 79.88\nData variables:\n    CHL_uncertainty  (time, lat, lon) float32 dask.array&lt;chunksize=(31, 481, 481), meta=np.ndarray&gt;\n    CHL              (time, lat, lon) float32 dask.array&lt;chunksize=(31, 481, 481), meta=np.ndarray&gt;\n    adt              (time, latitude, longitude) float64 dask.array&lt;chunksize=(31, 81, 81), meta=np.ndarray&gt;\n    crs              (time) int32 -2147483647 -2147483647 ... -2147483647\n    sla              (time, latitude, longitude) float64 dask.array&lt;chunksize=(31, 81, 81), meta=np.ndarray&gt;\nAttributes: (12/92)\n    lon_step:                        0.041666668\n    keywords:                        EARTH SCIENCE &gt; OCEANS &gt; OCEAN CHEMISTRY...\n    cmems_product_id:                OCEANCOLOUR_GLO_BGC_L4_MY_009_104\n    lat_step:                        0.041666668\n    grid_mapping:                    Equirectangular\n    title:                           cmems_obs-oc_glo_bgc-plankton_my_l4-gapf...\n    ...                              ...\n    westernmost_longitude:           -180.0\n    geospatial_vertical_positive:    up\n    date_created:                    2023-07-09T01:28:25Z\n    nb_valid_bins:                   18891348\n    pct_valid_bins:                  50.61339377572016\n    History:                         Translated to CF-1.0 Conventions by Netc...xarray.DatasetDimensions:time: 731lat: 481lon: 481latitude: 81longitude: 81Coordinates: (5)time(time)datetime64[ns]2000-01-01 ... 2001-12-31standard_name :timecoverage_content_type :coordinatelong_name :reference timeaxis :Tvalid_min :0.0valid_max :401767.0_ChunkSizes :1_CoordinateAxisType :Timearray(['2000-01-01T00:00:00.000000000', '2000-01-02T00:00:00.000000000',\n       '2000-01-03T00:00:00.000000000', ..., '2001-12-29T00:00:00.000000000',\n       '2001-12-30T00:00:00.000000000', '2001-12-31T00:00:00.000000000'],\n      dtype='datetime64[ns]')lat(lat)float3225.02 24.98 24.94 ... 5.062 5.021long_name :latitudeunits :degrees_northaxis :Ystandard_name :latitudecoverage_content_type :coordinatevalid_min :-90.0valid_max :90.0_ChunkSizes :4320_CoordinateAxisType :Latarray([25.020832, 24.979164, 24.937498, ...,  5.104164,  5.062498,  5.020831],\n      dtype=float32)lon(lon)float3259.98 60.02 60.06 ... 79.94 79.98long_name :longitudeunits :degrees_eastaxis :Xstandard_name :longitudecoverage_content_type :coordinatevalid_min :-180.0valid_max :180.0_ChunkSizes :8640_CoordinateAxisType :Lonarray([59.979176, 60.02084 , 60.062508, ..., 79.89584 , 79.93751 , 79.97917 ],\n      dtype=float32)latitude(latitude)float324.875 5.125 5.375 ... 24.62 24.88axis :Ybounds :lat_bndslong_name :Latitudestandard_name :latitudeunits :degrees_northvalid_max :24.875valid_min :4.875_ChunkSizes :50_CoordinateAxisType :Latarray([ 4.875,  5.125,  5.375,  5.625,  5.875,  6.125,  6.375,  6.625,  6.875,\n        7.125,  7.375,  7.625,  7.875,  8.125,  8.375,  8.625,  8.875,  9.125,\n        9.375,  9.625,  9.875, 10.125, 10.375, 10.625, 10.875, 11.125, 11.375,\n       11.625, 11.875, 12.125, 12.375, 12.625, 12.875, 13.125, 13.375, 13.625,\n       13.875, 14.125, 14.375, 14.625, 14.875, 15.125, 15.375, 15.625, 15.875,\n       16.125, 16.375, 16.625, 16.875, 17.125, 17.375, 17.625, 17.875, 18.125,\n       18.375, 18.625, 18.875, 19.125, 19.375, 19.625, 19.875, 20.125, 20.375,\n       20.625, 20.875, 21.125, 21.375, 21.625, 21.875, 22.125, 22.375, 22.625,\n       22.875, 23.125, 23.375, 23.625, 23.875, 24.125, 24.375, 24.625, 24.875],\n      dtype=float32)longitude(longitude)float3259.88 60.12 60.38 ... 79.62 79.88axis :Xbounds :lon_bndslong_name :Longitudestandard_name :longitudeunits :degrees_eastvalid_max :79.875valid_min :59.875_ChunkSizes :50_CoordinateAxisType :Lonarray([59.875, 60.125, 60.375, 60.625, 60.875, 61.125, 61.375, 61.625, 61.875,\n       62.125, 62.375, 62.625, 62.875, 63.125, 63.375, 63.625, 63.875, 64.125,\n       64.375, 64.625, 64.875, 65.125, 65.375, 65.625, 65.875, 66.125, 66.375,\n       66.625, 66.875, 67.125, 67.375, 67.625, 67.875, 68.125, 68.375, 68.625,\n       68.875, 69.125, 69.375, 69.625, 69.875, 70.125, 70.375, 70.625, 70.875,\n       71.125, 71.375, 71.625, 71.875, 72.125, 72.375, 72.625, 72.875, 73.125,\n       73.375, 73.625, 73.875, 74.125, 74.375, 74.625, 74.875, 75.125, 75.375,\n       75.625, 75.875, 76.125, 76.375, 76.625, 76.875, 77.125, 77.375, 77.625,\n       77.875, 78.125, 78.375, 78.625, 78.875, 79.125, 79.375, 79.625, 79.875],\n      dtype=float32)Data variables: (5)CHL_uncertainty(time, lat, lon)float32dask.array&lt;chunksize=(31, 481, 481), meta=np.ndarray&gt;long_name :Chlorophyll-a concentration - Uncertainty estimationvalid_min :0units :%coverage_content_type :qualityInformationvalid_max :32767_ChunkSizes :[  1 256 256]\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n645.16 MiB\n27.36 MiB\n\n\nShape\n(731, 481, 481)\n(31, 481, 481)\n\n\nDask graph\n24 chunks in 60 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\nCHL\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(31, 481, 481), meta=np.ndarray&gt;\n\n\n\n\ninput_files_reprocessings :\n\nProcessors versions: MODIS R2022.0NRT/VIIRSN R2022.0NRT/OLCIA 07.02/VIIRSJ1 R2022.0NRT/OLCIB 07.02\n\ntype :\n\nsurface\n\nancillary_variables :\n\nflags CHL_uncertainty\n\nstandard_name :\n\nmass_concentration_of_chlorophyll_a_in_sea_water\n\nlong_name :\n\nChlorophyll-a concentration - Mean of the binned pixels\n\nvalid_min :\n\n0.0\n\nunits :\n\nmilligram m-3\n\ncoverage_content_type :\n\nmodelResult\n\nvalid_max :\n\n1000.0\n\n_ChunkSizes :\n\n[ 1 256 256]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n645.16 MiB\n27.36 MiB\n\n\nShape\n(731, 481, 481)\n(31, 481, 481)\n\n\nDask graph\n24 chunks in 60 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nadt\n\n\n(time, latitude, longitude)\n\n\nfloat64\n\n\ndask.array&lt;chunksize=(31, 81, 81), meta=np.ndarray&gt;\n\n\n\n\ncomment :\n\nThe absolute dynamic topography is the sea surface height above geoid; the adt is obtained as follows: adt=sla+mdt where mdt is the mean dynamic topography; see the product user manual for details\n\ngrid_mapping :\n\ncrs\n\nlong_name :\n\nAbsolute dynamic topography\n\nstandard_name :\n\nsea_surface_height_above_geoid\n\nunits :\n\nm\n\n_ChunkSizes :\n\n[ 1 50 50]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n36.59 MiB\n1.55 MiB\n\n\nShape\n(731, 81, 81)\n(31, 81, 81)\n\n\nDask graph\n24 chunks in 49 graph layers\n\n\nData type\nfloat64 numpy.ndarray\n\n\n\n\n\n\n\n\n\ncrs\n\n\n(time)\n\n\nint32\n\n\n-2147483647 ... -2147483647\n\n\n\n\ncomment :\n\nThis is a container variable that describes the grid_mapping used by the data in this file. This variable does not contain any data; only information about the geographic coordinate system.\n\ninverse_flattening :\n\n298.257\n\ngrid_mapping_name :\n\nlatitude_longitude\n\nsemi_major_axis :\n\n6378136.3\n\n_CoordinateTransformType :\n\nProjection\n\n_CoordinateAxisTypes :\n\nGeoX GeoY\n\n\n\n\narray([-2147483647, -2147483647, -2147483647, -2147483647, -2147483647,\n       -2147483647, -2147483647, -2147483647, -2147483647, -2147483647,\n       -2147483647, -2147483647, -2147483647, -2147483647, -2147483647,\n       -2147483647, -2147483647, -2147483647, -2147483647, -2147483647,\n       -2147483647, -2147483647, -2147483647, -2147483647, -2147483647,\n       -2147483647, -2147483647, -2147483647, -2147483647, -2147483647,\n       -2147483647, -2147483647, -2147483647, -2147483647, -2147483647,\n       -2147483647, -2147483647, -2147483647, -2147483647, -2147483647,\n       -2147483647, -2147483647, -2147483647, -2147483647, -2147483647,\n       -2147483647, -2147483647, -2147483647, -2147483647, -2147483647,\n       -2147483647, -2147483647, -2147483647, -2147483647, -2147483647,\n       -2147483647, -2147483647, -2147483647, -2147483647, -2147483647,\n       -2147483647, -2147483647, -2147483647, -2147483647, -2147483647,\n       -2147483647, -2147483647, -2147483647, -2147483647, -2147483647,\n       -2147483647, -2147483647, -2147483647, -2147483647, -2147483647,\n       -2147483647, -2147483647, -2147483647, -2147483647, -2147483647,\n       -2147483647, -2147483647, -2147483647, -2147483647, -2147483647,\n       -2147483647, -2147483647, -2147483647, -2147483647, -2147483647,\n       -2147483647, -2147483647, -2147483647, -2147483647, -2147483647,\n       -2147483647, -2147483647, -2147483647, -2147483647, -2147483647,\n...\n       -2147483647, -2147483647, -2147483647, -2147483647, -2147483647,\n       -2147483647, -2147483647, -2147483647, -2147483647, -2147483647,\n       -2147483647, -2147483647, -2147483647, -2147483647, -2147483647,\n       -2147483647, -2147483647, -2147483647, -2147483647, -2147483647,\n       -2147483647, -2147483647, -2147483647, -2147483647, -2147483647,\n       -2147483647, -2147483647, -2147483647, -2147483647, -2147483647,\n       -2147483647, -2147483647, -2147483647, -2147483647, -2147483647,\n       -2147483647, -2147483647, -2147483647, -2147483647, -2147483647,\n       -2147483647, -2147483647, -2147483647, -2147483647, -2147483647,\n       -2147483647, -2147483647, -2147483647, -2147483647, -2147483647,\n       -2147483647, -2147483647, -2147483647, -2147483647, -2147483647,\n       -2147483647, -2147483647, -2147483647, -2147483647, -2147483647,\n       -2147483647, -2147483647, -2147483647, -2147483647, -2147483647,\n       -2147483647, -2147483647, -2147483647, -2147483647, -2147483647,\n       -2147483647, -2147483647, -2147483647, -2147483647, -2147483647,\n       -2147483647, -2147483647, -2147483647, -2147483647, -2147483647,\n       -2147483647, -2147483647, -2147483647, -2147483647, -2147483647,\n       -2147483647, -2147483647, -2147483647, -2147483647, -2147483647,\n       -2147483647, -2147483647, -2147483647, -2147483647, -2147483647,\n       -2147483647], dtype=int32)\n\n\nsla\n\n\n(time, latitude, longitude)\n\n\nfloat64\n\n\ndask.array&lt;chunksize=(31, 81, 81), meta=np.ndarray&gt;\n\n\n\n\nancillary_variables :\n\nerr_sla\n\ncomment :\n\nThe sea level anomaly is the sea surface height above mean sea surface; it is referenced to the [1993, 2012] period; see the product user manual for details\n\ngrid_mapping :\n\ncrs\n\nlong_name :\n\nSea level anomaly\n\nstandard_name :\n\nsea_surface_height_above_sea_level\n\nunits :\n\nm\n\n_ChunkSizes :\n\n[ 1 50 50]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n36.59 MiB\n1.55 MiB\n\n\nShape\n(731, 81, 81)\n(31, 81, 81)\n\n\nDask graph\n24 chunks in 49 graph layers\n\n\nData type\nfloat64 numpy.ndarray\n\n\n\n\n\n\n\n\nAttributes: (92)lon_step :0.041666668keywords :EARTH SCIENCE &gt; OCEANS &gt; OCEAN CHEMISTRY &gt; CHLOROPHYLLcmems_product_id :OCEANCOLOUR_GLO_BGC_L4_MY_009_104lat_step :0.041666668grid_mapping :Equirectangulartitle :cmems_obs-oc_glo_bgc-plankton_my_l4-gapfree-multi-4km_P1Dperiod_end_day :20230701duration_time :PT149454Sstandard_name_vocabulary :NetCDF Climate and Forecast (CF) Metadata Conventionnb_equ_bins :8640geospatial_bounds :POLYGON ((90.000000 -180.000000, 90.000000 180.000000, -90.000000 180.000000, -90.000000 -180.000000, 90.000000 -180.000000))overall_quality :mode=myintDPM_reference :GC-UD-ACRI-PUGstop_date :2023-07-02 UTCtime_coverage_start :2023-06-30T15:15:06Zgrid_resolution :4.6383123sensor_name :MODISA,VIIRSN,OLCIa,VIIRSJ1,OLCIbsummary :CMEMS product: cmems_obs-oc_glo_bgc-plankton_my_l4-gapfree-multi-4km_P1D,  generated by ACRI-STwesternmost_valid_longitude :-180.0source :surface observationpct_bins :100.0distribution_statement :See CMEMS Data Licensegeospatial_bounds_crs :EPSG:4326parameter_code :CHLcreation_time :01:28:25 UTCsoftware_name :globcolour_l3_reprojectcreation_date :2023-07-09 UTCConventions :CF-1.8, ACDD-1.3sensor :Moderate Resolution Imaging Spectroradiometer,Visible Infrared Imaging Radiometer Suite,Ocean and Land Colour Instrumenttime_coverage_duration :PT149454Skeywords_vocabulary :NASA Global Change Master Directory (GCMD) Science Keywordssouthernmost_valid_latitude :-53.04167license :See CMEMS Data Licensecomment :averagetime_coverage_resolution :P1Dgeospatial_vertical_max :0references :http://www.globcolour.info GlobColour has been originally funded by ESA with data from ESA, NASA, NOAA and GeoEye. This version has received funding from the European Community s Seventh Framework Programme ([FP7/2007-2013]) under grant agreement n. 282723 [OSS2015 project].registration :5nb_grid_bins :37324800geospatial_lat_max :25.020832061767578publication :Gohin, F., Druon, J. N., Lampert, L. (2002). A five channel chlorophyll concentration algorithm applied to SeaWiFS data processed by SeaDAS in coastal waters. International journal of remote sensing, 23(8), 1639-1661 + Hu, C., Lee, Z., Franz, B. (2012). Chlorophyll a algorithms for oligotrophic oceans: A novel approach based on three-band reflectance difference. Journal of Geophysical Research, 117(C1). doi: 10.1029/2011jc007395platform :Aqua,Suomi-NPP,Sentinel-3a,JPSS-1 (NOAA-20),Sentinel-3bnorthernmost_valid_latitude :88.75northernmost_latitude :90.0IODD_reference :GC-UD-ACRI-PUGstart_date :2023-06-30 UTCprocessing_level :L4product_level :4citation :The Licensees will ensure that original CMEMS products - or value added products or derivative works developed from CMEMS Products including publications and pictures - shall credit CMEMS by explicitly making mention of the originator (CMEMS) in the  following manner:  &lt;Generated using CMEMS Products, production centre ACRI-ST&gt;software_version :2022.2creator_email :servicedesk.cmems@acri-st.frnb_bins :37324800easternmost_valid_longitude :180.00002geospatial_lat_min :5.0208306312561035institution :ACRIgeospatial_lon_max :79.97917175292969geospatial_lon_min :59.97917556762695acknowledgement :The Licensees will ensure that original CMEMS products - or value added products or derivative works developed from CMEMS Products including publications and pictures - shall credit CMEMS by explicitly making mention of the originator (CMEMS) in the  following manner:  &lt;Generated using CMEMS Products, production centre ACRI-ST&gt;project :CMEMSfile_quality_index :0southernmost_latitude :-90.0period_duration_day :P1Dhistory :Created using software developed at ACRI-STsite_name :GLOgeospatial_bounds_vertical_crs :EPSG:5829easternmost_longitude :180.0publisher_name :CMEMSid :20230701_cmems_obs-oc_glo_bgc-plankton_myint_l4-gapfree-multi-4km_P1Dnaming_authority :CMEMSearth_radius :6378.137netcdf_version_id :4.3.3.1 of Jul  8 2016 18:15:50 $stop_time :08:45:59 UTCpublisher_url :http://marine.copernicus.euparameter :Chlorophyll-a concentrationstart_time :15:15:06 UTCcmems_production_unit :OC-ACRI-NICE-FRperiod_start_day :20230701publisher_email :servicedesk.cmems@mercator-ocean.eugeospatial_vertical_min :0creator_url :http://marine.copernicus.eusensor_name_list :MOD,VIR,OLA,VJ1,OLBproduct_type :daycreator_name :ACRItime_coverage_end :2023-07-02T08:45:59Zproduct_name :20230701_cmems_obs-oc_glo_bgc-plankton_myint_l4-gapfree-multi-4km_P1Dcontact :servicedesk.cmems@acri-st.frwesternmost_longitude :-180.0geospatial_vertical_positive :update_created :2023-07-09T01:28:25Znb_valid_bins :18891348pct_valid_bins :50.61339377572016History :Translated to CF-1.0 Conventions by Netcdf-Java CDM (CFGridWriter2)\nOriginal Dataset = cmems_obs-oc_glo_bgc-plankton_my_l4-gapfree-multi-4km_P1D; Translation Date = 2023-07-10T07:32:34.880Z\n\n\n\nCHL_interp = motu[['CHL', 'CHL_uncertainty']].interp_like(era5)\n\n\n# rename before interpolation\nSLA_interp = motu[['sla', 'adt']].rename({'latitude': 'lat', 'longitude': 'lon'})\n\n\nSLA_interp = SLA_interp.interp_like(era5)\nSLA_interp\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:  (time: 731, lat: 81, lon: 81)\nCoordinates:\n  * time     (time) datetime64[ns] 2000-01-01 2000-01-02 ... 2001-12-31\n  * lon      (lon) float32 60.0 60.25 60.5 60.75 61.0 ... 79.25 79.5 79.75 80.0\n  * lat      (lat) float32 25.0 24.75 24.5 24.25 24.0 ... 6.0 5.75 5.5 5.25 5.0\nData variables:\n    sla      (time, lat, lon) float64 dask.array&lt;chunksize=(731, 81, 81), meta=np.ndarray&gt;\n    adt      (time, lat, lon) float64 dask.array&lt;chunksize=(731, 81, 81), meta=np.ndarray&gt;\nAttributes: (12/92)\n    lon_step:                        0.041666668\n    keywords:                        EARTH SCIENCE &gt; OCEANS &gt; OCEAN CHEMISTRY...\n    cmems_product_id:                OCEANCOLOUR_GLO_BGC_L4_MY_009_104\n    lat_step:                        0.041666668\n    grid_mapping:                    Equirectangular\n    title:                           cmems_obs-oc_glo_bgc-plankton_my_l4-gapf...\n    ...                              ...\n    westernmost_longitude:           -180.0\n    geospatial_vertical_positive:    up\n    date_created:                    2023-07-09T01:28:25Z\n    nb_valid_bins:                   18891348\n    pct_valid_bins:                  50.61339377572016\n    History:                         Translated to CF-1.0 Conventions by Netc...xarray.DatasetDimensions:time: 731lat: 81lon: 81Coordinates: (3)time(time)datetime64[ns]2000-01-01 ... 2001-12-31standard_name :timecoverage_content_type :coordinatelong_name :reference timeaxis :Tvalid_min :0.0valid_max :401767.0_ChunkSizes :1_CoordinateAxisType :Timearray(['2000-01-01T00:00:00.000000000', '2000-01-02T00:00:00.000000000',\n       '2000-01-03T00:00:00.000000000', ..., '2001-12-29T00:00:00.000000000',\n       '2001-12-30T00:00:00.000000000', '2001-12-31T00:00:00.000000000'],\n      dtype='datetime64[ns]')lon(lon)float3260.0 60.25 60.5 ... 79.5 79.75 80.0axis :Xbounds :lon_bndslong_name :Longitudestandard_name :longitudeunits :degrees_eastvalid_max :79.875valid_min :59.875_ChunkSizes :50_CoordinateAxisType :Lonarray([60.  , 60.25, 60.5 , 60.75, 61.  , 61.25, 61.5 , 61.75, 62.  , 62.25,\n       62.5 , 62.75, 63.  , 63.25, 63.5 , 63.75, 64.  , 64.25, 64.5 , 64.75,\n       65.  , 65.25, 65.5 , 65.75, 66.  , 66.25, 66.5 , 66.75, 67.  , 67.25,\n       67.5 , 67.75, 68.  , 68.25, 68.5 , 68.75, 69.  , 69.25, 69.5 , 69.75,\n       70.  , 70.25, 70.5 , 70.75, 71.  , 71.25, 71.5 , 71.75, 72.  , 72.25,\n       72.5 , 72.75, 73.  , 73.25, 73.5 , 73.75, 74.  , 74.25, 74.5 , 74.75,\n       75.  , 75.25, 75.5 , 75.75, 76.  , 76.25, 76.5 , 76.75, 77.  , 77.25,\n       77.5 , 77.75, 78.  , 78.25, 78.5 , 78.75, 79.  , 79.25, 79.5 , 79.75,\n       80.  ], dtype=float32)lat(lat)float3225.0 24.75 24.5 ... 5.5 5.25 5.0axis :Ybounds :lat_bndslong_name :Latitudestandard_name :latitudeunits :degrees_northvalid_max :24.875valid_min :4.875_ChunkSizes :50_CoordinateAxisType :Latarray([25.  , 24.75, 24.5 , 24.25, 24.  , 23.75, 23.5 , 23.25, 23.  , 22.75,\n       22.5 , 22.25, 22.  , 21.75, 21.5 , 21.25, 21.  , 20.75, 20.5 , 20.25,\n       20.  , 19.75, 19.5 , 19.25, 19.  , 18.75, 18.5 , 18.25, 18.  , 17.75,\n       17.5 , 17.25, 17.  , 16.75, 16.5 , 16.25, 16.  , 15.75, 15.5 , 15.25,\n       15.  , 14.75, 14.5 , 14.25, 14.  , 13.75, 13.5 , 13.25, 13.  , 12.75,\n       12.5 , 12.25, 12.  , 11.75, 11.5 , 11.25, 11.  , 10.75, 10.5 , 10.25,\n       10.  ,  9.75,  9.5 ,  9.25,  9.  ,  8.75,  8.5 ,  8.25,  8.  ,  7.75,\n        7.5 ,  7.25,  7.  ,  6.75,  6.5 ,  6.25,  6.  ,  5.75,  5.5 ,  5.25,\n        5.  ], dtype=float32)Data variables: (2)sla(time, lat, lon)float64dask.array&lt;chunksize=(731, 81, 81), meta=np.ndarray&gt;ancillary_variables :err_slacomment :The sea level anomaly is the sea surface height above mean sea surface; it is referenced to the [1993, 2012] period; see the product user manual for detailsgrid_mapping :crslong_name :Sea level anomalystandard_name :sea_surface_height_above_sea_levelunits :m_ChunkSizes :[ 1 50 50]\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n36.59 MiB\n36.59 MiB\n\n\nShape\n(731, 81, 81)\n(731, 81, 81)\n\n\nDask graph\n1 chunks in 69 graph layers\n\n\nData type\nfloat64 numpy.ndarray\n\n\n\n\n\n\n\n\nadt\n\n\n(time, lat, lon)\n\n\nfloat64\n\n\ndask.array&lt;chunksize=(731, 81, 81), meta=np.ndarray&gt;\n\n\n\n\ncomment :\n\nThe absolute dynamic topography is the sea surface height above geoid; the adt is obtained as follows: adt=sla+mdt where mdt is the mean dynamic topography; see the product user manual for details\n\ngrid_mapping :\n\ncrs\n\nlong_name :\n\nAbsolute dynamic topography\n\nstandard_name :\n\nsea_surface_height_above_geoid\n\nunits :\n\nm\n\n_ChunkSizes :\n\n[ 1 50 50]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n36.59 MiB\n36.59 MiB\n\n\nShape\n(731, 81, 81)\n(731, 81, 81)\n\n\nDask graph\n1 chunks in 69 graph layers\n\n\nData type\nfloat64 numpy.ndarray\n\n\n\n\n\n\n\n\nAttributes: (92)lon_step :0.041666668keywords :EARTH SCIENCE &gt; OCEANS &gt; OCEAN CHEMISTRY &gt; CHLOROPHYLLcmems_product_id :OCEANCOLOUR_GLO_BGC_L4_MY_009_104lat_step :0.041666668grid_mapping :Equirectangulartitle :cmems_obs-oc_glo_bgc-plankton_my_l4-gapfree-multi-4km_P1Dperiod_end_day :20230701duration_time :PT149454Sstandard_name_vocabulary :NetCDF Climate and Forecast (CF) Metadata Conventionnb_equ_bins :8640geospatial_bounds :POLYGON ((90.000000 -180.000000, 90.000000 180.000000, -90.000000 180.000000, -90.000000 -180.000000, 90.000000 -180.000000))overall_quality :mode=myintDPM_reference :GC-UD-ACRI-PUGstop_date :2023-07-02 UTCtime_coverage_start :2023-06-30T15:15:06Zgrid_resolution :4.6383123sensor_name :MODISA,VIIRSN,OLCIa,VIIRSJ1,OLCIbsummary :CMEMS product: cmems_obs-oc_glo_bgc-plankton_my_l4-gapfree-multi-4km_P1D,  generated by ACRI-STwesternmost_valid_longitude :-180.0source :surface observationpct_bins :100.0distribution_statement :See CMEMS Data Licensegeospatial_bounds_crs :EPSG:4326parameter_code :CHLcreation_time :01:28:25 UTCsoftware_name :globcolour_l3_reprojectcreation_date :2023-07-09 UTCConventions :CF-1.8, ACDD-1.3sensor :Moderate Resolution Imaging Spectroradiometer,Visible Infrared Imaging Radiometer Suite,Ocean and Land Colour Instrumenttime_coverage_duration :PT149454Skeywords_vocabulary :NASA Global Change Master Directory (GCMD) Science Keywordssouthernmost_valid_latitude :-53.04167license :See CMEMS Data Licensecomment :averagetime_coverage_resolution :P1Dgeospatial_vertical_max :0references :http://www.globcolour.info GlobColour has been originally funded by ESA with data from ESA, NASA, NOAA and GeoEye. This version has received funding from the European Community s Seventh Framework Programme ([FP7/2007-2013]) under grant agreement n. 282723 [OSS2015 project].registration :5nb_grid_bins :37324800geospatial_lat_max :25.020832061767578publication :Gohin, F., Druon, J. N., Lampert, L. (2002). A five channel chlorophyll concentration algorithm applied to SeaWiFS data processed by SeaDAS in coastal waters. International journal of remote sensing, 23(8), 1639-1661 + Hu, C., Lee, Z., Franz, B. (2012). Chlorophyll a algorithms for oligotrophic oceans: A novel approach based on three-band reflectance difference. Journal of Geophysical Research, 117(C1). doi: 10.1029/2011jc007395platform :Aqua,Suomi-NPP,Sentinel-3a,JPSS-1 (NOAA-20),Sentinel-3bnorthernmost_valid_latitude :88.75northernmost_latitude :90.0IODD_reference :GC-UD-ACRI-PUGstart_date :2023-06-30 UTCprocessing_level :L4product_level :4citation :The Licensees will ensure that original CMEMS products - or value added products or derivative works developed from CMEMS Products including publications and pictures - shall credit CMEMS by explicitly making mention of the originator (CMEMS) in the  following manner:  &lt;Generated using CMEMS Products, production centre ACRI-ST&gt;software_version :2022.2creator_email :servicedesk.cmems@acri-st.frnb_bins :37324800easternmost_valid_longitude :180.00002geospatial_lat_min :5.0208306312561035institution :ACRIgeospatial_lon_max :79.97917175292969geospatial_lon_min :59.97917556762695acknowledgement :The Licensees will ensure that original CMEMS products - or value added products or derivative works developed from CMEMS Products including publications and pictures - shall credit CMEMS by explicitly making mention of the originator (CMEMS) in the  following manner:  &lt;Generated using CMEMS Products, production centre ACRI-ST&gt;project :CMEMSfile_quality_index :0southernmost_latitude :-90.0period_duration_day :P1Dhistory :Created using software developed at ACRI-STsite_name :GLOgeospatial_bounds_vertical_crs :EPSG:5829easternmost_longitude :180.0publisher_name :CMEMSid :20230701_cmems_obs-oc_glo_bgc-plankton_myint_l4-gapfree-multi-4km_P1Dnaming_authority :CMEMSearth_radius :6378.137netcdf_version_id :4.3.3.1 of Jul  8 2016 18:15:50 $stop_time :08:45:59 UTCpublisher_url :http://marine.copernicus.euparameter :Chlorophyll-a concentrationstart_time :15:15:06 UTCcmems_production_unit :OC-ACRI-NICE-FRperiod_start_day :20230701publisher_email :servicedesk.cmems@mercator-ocean.eugeospatial_vertical_min :0creator_url :http://marine.copernicus.eusensor_name_list :MOD,VIR,OLA,VJ1,OLBproduct_type :daycreator_name :ACRItime_coverage_end :2023-07-02T08:45:59Zproduct_name :20230701_cmems_obs-oc_glo_bgc-plankton_myint_l4-gapfree-multi-4km_P1Dcontact :servicedesk.cmems@acri-st.frwesternmost_longitude :-180.0geospatial_vertical_positive :update_created :2023-07-09T01:28:25Znb_valid_bins :18891348pct_valid_bins :50.61339377572016History :Translated to CF-1.0 Conventions by Netcdf-Java CDM (CFGridWriter2)\nOriginal Dataset = cmems_obs-oc_glo_bgc-plankton_my_l4-gapfree-multi-4km_P1D; Translation Date = 2023-07-10T07:32:34.880Z\n\n\n\nCHL_interp\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:          (time: 731, lat: 81, lon: 81)\nCoordinates:\n  * time             (time) datetime64[ns] 2000-01-01T11:30:00 ... 2001-12-31...\n  * lon              (lon) float32 60.0 60.25 60.5 60.75 ... 79.5 79.75 80.0\n  * lat              (lat) float32 25.0 24.75 24.5 24.25 ... 5.75 5.5 5.25 5.0\nData variables:\n    CHL              (time, lat, lon) float32 dask.array&lt;chunksize=(731, 81, 81), meta=np.ndarray&gt;\n    CHL_uncertainty  (time, lat, lon) float32 dask.array&lt;chunksize=(731, 81, 81), meta=np.ndarray&gt;\nAttributes: (12/92)\n    lon_step:                        0.041666668\n    keywords:                        EARTH SCIENCE &gt; OCEANS &gt; OCEAN CHEMISTRY...\n    cmems_product_id:                OCEANCOLOUR_GLO_BGC_L4_MY_009_104\n    lat_step:                        0.041666668\n    grid_mapping:                    Equirectangular\n    title:                           cmems_obs-oc_glo_bgc-plankton_my_l4-gapf...\n    ...                              ...\n    westernmost_longitude:           -180.0\n    geospatial_vertical_positive:    up\n    date_created:                    2023-07-09T01:28:25Z\n    nb_valid_bins:                   18891348\n    pct_valid_bins:                  50.61339377572016\n    History:                         Translated to CF-1.0 Conventions by Netc...xarray.DatasetDimensions:time: 731lat: 81lon: 81Coordinates: (3)time(time)datetime64[ns]2000-01-01T11:30:00 ... 2001-12-...standard_name :timecoverage_content_type :coordinatelong_name :reference timeaxis :Tvalid_min :0.0valid_max :401767.0_ChunkSizes :1_CoordinateAxisType :Timearray(['2000-01-01T11:30:00.000000000', '2000-01-02T11:30:00.000000000',\n       '2000-01-03T11:30:00.000000000', ..., '2001-12-29T11:30:00.000000000',\n       '2001-12-30T11:30:00.000000000', '2001-12-31T11:30:00.000000000'],\n      dtype='datetime64[ns]')lon(lon)float3260.0 60.25 60.5 ... 79.5 79.75 80.0long_name :longitudeunits :degrees_eastaxis :Xstandard_name :longitudecoverage_content_type :coordinatevalid_min :-180.0valid_max :180.0_ChunkSizes :8640_CoordinateAxisType :Lonarray([60.  , 60.25, 60.5 , 60.75, 61.  , 61.25, 61.5 , 61.75, 62.  , 62.25,\n       62.5 , 62.75, 63.  , 63.25, 63.5 , 63.75, 64.  , 64.25, 64.5 , 64.75,\n       65.  , 65.25, 65.5 , 65.75, 66.  , 66.25, 66.5 , 66.75, 67.  , 67.25,\n       67.5 , 67.75, 68.  , 68.25, 68.5 , 68.75, 69.  , 69.25, 69.5 , 69.75,\n       70.  , 70.25, 70.5 , 70.75, 71.  , 71.25, 71.5 , 71.75, 72.  , 72.25,\n       72.5 , 72.75, 73.  , 73.25, 73.5 , 73.75, 74.  , 74.25, 74.5 , 74.75,\n       75.  , 75.25, 75.5 , 75.75, 76.  , 76.25, 76.5 , 76.75, 77.  , 77.25,\n       77.5 , 77.75, 78.  , 78.25, 78.5 , 78.75, 79.  , 79.25, 79.5 , 79.75,\n       80.  ], dtype=float32)lat(lat)float3225.0 24.75 24.5 ... 5.5 5.25 5.0long_name :latitudeunits :degrees_northaxis :Ystandard_name :latitudecoverage_content_type :coordinatevalid_min :-90.0valid_max :90.0_ChunkSizes :4320_CoordinateAxisType :Latarray([25.  , 24.75, 24.5 , 24.25, 24.  , 23.75, 23.5 , 23.25, 23.  , 22.75,\n       22.5 , 22.25, 22.  , 21.75, 21.5 , 21.25, 21.  , 20.75, 20.5 , 20.25,\n       20.  , 19.75, 19.5 , 19.25, 19.  , 18.75, 18.5 , 18.25, 18.  , 17.75,\n       17.5 , 17.25, 17.  , 16.75, 16.5 , 16.25, 16.  , 15.75, 15.5 , 15.25,\n       15.  , 14.75, 14.5 , 14.25, 14.  , 13.75, 13.5 , 13.25, 13.  , 12.75,\n       12.5 , 12.25, 12.  , 11.75, 11.5 , 11.25, 11.  , 10.75, 10.5 , 10.25,\n       10.  ,  9.75,  9.5 ,  9.25,  9.  ,  8.75,  8.5 ,  8.25,  8.  ,  7.75,\n        7.5 ,  7.25,  7.  ,  6.75,  6.5 ,  6.25,  6.  ,  5.75,  5.5 ,  5.25,\n        5.  ], dtype=float32)Data variables: (2)CHL(time, lat, lon)float32dask.array&lt;chunksize=(731, 81, 81), meta=np.ndarray&gt;input_files_reprocessings :Processors versions: MODIS R2022.0NRT/VIIRSN R2022.0NRT/OLCIA 07.02/VIIRSJ1 R2022.0NRT/OLCIB 07.02type :surfaceancillary_variables :flags CHL_uncertaintystandard_name :mass_concentration_of_chlorophyll_a_in_sea_waterlong_name :Chlorophyll-a concentration - Mean of the binned pixelsvalid_min :0.0units :milligram m-3coverage_content_type :modelResultvalid_max :1000.0_ChunkSizes :[  1 256 256]\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n18.30 MiB\n18.30 MiB\n\n\nShape\n(731, 81, 81)\n(731, 81, 81)\n\n\nDask graph\n1 chunks in 81 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\nCHL_uncertainty\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(731, 81, 81), meta=np.ndarray&gt;\n\n\n\n\nlong_name :\n\nChlorophyll-a concentration - Uncertainty estimation\n\nvalid_min :\n\n0\n\nunits :\n\n%\n\ncoverage_content_type :\n\nqualityInformation\n\nvalid_max :\n\n32767\n\n_ChunkSizes :\n\n[ 1 256 256]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n18.30 MiB\n18.30 MiB\n\n\nShape\n(731, 81, 81)\n(731, 81, 81)\n\n\nDask graph\n1 chunks in 81 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\nAttributes: (92)lon_step :0.041666668keywords :EARTH SCIENCE &gt; OCEANS &gt; OCEAN CHEMISTRY &gt; CHLOROPHYLLcmems_product_id :OCEANCOLOUR_GLO_BGC_L4_MY_009_104lat_step :0.041666668grid_mapping :Equirectangulartitle :cmems_obs-oc_glo_bgc-plankton_my_l4-gapfree-multi-4km_P1Dperiod_end_day :20230701duration_time :PT149454Sstandard_name_vocabulary :NetCDF Climate and Forecast (CF) Metadata Conventionnb_equ_bins :8640geospatial_bounds :POLYGON ((90.000000 -180.000000, 90.000000 180.000000, -90.000000 180.000000, -90.000000 -180.000000, 90.000000 -180.000000))overall_quality :mode=myintDPM_reference :GC-UD-ACRI-PUGstop_date :2023-07-02 UTCtime_coverage_start :2023-06-30T15:15:06Zgrid_resolution :4.6383123sensor_name :MODISA,VIIRSN,OLCIa,VIIRSJ1,OLCIbsummary :CMEMS product: cmems_obs-oc_glo_bgc-plankton_my_l4-gapfree-multi-4km_P1D,  generated by ACRI-STwesternmost_valid_longitude :-180.0source :surface observationpct_bins :100.0distribution_statement :See CMEMS Data Licensegeospatial_bounds_crs :EPSG:4326parameter_code :CHLcreation_time :01:28:25 UTCsoftware_name :globcolour_l3_reprojectcreation_date :2023-07-09 UTCConventions :CF-1.8, ACDD-1.3sensor :Moderate Resolution Imaging Spectroradiometer,Visible Infrared Imaging Radiometer Suite,Ocean and Land Colour Instrumenttime_coverage_duration :PT149454Skeywords_vocabulary :NASA Global Change Master Directory (GCMD) Science Keywordssouthernmost_valid_latitude :-53.04167license :See CMEMS Data Licensecomment :averagetime_coverage_resolution :P1Dgeospatial_vertical_max :0references :http://www.globcolour.info GlobColour has been originally funded by ESA with data from ESA, NASA, NOAA and GeoEye. This version has received funding from the European Community s Seventh Framework Programme ([FP7/2007-2013]) under grant agreement n. 282723 [OSS2015 project].registration :5nb_grid_bins :37324800geospatial_lat_max :25.020832061767578publication :Gohin, F., Druon, J. N., Lampert, L. (2002). A five channel chlorophyll concentration algorithm applied to SeaWiFS data processed by SeaDAS in coastal waters. International journal of remote sensing, 23(8), 1639-1661 + Hu, C., Lee, Z., Franz, B. (2012). Chlorophyll a algorithms for oligotrophic oceans: A novel approach based on three-band reflectance difference. Journal of Geophysical Research, 117(C1). doi: 10.1029/2011jc007395platform :Aqua,Suomi-NPP,Sentinel-3a,JPSS-1 (NOAA-20),Sentinel-3bnorthernmost_valid_latitude :88.75northernmost_latitude :90.0IODD_reference :GC-UD-ACRI-PUGstart_date :2023-06-30 UTCprocessing_level :L4product_level :4citation :The Licensees will ensure that original CMEMS products - or value added products or derivative works developed from CMEMS Products including publications and pictures - shall credit CMEMS by explicitly making mention of the originator (CMEMS) in the  following manner:  &lt;Generated using CMEMS Products, production centre ACRI-ST&gt;software_version :2022.2creator_email :servicedesk.cmems@acri-st.frnb_bins :37324800easternmost_valid_longitude :180.00002geospatial_lat_min :5.0208306312561035institution :ACRIgeospatial_lon_max :79.97917175292969geospatial_lon_min :59.97917556762695acknowledgement :The Licensees will ensure that original CMEMS products - or value added products or derivative works developed from CMEMS Products including publications and pictures - shall credit CMEMS by explicitly making mention of the originator (CMEMS) in the  following manner:  &lt;Generated using CMEMS Products, production centre ACRI-ST&gt;project :CMEMSfile_quality_index :0southernmost_latitude :-90.0period_duration_day :P1Dhistory :Created using software developed at ACRI-STsite_name :GLOgeospatial_bounds_vertical_crs :EPSG:5829easternmost_longitude :180.0publisher_name :CMEMSid :20230701_cmems_obs-oc_glo_bgc-plankton_myint_l4-gapfree-multi-4km_P1Dnaming_authority :CMEMSearth_radius :6378.137netcdf_version_id :4.3.3.1 of Jul  8 2016 18:15:50 $stop_time :08:45:59 UTCpublisher_url :http://marine.copernicus.euparameter :Chlorophyll-a concentrationstart_time :15:15:06 UTCcmems_production_unit :OC-ACRI-NICE-FRperiod_start_day :20230701publisher_email :servicedesk.cmems@mercator-ocean.eugeospatial_vertical_min :0creator_url :http://marine.copernicus.eusensor_name_list :MOD,VIR,OLA,VJ1,OLBproduct_type :daycreator_name :ACRItime_coverage_end :2023-07-02T08:45:59Zproduct_name :20230701_cmems_obs-oc_glo_bgc-plankton_myint_l4-gapfree-multi-4km_P1Dcontact :servicedesk.cmems@acri-st.frwesternmost_longitude :-180.0geospatial_vertical_positive :update_created :2023-07-09T01:28:25Znb_valid_bins :18891348pct_valid_bins :50.61339377572016History :Translated to CF-1.0 Conventions by Netcdf-Java CDM (CFGridWriter2)\nOriginal Dataset = cmems_obs-oc_glo_bgc-plankton_my_l4-gapfree-multi-4km_P1D; Translation Date = 2023-07-10T07:32:34.880Z"
  },
  {
    "objectID": "python-notebooks/04_Combining_Data.html#combine-files-together",
    "href": "python-notebooks/04_Combining_Data.html#combine-files-together",
    "title": "Combine, clean, and export the data",
    "section": "Combine files together",
    "text": "Combine files together\nDue to different attributes in each dataset coordinates, we cannot combine all datasets together by coords by simply using the combine_by_coords() function in xarray. Issue is replicated below:\n\nfinal_ds = xr.combine_by_coords([CHL_interp, SLA_interp, currents_interp, era5])\n\nMergeError: combine_attrs='no_conflicts', but some values are not the same. Merging {'lon_step': 0.041666668, 'keywords': 'EARTH SCIENCE &gt; OCEANS &gt; OCEAN CHEMISTRY &gt; CHLOROPHYLL', 'cmems_product_id': 'OCEANCOLOUR_GLO_BGC_L4_MY_009_104', 'lat_step': 0.041666668, 'grid_mapping': 'Equirectangular', 'title': 'cmems_obs-oc_glo_bgc-plankton_my_l4-gapfree-multi-4km_P1D', 'period_end_day': '20230701', 'duration_time': 'PT149454S', 'standard_name_vocabulary': 'NetCDF Climate and Forecast (CF) Metadata Convention', 'nb_equ_bins': 8640, 'geospatial_bounds': 'POLYGON ((90.000000 -180.000000, 90.000000 180.000000, -90.000000 180.000000, -90.000000 -180.000000, 90.000000 -180.000000))', 'overall_quality': 'mode=myint', 'DPM_reference': 'GC-UD-ACRI-PUG', 'stop_date': '2023-07-02 UTC', 'time_coverage_start': '2023-06-30T15:15:06Z', 'grid_resolution': 4.6383123, 'sensor_name': 'MODISA,VIIRSN,OLCIa,VIIRSJ1,OLCIb', 'summary': 'CMEMS product: cmems_obs-oc_glo_bgc-plankton_my_l4-gapfree-multi-4km_P1D,  generated by ACRI-ST', 'westernmost_valid_longitude': -180.0, 'source': 'surface observation', 'pct_bins': 100.0, 'distribution_statement': 'See CMEMS Data License', 'geospatial_bounds_crs': 'EPSG:4326', 'parameter_code': 'CHL', 'creation_time': '01:28:25 UTC', 'software_name': 'globcolour_l3_reproject', 'creation_date': '2023-07-09 UTC', 'Conventions': 'CF-1.8, ACDD-1.3', 'sensor': 'Moderate Resolution Imaging Spectroradiometer,Visible Infrared Imaging Radiometer Suite,Ocean and Land Colour Instrument', 'time_coverage_duration': 'PT149454S', 'keywords_vocabulary': 'NASA Global Change Master Directory (GCMD) Science Keywords', 'southernmost_valid_latitude': -53.04167, 'license': 'See CMEMS Data License', 'comment': 'average', 'time_coverage_resolution': 'P1D', 'geospatial_vertical_max': 0, 'references': 'http://www.globcolour.info GlobColour has been originally funded by ESA with data from ESA, NASA, NOAA and GeoEye. This version has received funding from the European Community s Seventh Framework Programme ([FP7/2007-2013]) under grant agreement n. 282723 [OSS2015 project].', 'registration': 5, 'nb_grid_bins': 37324800, 'geospatial_lat_max': 25.020832061767578, 'publication': 'Gohin, F., Druon, J. N., Lampert, L. (2002). A five channel chlorophyll concentration algorithm applied to SeaWiFS data processed by SeaDAS in coastal waters. International journal of remote sensing, 23(8), 1639-1661 + Hu, C., Lee, Z., Franz, B. (2012). Chlorophyll a algorithms for oligotrophic oceans: A novel approach based on three-band reflectance difference. Journal of Geophysical Research, 117(C1). doi: 10.1029/2011jc007395', 'platform': 'Aqua,Suomi-NPP,Sentinel-3a,JPSS-1 (NOAA-20),Sentinel-3b', 'northernmost_valid_latitude': 88.75, 'northernmost_latitude': 90.0, 'IODD_reference': 'GC-UD-ACRI-PUG', 'start_date': '2023-06-30 UTC', 'processing_level': 'L4', 'product_level': 4, 'citation': 'The Licensees will ensure that original CMEMS products - or value added products or derivative works developed from CMEMS Products including publications and pictures - shall credit CMEMS by explicitly making mention of the originator (CMEMS) in the  following manner:  &lt;Generated using CMEMS Products, production centre ACRI-ST&gt;', 'software_version': '2022.2', 'creator_email': 'servicedesk.cmems@acri-st.fr', 'nb_bins': 37324800, 'easternmost_valid_longitude': 180.00002, 'geospatial_lat_min': 5.0208306312561035, 'institution': 'ACRI', 'geospatial_lon_max': 79.97917175292969, 'geospatial_lon_min': 59.97917556762695, 'acknowledgement': 'The Licensees will ensure that original CMEMS products - or value added products or derivative works developed from CMEMS Products including publications and pictures - shall credit CMEMS by explicitly making mention of the originator (CMEMS) in the  following manner:  &lt;Generated using CMEMS Products, production centre ACRI-ST&gt;', 'project': 'CMEMS', 'file_quality_index': 0, 'southernmost_latitude': -90.0, 'period_duration_day': 'P1D', 'history': 'Created using software developed at ACRI-ST', 'site_name': 'GLO', 'geospatial_bounds_vertical_crs': 'EPSG:5829', 'easternmost_longitude': 180.0, 'publisher_name': 'CMEMS', 'id': '20230701_cmems_obs-oc_glo_bgc-plankton_myint_l4-gapfree-multi-4km_P1D', 'naming_authority': 'CMEMS', 'earth_radius': 6378.137, 'netcdf_version_id': '4.3.3.1 of Jul  8 2016 18:15:50 $', 'stop_time': '08:45:59 UTC', 'publisher_url': 'http://marine.copernicus.eu', 'parameter': 'Chlorophyll-a concentration', 'start_time': '15:15:06 UTC', 'cmems_production_unit': 'OC-ACRI-NICE-FR', 'period_start_day': '20230701', 'publisher_email': 'servicedesk.cmems@mercator-ocean.eu', 'geospatial_vertical_min': 0, 'creator_url': 'http://marine.copernicus.eu', 'sensor_name_list': 'MOD,VIR,OLA,VJ1,OLB', 'product_type': 'day', 'creator_name': 'ACRI', 'time_coverage_end': '2023-07-02T08:45:59Z', 'product_name': '20230701_cmems_obs-oc_glo_bgc-plankton_myint_l4-gapfree-multi-4km_P1D', 'contact': 'servicedesk.cmems@acri-st.fr', 'westernmost_longitude': -180.0, 'geospatial_vertical_positive': 'up', 'date_created': '2023-07-09T01:28:25Z', 'nb_valid_bins': 18891348, 'pct_valid_bins': 50.61339377572016, 'History': 'Translated to CF-1.0 Conventions by Netcdf-Java CDM (CFGridWriter2)\\nOriginal Dataset = cmems_obs-oc_glo_bgc-plankton_my_l4-gapfree-multi-4km_P1D; Translation Date = 2023-07-10T07:32:34.880Z'} with {'source': 'Reanalysis', 'institution': 'ECMWF', 'tilte': 'ERA5 forecasts'}\n\n\nTherefore, we propose a solution for this issue. Now that we are sure that the dimension/coordinate sizes and names are identical on all variables, we am going to use only one dataset‚Äôs set of coordinates as the anchor for the final dataset, and add variables to this dataset as we go.\n\n# only applied for data that has same dimensions but different attributes\ndef combine_transposed(target_arr, list_of_objs):\n    target_dim_order = list(target_arr.dims.keys())\n    print(target_dim_order)\n    for obj in list_of_objs:\n        vars_ = [i for i in obj.data_vars]\n        obj_transposed = obj[target_dim_order+ vars_]\n        # print(obj_transposed)\n        for var in vars_:\n            print(f'Adding {var} to target dataset...')\n            target_arr[var] = (['time', 'lat', 'lon'], obj_transposed[var].values)\n    return target_arr\n\n\nfinal_ds = combine_transposed(era5, [CHL_interp, SLA_interp, currents_interp])\n\n['time', 'lat', 'lon']\nAdding CHL to target dataset...\nAdding CHL_uncertainty to target dataset...\nAdding sla to target dataset...\nAdding adt to target dataset...\nAdding u to target dataset...\nAdding v to target dataset...\nAdding ug to target dataset...\nAdding vg to target dataset..."
  },
  {
    "objectID": "python-notebooks/04_Combining_Data.html#adding-metadata-and-rename-variables",
    "href": "python-notebooks/04_Combining_Data.html#adding-metadata-and-rename-variables",
    "title": "Combine, clean, and export the data",
    "section": "Adding metadata and rename variables",
    "text": "Adding metadata and rename variables\nMetadata is one aspect we also need to address. Correct metadata is vital especially when we want to share our final dataset for others to use, or when we want to graph and feed data for other tools to work on. As we combine and process variables into the final dataset, some of the metadata may be lost, so we need to make sure that their metadata is reserved and resolve any conflict for the export process to proceed smoothly.\n\nfinal_ds = final_ds.rename({'u': 'u_curr', 'v': 'v_curr', 'ug': 'ug_curr', 'vg': 'vg_curr'})\n\n\nfinal_ds['speed'].attrs = {\n    'units': 'm s**-1',\n    'long_name': '10 metre absolute speed'\n}\n\nfinal_ds['direction'].attrs = {\n    'units': '¬∞C',\n    'long_name': '10 metre wind direction'\n}\n\nfinal_ds['CHL_uncertainty'].attrs = CHL_interp['CHL_uncertainty'].attrs\nfinal_ds['CHL'].attrs = CHL_interp['CHL'].attrs\n\nfinal_ds.u_curr.attrs = currents.u.attrs\nfinal_ds.v_curr.attrs = currents.v.attrs\nfinal_ds.ug_curr.attrs = currents.ug.attrs\nfinal_ds.vg_curr.attrs = currents.vg.attrs\n\nfinal_ds.sla.attrs = SLA_interp.sla.attrs\nfinal_ds.adt.attrs = SLA_interp.adt.attrs\nfinal_ds.time.attrs = SLA_interp.time.attrs\n\n\nfinal_ds.attrs = {\n    'title': 'Sample of Climate Data for Coastal Upwelling Machine Learning Project in Indian Ocean',\n    'summary': \"Daily mean of 0.25 x 0.25 degrees gridded data from multiple climate variables that may influence the patterns of coastal upwelling in the focused area\",\n    'creator_name': 'Minh Phan',\n    'creator_email': 'minhphan@uw.edu',\n    'creator_type': 'person',\n    'source': 'OSCAR, ERA5 Reanalysis, Copernicus Climate Change Service (C3S), Copernicus Marine Environment Monitoring Service (CMEMS)',\n    'geospatial_lat_min': float(final_ds.lat.min().values),\n    'geospatial_lat_max': float(final_ds.lat.max().values),\n    'geospatial_lat_units': 'degrees_north',\n    'geospatial_lat_resolution': 0.25,\n    'geospatial_lon_min': float(final_ds.lon.min().values),\n    'geospatial_lon_max': float(final_ds.lon.max().values),\n    'geospatial_lon_units': 'degrees_east',\n    'geospatial_lon_resolution': 0.25,\n    'time_coverage_start': '2000-01-01T00:00:00',\n    'time_coverage_end': '2002-12-31T23:59:59',\n    'date_created': datetime.today().strftime('%Y-%d-%d')\n}\n\n\nfinal_ds\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:          (time: 731, lat: 81, lon: 81)\nCoordinates:\n  * time             (time) datetime64[ns] 2000-01-01 2000-01-02 ... 2001-12-31\n  * lon              (lon) float32 60.0 60.25 60.5 60.75 ... 79.5 79.75 80.0\n  * lat              (lat) float32 25.0 24.75 24.5 24.25 ... 5.75 5.5 5.25 5.0\nData variables: (12/14)\n    air_temp         (time, lat, lon) float32 295.9 295.9 295.8 ... 299.7 299.7\n    u_wind           (time, lat, lon) float32 -4.113 -4.231 -4.331 ... nan nan\n    v_wind           (time, lat, lon) float32 0.95 0.8631 0.7149 ... nan nan nan\n    sst              (time, lat, lon) float32 297.7 297.8 297.8 ... nan nan nan\n    speed            (time, lat, lon) float32 4.488 4.625 4.767 ... nan nan nan\n    direction        (time, lat, lon) float32 33.59 19.3 5.515 ... nan nan nan\n    ...               ...\n    sla              (time, lat, lon) float64 nan nan nan ... 0.1047 0.1042 nan\n    adt              (time, lat, lon) float64 nan nan nan ... 0.9005 0.9016 nan\n    u_curr           (time, lat, lon) float64 -0.2163 -0.1152 ... -0.7386\n    v_curr           (time, lat, lon) float64 0.1758 0.1223 ... 0.1429 0.1075\n    ug_curr          (time, lat, lon) float64 -0.2121 -0.1098 ... -0.5703\n    vg_curr          (time, lat, lon) float64 0.1709 0.1173 ... -0.003819\nAttributes: (12/17)\n    title:                      Sample of Climate Data for Coastal Upwelling ...\n    summary:                    Daily mean of 0.25 x 0.25 degrees gridded dat...\n    creator_name:               Minh Phan\n    creator_email:              minhphan@uw.edu\n    creator_type:               person\n    source:                     OSCAR, ERA5 Reanalysis, Copernicus Climate Ch...\n    ...                         ...\n    geospatial_lon_max:         80.0\n    geospatial_lon_units:       degrees_east\n    geospatial_lon_resolution:  0.25\n    time_coverage_start:        2000-01-01T00:00:00\n    time_coverage_end:          2002-12-31T23:59:59\n    date_created:               2023-11-11xarray.DatasetDimensions:time: 731lat: 81lon: 81Coordinates: (3)time(time)datetime64[ns]2000-01-01 ... 2001-12-31standard_name :timecoverage_content_type :coordinatelong_name :reference timeaxis :Tvalid_min :0.0valid_max :401767.0_ChunkSizes :1_CoordinateAxisType :Timearray(['2000-01-01T00:00:00.000000000', '2000-01-02T00:00:00.000000000',\n       '2000-01-03T00:00:00.000000000', ..., '2001-12-29T00:00:00.000000000',\n       '2001-12-30T00:00:00.000000000', '2001-12-31T00:00:00.000000000'],\n      dtype='datetime64[ns]')lon(lon)float3260.0 60.25 60.5 ... 79.5 79.75 80.0standard_name :longitudelong_name :longitudeunits :degrees_eastarray([60.  , 60.25, 60.5 , 60.75, 61.  , 61.25, 61.5 , 61.75, 62.  , 62.25,\n       62.5 , 62.75, 63.  , 63.25, 63.5 , 63.75, 64.  , 64.25, 64.5 , 64.75,\n       65.  , 65.25, 65.5 , 65.75, 66.  , 66.25, 66.5 , 66.75, 67.  , 67.25,\n       67.5 , 67.75, 68.  , 68.25, 68.5 , 68.75, 69.  , 69.25, 69.5 , 69.75,\n       70.  , 70.25, 70.5 , 70.75, 71.  , 71.25, 71.5 , 71.75, 72.  , 72.25,\n       72.5 , 72.75, 73.  , 73.25, 73.5 , 73.75, 74.  , 74.25, 74.5 , 74.75,\n       75.  , 75.25, 75.5 , 75.75, 76.  , 76.25, 76.5 , 76.75, 77.  , 77.25,\n       77.5 , 77.75, 78.  , 78.25, 78.5 , 78.75, 79.  , 79.25, 79.5 , 79.75,\n       80.  ], dtype=float32)lat(lat)float3225.0 24.75 24.5 ... 5.5 5.25 5.0standard_name :latitudelong_name :latitudeunits :degrees_northarray([25.  , 24.75, 24.5 , 24.25, 24.  , 23.75, 23.5 , 23.25, 23.  , 22.75,\n       22.5 , 22.25, 22.  , 21.75, 21.5 , 21.25, 21.  , 20.75, 20.5 , 20.25,\n       20.  , 19.75, 19.5 , 19.25, 19.  , 18.75, 18.5 , 18.25, 18.  , 17.75,\n       17.5 , 17.25, 17.  , 16.75, 16.5 , 16.25, 16.  , 15.75, 15.5 , 15.25,\n       15.  , 14.75, 14.5 , 14.25, 14.  , 13.75, 13.5 , 13.25, 13.  , 12.75,\n       12.5 , 12.25, 12.  , 11.75, 11.5 , 11.25, 11.  , 10.75, 10.5 , 10.25,\n       10.  ,  9.75,  9.5 ,  9.25,  9.  ,  8.75,  8.5 ,  8.25,  8.  ,  7.75,\n        7.5 ,  7.25,  7.  ,  6.75,  6.5 ,  6.25,  6.  ,  5.75,  5.5 ,  5.25,\n        5.  ], dtype=float32)Data variables: (14)air_temp(time, lat, lon)float32295.9 295.9 295.8 ... 299.7 299.7standard_name :air_temperatureunits :Klong_name :2 metre temperaturenameECMWF :2 metre temperatureshortNameECMWF :2tnameCDM :2_metre_temperature_surfaceproduct_type :analysisarray([[[295.8689 , 295.8622 , 295.7942 , ..., 286.89417, 287.03308,\n         287.05496],\n        [295.9501 , 295.91788, 295.87173, ..., 287.04333, 287.10535,\n         286.66663],\n        [295.96982, 296.03506, 296.04623, ..., 287.0115 , 287.0807 ,\n         286.61487],\n        ...,\n        [299.62637, 299.65186, 299.68393, ..., 299.75073, 299.70132,\n         299.64038],\n        [299.60562, 299.64868, 299.71323, ..., 299.72812, 299.71542,\n         299.7495 ],\n        [299.5206 , 299.5851 , 299.6473 , ..., 299.80005, 299.79614,\n         299.86133]],\n\n       [[295.37057, 295.33475, 295.27396, ..., 286.4972 , 286.82947,\n         286.58655],\n        [295.65018, 295.61234, 295.56198, ..., 286.69235, 287.095  ,\n         286.54172],\n        [295.8115 , 295.87805, 295.88693, ..., 286.57736, 287.01755,\n         286.429  ],\n...\n        [299.1224 , 299.1797 , 299.1875 , ..., 299.8776 , 299.8854 ,\n         299.67188],\n        [299.14322, 299.1875 , 299.15103, ..., 299.7526 , 299.67188,\n         299.54166],\n        [299.14844, 299.16406, 299.14062, ..., 299.63022, 299.5547 ,\n         299.45572]],\n\n       [[297.10156, 297.14584, 297.21094, ..., 287.54166, 287.21875,\n         286.9896 ],\n        [297.0625 , 297.15625, 297.22916, ..., 287.875  , 287.89844,\n         287.85678],\n        [297.     , 297.14844, 297.22916, ..., 287.65366, 287.85938,\n         287.84634],\n        ...,\n        [299.04166, 299.08853, 299.14584, ..., 299.85156, 299.77866,\n         299.6875 ],\n        [299.04688, 299.09897, 299.16147, ..., 299.76303, 299.72916,\n         299.73178],\n        [299.06772, 299.1276 , 299.1901 , ..., 299.73697, 299.71353,\n         299.71094]]], dtype=float32)u_wind(time, lat, lon)float32-4.113 -4.231 -4.331 ... nan nanstandard_name :eastward_windunits :m s**-1long_name :10 metre U wind componentnameECMWF :10 metre U wind componentshortNameECMWF :10unameCDM :10_metre_U_wind_component_surfaceproduct_type :analysisarray([[[-4.112824  , -4.2308254 , -4.3310046 , ..., -1.6301174 ,\n         -1.5427965 , -1.374258  ],\n        [-4.125194  , -4.2819324 , -4.3911037 , ..., -1.525259  ,\n         -1.4295152 , -1.3317776 ],\n        [-4.005972  , -4.153148  , -4.275625  , ..., -1.3727932 ,\n         -1.3187975 , -1.257925  ],\n        ...,\n        [-4.437775  , -4.3447576 , -4.1923733 , ...,  0.262949  ,\n          0.08452288, -1.0053616 ],\n        [-4.3429675 , -4.2527575 , -4.0964665 , ..., -0.5725816 ,\n         -1.4063219 , -2.6998196 ],\n        [-4.223705  , -4.124258  , -3.9852607 , ..., -1.905508  ,\n         -2.7831123 , -3.9883938 ]],\n\n       [[-3.420784  , -3.2627437 , -3.0619786 , ..., -0.9695714 ,\n         -0.7292557 , -0.5646642 ],\n        [-3.587532  , -3.5350418 , -3.3892899 , ..., -1.1579666 ,\n         -0.8951085 , -0.8335037 ],\n        [-3.6214268 , -3.5236485 , -3.471606  , ..., -1.2413406 ,\n         -1.029508  , -1.0020422 ],\n...\n        [        nan,         nan,         nan, ...,         nan,\n                 nan,         nan],\n        [        nan,         nan,         nan, ...,         nan,\n                 nan,         nan],\n        [        nan,         nan,         nan, ...,         nan,\n                 nan,         nan]],\n\n       [[        nan,         nan,         nan, ...,         nan,\n                 nan,         nan],\n        [        nan,         nan,         nan, ...,         nan,\n                 nan,         nan],\n        [        nan,         nan,         nan, ...,         nan,\n                 nan,         nan],\n        ...,\n        [        nan,         nan,         nan, ...,         nan,\n                 nan,         nan],\n        [        nan,         nan,         nan, ...,         nan,\n                 nan,         nan],\n        [        nan,         nan,         nan, ...,         nan,\n                 nan,         nan]]], dtype=float32)v_wind(time, lat, lon)float320.95 0.8631 0.7149 ... nan nan nanstandard_name :northward_windunits :m s**-1long_name :10 metre V wind componentnameECMWF :10 metre V wind componentshortNameECMWF :10vnameCDM :10_metre_V_wind_component_surfaceproduct_type :analysisarray([[[ 0.9500065 ,  0.8630517 ,  0.71485835, ..., -0.09703127,\n         -0.11656252, -0.13743655],\n        [ 0.7918847 ,  0.62822914,  0.4963118 , ..., -0.19961102,\n         -0.24860191, -0.24591637],\n        [ 0.5531966 ,  0.40768877,  0.29485512, ..., -0.5019385 ,\n         -0.6441911 , -0.6629899 ],\n        ...,\n        [-6.0406346 , -6.004502  , -5.987982  , ..., -1.708807  ,\n         -1.3493099 , -1.7472998 ],\n        [-5.985947  , -5.976385  , -5.9741473 , ..., -2.0273292 ,\n         -2.375962  , -3.0447037 ],\n        [-5.8998065 , -5.909857  , -5.881862  , ..., -2.8107765 ,\n         -3.2466896 , -4.2139745 ]],\n\n       [[ 0.5805308 ,  0.4403534 ,  0.21838887, ..., -0.0563914 ,\n         -0.21292622, -0.2826284 ],\n        [ 1.0544891 ,  0.8172658 ,  0.5639699 , ..., -0.0411733 ,\n         -0.22273254, -0.2920278 ],\n        [ 1.337977  ,  1.1177622 ,  0.90153503, ..., -0.4359487 ,\n         -0.5671336 , -0.6579539 ],\n...\n        [        nan,         nan,         nan, ...,         nan,\n                 nan,         nan],\n        [        nan,         nan,         nan, ...,         nan,\n                 nan,         nan],\n        [        nan,         nan,         nan, ...,         nan,\n                 nan,         nan]],\n\n       [[        nan,         nan,         nan, ...,         nan,\n                 nan,         nan],\n        [        nan,         nan,         nan, ...,         nan,\n                 nan,         nan],\n        [        nan,         nan,         nan, ...,         nan,\n                 nan,         nan],\n        ...,\n        [        nan,         nan,         nan, ...,         nan,\n                 nan,         nan],\n        [        nan,         nan,         nan, ...,         nan,\n                 nan,         nan],\n        [        nan,         nan,         nan, ...,         nan,\n                 nan,         nan]]], dtype=float32)sst(time, lat, lon)float32297.7 297.8 297.8 ... nan nan nanstandard_name :sea_surface_temperatureunits :Klong_name :Sea surface temperaturenameECMWF :Sea surface temperatureshortNameECMWF :sstnameCDM :Sea_surface_temperature_surfaceproduct_type :analysisarray([[[297.7471 , 297.7546 , 297.76443, ...,       nan,       nan,\n               nan],\n        [297.88733, 297.85852, 297.8888 , ...,       nan,       nan,\n               nan],\n        [298.01443, 297.98856, 298.00833, ...,       nan,       nan,\n               nan],\n        ...,\n        [300.63718, 300.68698, 300.77243, ..., 300.8075 , 300.82034,\n         300.7629 ],\n        [300.6327 , 300.67484, 300.77536, ..., 300.811  , 300.81375,\n         300.80423],\n        [300.6528 , 300.71756, 300.81418, ..., 300.84387, 300.83875,\n         300.8201 ]],\n\n       [[297.6781 , 297.68127, 297.69193, ...,       nan,       nan,\n               nan],\n        [297.8127 , 297.77795, 297.80783, ...,       nan,       nan,\n               nan],\n        [297.9294 , 297.89758, 297.90833, ...,       nan,       nan,\n               nan],\n...\n        [      nan,       nan,       nan, ...,       nan,       nan,\n               nan],\n        [      nan,       nan,       nan, ...,       nan,       nan,\n               nan],\n        [      nan,       nan,       nan, ...,       nan,       nan,\n               nan]],\n\n       [[      nan,       nan,       nan, ...,       nan,       nan,\n               nan],\n        [      nan,       nan,       nan, ...,       nan,       nan,\n               nan],\n        [      nan,       nan,       nan, ...,       nan,       nan,\n               nan],\n        ...,\n        [      nan,       nan,       nan, ...,       nan,       nan,\n               nan],\n        [      nan,       nan,       nan, ...,       nan,       nan,\n               nan],\n        [      nan,       nan,       nan, ...,       nan,       nan,\n               nan]]], dtype=float32)speed(time, lat, lon)float324.488 4.625 4.767 ... nan nan nanunits :m s**-1long_name :10 metre absolute speedarray([[[4.488499 , 4.624528 , 4.7670054, ..., 2.0906909, 2.1036224,\n         1.9931256],\n        [4.4673686, 4.6341276, 4.77539  , ..., 1.9973131, 2.010266 ,\n         1.928409 ],\n        [4.341223 , 4.505151 , 4.6407204, ..., 1.8231722, 1.858904 ,\n         1.8116854],\n        ...,\n        [7.5211754, 7.440185 , 7.3393207, ..., 2.5481553, 2.6438372,\n         2.449413 ],\n        [7.4211545, 7.362189 , 7.2732296, ..., 2.8491848, 3.041434 ,\n         4.202109 ],\n        [7.2805324, 7.2327213, 7.135863 , ..., 3.5767057, 4.3809495,\n         5.8507996]],\n\n       [[3.6687508, 3.5600004, 3.5211973, ..., 1.720802 , 1.6092178,\n         1.5122393],\n        [3.8197134, 3.7501287, 3.6571178, ..., 1.7592373, 1.5714175,\n         1.528725 ],\n        [3.8979836, 3.7551668, 3.6623867, ..., 1.6610931, 1.5106525,\n         1.553871 ],\n...\n        [      nan,       nan,       nan, ...,       nan,       nan,\n               nan],\n        [      nan,       nan,       nan, ...,       nan,       nan,\n               nan],\n        [      nan,       nan,       nan, ...,       nan,       nan,\n               nan]],\n\n       [[      nan,       nan,       nan, ...,       nan,       nan,\n               nan],\n        [      nan,       nan,       nan, ...,       nan,       nan,\n               nan],\n        [      nan,       nan,       nan, ...,       nan,       nan,\n               nan],\n        ...,\n        [      nan,       nan,       nan, ...,       nan,       nan,\n               nan],\n        [      nan,       nan,       nan, ...,       nan,       nan,\n               nan],\n        [      nan,       nan,       nan, ...,       nan,       nan,\n               nan]]], dtype=float32)direction(time, lat, lon)float3233.59 19.3 5.515 ... nan nan nanunits :¬∞Clong_name :10 metre wind directionarray([[[  33.586975  ,   19.299866  ,    5.5145907 , ...,\n            4.7030787 ,    2.2623785 ,   -0.25532117],\n        [  20.783339  ,   22.084715  ,   22.661911  , ...,\n            8.552377  ,   -7.563846  ,   -5.4208064 ],\n        [  24.53271   ,   25.128256  ,   25.31457   , ...,\n          -25.685669  ,  -37.76059   ,  -33.482464  ],\n        ...,\n        [-126.79245   , -126.457184  , -125.622345  , ...,\n          -62.290222  ,  -42.269485  ,  -82.467705  ],\n        [-126.451256  , -125.97642   , -125.04302   , ...,\n          -70.07114   , -118.416626  , -131.17967   ],\n        [-126.063484  , -125.41434   , -124.700645  , ...,\n         -120.80697   , -129.24355   , -133.12593   ]],\n\n       [[  76.74645   ,   32.125744  ,   32.40063   , ...,\n           -8.000926  ,  -15.328074  ,  -17.452902  ],\n        [ 162.13469   ,  119.518486  ,   31.342909  , ...,\n           16.752283  ,   12.91404   ,    3.5444326 ],\n        [ 159.21642   ,  161.35905   ,  133.93562   , ...,\n           19.143072  ,   21.379738  ,   -1.3009249 ],\n...\n        [          nan,           nan,           nan, ...,\n                   nan,           nan,           nan],\n        [          nan,           nan,           nan, ...,\n                   nan,           nan,           nan],\n        [          nan,           nan,           nan, ...,\n                   nan,           nan,           nan]],\n\n       [[          nan,           nan,           nan, ...,\n                   nan,           nan,           nan],\n        [          nan,           nan,           nan, ...,\n                   nan,           nan,           nan],\n        [          nan,           nan,           nan, ...,\n                   nan,           nan,           nan],\n        ...,\n        [          nan,           nan,           nan, ...,\n                   nan,           nan,           nan],\n        [          nan,           nan,           nan, ...,\n                   nan,           nan,           nan],\n        [          nan,           nan,           nan, ...,\n                   nan,           nan,           nan]]], dtype=float32)CHL(time, lat, lon)float640.9436 1.223 0.9219 ... nan nan naninput_files_reprocessings :Processors versions: MODIS R2022.0NRT/VIIRSN R2022.0NRT/OLCIA 07.02/VIIRSJ1 R2022.0NRT/OLCIB 07.02type :surfaceancillary_variables :flags CHL_uncertaintystandard_name :mass_concentration_of_chlorophyll_a_in_sea_waterlong_name :Chlorophyll-a concentration - Mean of the binned pixelsvalid_min :0.0units :milligram m-3coverage_content_type :modelResultvalid_max :1000.0_ChunkSizes :[  1 256 256]array([[[0.94361056, 1.22308143, 0.92188365, ...,        nan,\n                nan,        nan],\n        [0.88500913, 0.56061059, 0.48509787, ...,        nan,\n                nan,        nan],\n        [0.69672062, 0.42856958, 0.45545564, ...,        nan,\n                nan,        nan],\n        ...,\n        [0.2122377 , 0.1989285 , 0.18591426, ..., 0.26579133,\n         0.30848261,        nan],\n        [0.21725256, 0.20589174, 0.18588419, ..., 0.32311041,\n         0.3649324 ,        nan],\n        [       nan,        nan,        nan, ...,        nan,\n                nan,        nan]],\n\n       [[0.76006006, 0.80564468, 0.61668878, ...,        nan,\n                nan,        nan],\n        [0.47927663, 0.5105061 , 0.4660786 , ...,        nan,\n                nan,        nan],\n        [0.48695314, 0.48162043, 0.50629571, ...,        nan,\n                nan,        nan],\n...\n        [0.12921234, 0.13094805, 0.12949034, ..., 0.16982289,\n         0.20014517,        nan],\n        [0.11532394, 0.11939513, 0.12244735, ..., 0.17817775,\n         0.17047778,        nan],\n        [       nan,        nan,        nan, ...,        nan,\n                nan,        nan]],\n\n       [[0.50650537, 0.81982454, 0.76070396, ...,        nan,\n                nan,        nan],\n        [0.44834528, 0.86212184, 0.8423974 , ...,        nan,\n                nan,        nan],\n        [0.50100934, 0.49017442, 0.67986343, ...,        nan,\n                nan,        nan],\n        ...,\n        [0.13627671, 0.14204035, 0.1589894 , ..., 0.18511719,\n         0.23825109,        nan],\n        [0.13627812, 0.13756857, 0.16218118, ..., 0.18690237,\n         0.18207811,        nan],\n        [       nan,        nan,        nan, ...,        nan,\n                nan,        nan]]])CHL_uncertainty(time, lat, lon)float6423.27 30.79 66.25 ... nan nan nanlong_name :Chlorophyll-a concentration - Uncertainty estimationvalid_min :0units :%coverage_content_type :qualityInformationvalid_max :32767_ChunkSizes :[  1 256 256]array([[[23.26535231, 30.78799319, 66.24935347, ...,         nan,\n                 nan,         nan],\n        [22.03007937, 24.3625091 , 25.62976109, ...,         nan,\n                 nan,         nan],\n        [45.03086785, 25.74248814, 25.43006987, ...,         nan,\n                 nan,         nan],\n        ...,\n        [34.34501631, 34.6725307 , 35.01997953, ..., 43.18753592,\n         32.42255572,         nan],\n        [34.22749907, 34.49752433, 37.51874393, ..., 42.20761757,\n         36.56687909,         nan],\n        [        nan,         nan,         nan, ...,         nan,\n                 nan,         nan]],\n\n       [[29.01265842, 32.54004249, 23.87750487, ...,         nan,\n                 nan,         nan],\n        [27.69820544, 29.84249813, 25.30749552, ...,         nan,\n                 nan,         nan],\n        [28.83214772, 25.14249556, 24.89259352, ...,         nan,\n                 nan,         nan],\n...\n        [46.88751668, 48.0668659 , 51.8775012 , ..., 35.48250196,\n         34.66502348,         nan],\n        [47.46501661, 47.29246438, 44.65972006, ..., 35.26512407,\n         35.47491695,         nan],\n        [        nan,         nan,         nan, ...,         nan,\n                 nan,         nan]],\n\n       [[26.15204538, 22.44752196, 22.86009945, ...,         nan,\n                 nan,         nan],\n        [25.51492615, 24.33056751, 24.7842235 , ...,         nan,\n                 nan,         nan],\n        [24.94000965, 25.05249815, 23.38007655, ...,         nan,\n                 nan,         nan],\n        ...,\n        [41.61507859, 45.14819763, 55.82251294, ..., 30.04499949,\n         28.79503714,         nan],\n        [41.61506002, 41.56496319, 40.72255948, ..., 30.02012755,\n         30.13741043,         nan],\n        [        nan,         nan,         nan, ...,         nan,\n                 nan,         nan]]])sla(time, lat, lon)float64nan nan nan ... 0.1047 0.1042 nanancillary_variables :err_slacomment :The sea level anomaly is the sea surface height above mean sea surface; it is referenced to the [1993, 2012] period; see the product user manual for detailsgrid_mapping :crslong_name :Sea level anomalystandard_name :sea_surface_height_above_sea_levelunits :m_ChunkSizes :[ 1 50 50]array([[[         nan,          nan,          nan, ...,          nan,\n                  nan,          nan],\n        [ 3.65750e-02,  7.67250e-02,  9.63000e-02, ...,          nan,\n                  nan,          nan],\n        [ 4.85000e-03,  5.45250e-02,  8.06500e-02, ...,          nan,\n                  nan,          nan],\n        ...,\n        [-1.39700e-01, -1.32375e-01, -1.25325e-01, ...,  1.74350e-01,\n          1.72225e-01,          nan],\n        [-1.38600e-01, -1.31475e-01, -1.25800e-01, ...,  1.57750e-01,\n          1.53475e-01,          nan],\n        [-1.36700e-01, -1.30975e-01, -1.26650e-01, ...,  1.37900e-01,\n          1.31275e-01,          nan]],\n\n       [[         nan,          nan,          nan, ...,          nan,\n                  nan,          nan],\n        [ 3.65000e-02,  7.57000e-02,  9.19500e-02, ...,          nan,\n                  nan,          nan],\n        [ 2.92500e-03,  5.13250e-02,  7.34750e-02, ...,          nan,\n                  nan,          nan],\n...\n        [-1.03850e-01, -1.01400e-01, -9.90500e-02, ...,  1.37975e-01,\n          1.45000e-01,          nan],\n        [-9.91500e-02, -9.64250e-02, -9.46500e-02, ...,  1.22625e-01,\n          1.24750e-01,          nan],\n        [-9.68250e-02, -9.42500e-02, -9.27250e-02, ...,  1.07575e-01,\n          1.06775e-01,          nan]],\n\n       [[         nan,          nan,          nan, ...,          nan,\n                  nan,          nan],\n        [ 1.17550e-01,  1.27375e-01,  1.42225e-01, ...,          nan,\n                  nan,          nan],\n        [ 1.28025e-01,  1.29650e-01,  1.34875e-01, ...,          nan,\n                  nan,          nan],\n        ...,\n        [-9.85500e-02, -9.53000e-02, -9.30750e-02, ...,  1.32800e-01,\n          1.39975e-01,          nan],\n        [-9.30750e-02, -9.08000e-02, -8.94750e-02, ...,  1.17925e-01,\n          1.20850e-01,          nan],\n        [-9.08500e-02, -8.85500e-02, -8.77500e-02, ...,  1.04725e-01,\n          1.04225e-01,          nan]]])adt(time, lat, lon)float64nan nan nan ... 0.9005 0.9016 nancomment :The absolute dynamic topography is the sea surface height above geoid; the adt is obtained as follows: adt=sla+mdt where mdt is the mean dynamic topography; see the product user manual for detailsgrid_mapping :crslong_name :Absolute dynamic topographystandard_name :sea_surface_height_above_geoidunits :m_ChunkSizes :[ 1 50 50]array([[[     nan,      nan,      nan, ...,      nan,      nan,\n              nan],\n        [0.590325, 0.6356  , 0.6588  , ...,      nan,      nan,\n              nan],\n        [0.5444  , 0.598375, 0.6295  , ...,      nan,      nan,\n              nan],\n        ...,\n        [0.60355 , 0.612   , 0.6201  , ..., 0.971475, 0.9719  ,\n              nan],\n        [0.60425 , 0.612525, 0.6193  , ..., 0.95475 , 0.952875,\n              nan],\n        [0.60595 , 0.6128  , 0.618225, ..., 0.933625, 0.928675,\n              nan]],\n\n       [[     nan,      nan,      nan, ...,      nan,      nan,\n              nan],\n        [0.590275, 0.634575, 0.654425, ...,      nan,      nan,\n              nan],\n        [0.5425  , 0.5952  , 0.622325, ...,      nan,      nan,\n              nan],\n...\n        [0.639425, 0.643   , 0.646375, ..., 0.935075, 0.94465 ,\n              nan],\n        [0.64375 , 0.6476  , 0.650425, ..., 0.919625, 0.924125,\n              nan],\n        [0.64585 , 0.649575, 0.65215 , ..., 0.9033  , 0.904175,\n              nan]],\n\n       [[     nan,      nan,      nan, ...,      nan,      nan,\n              nan],\n        [0.67135 , 0.68625 , 0.7047  , ...,      nan,      nan,\n              nan],\n        [0.6676  , 0.6735  , 0.6837  , ...,      nan,      nan,\n              nan],\n        ...,\n        [0.64475 , 0.6491  , 0.65235 , ..., 0.929925, 0.93965 ,\n              nan],\n        [0.649825, 0.65325 , 0.655625, ..., 0.914925, 0.92025 ,\n              nan],\n        [0.65185 , 0.6553  , 0.65715 , ..., 0.90045 , 0.90165 ,\n              nan]]])u_curr(time, lat, lon)float64-0.2163 -0.1152 ... -0.6347 -0.7386long_name :zonal total surface currentstandard_name :eastward_sea_water_velocityunits :m s-1coverage_content_type :modelResultvalid_min :-3.0valid_max :3.0depth :15mcomment :Velocities are an average over the top 30m of the mixed layersource :SSH source: CMEMS SSALTO/DUACS SEALEVEL_GLO_PHY_L4_MY_008_047 DOI: 10.48670/moi-00148 ; WIND source: ECMWF ERA5 10m wind DOI: 10.24381/cds.adbb2d47 ; SST source: CMC 0.2 deg SST V2.0 DOI: 10.5067/GHCMC-4FM02array([[[-2.16329793e-01, -1.15205638e-01, -6.13580292e-02, ...,\n                     nan,             nan,             nan],\n        [-2.67597997e-01, -1.92997759e-01, -1.33166710e-01, ...,\n                     nan,             nan,             nan],\n        [-2.23533932e-01, -2.28077917e-01, -2.19973706e-01, ...,\n                     nan,             nan,             nan],\n        ...,\n        [-1.65040480e-01, -1.71987413e-01, -1.89558302e-01, ...,\n         -4.36580786e-01, -5.21121478e-01, -5.78623471e-01],\n        [-1.13352991e-01, -1.41514442e-01, -1.83131898e-01, ...,\n         -5.92808386e-01, -7.03506794e-01, -7.69103705e-01],\n        [-6.05071228e-02, -1.16488412e-01, -1.50332504e-01, ...,\n         -7.82638128e-01, -8.77663090e-01, -9.36166662e-01]],\n\n       [[-2.04018244e-01, -1.07527013e-01, -6.26679832e-02, ...,\n                     nan,             nan,             nan],\n        [-2.70675893e-01, -1.93174375e-01, -1.39464815e-01, ...,\n                     nan,             nan,             nan],\n        [-2.26310057e-01, -2.39305605e-01, -2.34721948e-01, ...,\n                     nan,             nan,             nan],\n...\n        [-2.46977761e-03,  1.60242172e-02,  1.30060198e-02, ...,\n         -3.62182186e-01, -4.48416930e-01, -5.46232466e-01],\n        [-3.72221920e-02, -3.19794831e-02, -4.25276740e-02, ...,\n         -4.67587208e-01, -6.00699171e-01, -7.12966891e-01],\n        [-1.04136717e-01, -1.08186101e-01, -9.38777884e-02, ...,\n         -4.83430936e-01, -5.86900377e-01, -6.84638069e-01]],\n\n       [[-7.85115058e-02, -7.01353606e-02, -7.01956468e-02, ...,\n                     nan,             nan,             nan],\n        [-4.99937370e-02, -8.35889665e-02, -1.11157585e-01, ...,\n                     nan,             nan,             nan],\n        [-2.46566897e-02, -7.82026501e-02, -1.27673716e-01, ...,\n                     nan,             nan,             nan],\n        ...,\n        [ 5.04988324e-02,  5.14542566e-02,  3.12174716e-02, ...,\n         -3.93258084e-01, -4.88031173e-01, -5.68671226e-01],\n        [ 2.10081518e-03,  2.06923076e-03, -2.19358869e-02, ...,\n         -4.76978446e-01, -6.17301914e-01, -7.22930244e-01],\n        [-6.40567371e-02, -6.56186310e-02, -6.70941659e-02, ...,\n         -5.07840775e-01, -6.34701823e-01, -7.38607936e-01]]])v_curr(time, lat, lon)float640.1758 0.1223 ... 0.1429 0.1075long_name :meridional total surface currentstandard_name :northward_sea_water_velocityunits :m s-1coverage_content_type :modelResultvalid_min :-3.0valid_max :3.0depth :15mcomment :Velocities are an average over the top 30m of the mixed layersource :SSH source: CMEMS SSALTO/DUACS SEALEVEL_GLO_PHY_L4_MY_008_047 DOI: 10.48670/moi-00148 ; WIND source: ECMWF ERA5 10m wind DOI: 10.24381/cds.adbb2d47 ; SST source: CMC 0.2 deg SST V2.0 DOI: 10.5067/GHCMC-4FM02array([[[ 0.17581382,  0.1223497 ,  0.04060171, ...,         nan,\n                 nan,         nan],\n        [ 0.27962411,  0.22099907,  0.09537801, ...,         nan,\n                 nan,         nan],\n        [ 0.33087173,  0.27562031,  0.14109354, ...,         nan,\n                 nan,         nan],\n        ...,\n        [ 0.23974562,  0.2146783 ,  0.16905831, ...,  0.09940819,\n          0.05113739,  0.00742983],\n        [ 0.24881928,  0.207477  ,  0.15428967, ...,  0.06824016,\n          0.01924601, -0.01641264],\n        [ 0.2283897 ,  0.17947196,  0.1464494 , ..., -0.03389545,\n         -0.04072035, -0.06296792]],\n\n       [[ 0.19013242,  0.11755865,  0.04124651, ...,         nan,\n                 nan,         nan],\n        [ 0.29901138,  0.21379557,  0.08956162, ...,         nan,\n                 nan,         nan],\n        [ 0.34159062,  0.26557376,  0.133666  , ...,         nan,\n                 nan,         nan],\n...\n        [ 0.15974768,  0.15141284,  0.13394718, ...,  0.2804523 ,\n          0.23092576,  0.17797142],\n        [ 0.1774607 ,  0.14959858,  0.11969227, ...,  0.21213661,\n          0.16393553,  0.1431547 ],\n        [ 0.17575619,  0.14698981,  0.12047752, ...,  0.1270319 ,\n          0.08760069,  0.04948463]],\n\n       [[ 0.08213705,  0.1106455 ,  0.10435769, ...,         nan,\n                 nan,         nan],\n        [ 0.07783279,  0.10185594,  0.11620673, ...,         nan,\n                 nan,         nan],\n        [ 0.02868244,  0.04827627,  0.07242787, ...,         nan,\n                 nan,         nan],\n        ...,\n        [ 0.1937754 ,  0.16497553,  0.13117042, ...,  0.35318518,\n          0.30436654,  0.21369744],\n        [ 0.19152782,  0.14561624,  0.12216206, ...,  0.2692158 ,\n          0.23875121,  0.19075344],\n        [ 0.18291421,  0.14327341,  0.1180734 , ...,  0.17077737,\n          0.14294798,  0.10749965]]])ug_curr(time, lat, lon)float64-0.2121 -0.1098 ... -0.4791 -0.5703long_name :zonal geostrophic surface currentstandard_name :geostrophic_eastward_sea_water_velocityunits :m s-1valid_min :-3.0valid_max :3.0depth :15mcomment :Geostrophic velocities calculated from absolute dynamic topographysource :SSH source: CMEMS SSALTO/DUACS SEALEVEL_GLO_PHY_L4_MY_008_047 DOI: 10.48670/moi-00148array([[[-0.21205931, -0.10981898, -0.05269309, ...,         nan,\n                 nan,         nan],\n        [-0.2614097 , -0.18526745, -0.12312671, ...,         nan,\n                 nan,         nan],\n        [-0.21334308, -0.21560184, -0.20656682, ...,         nan,\n                 nan,         nan],\n        ...,\n        [-0.01355595, -0.01607799, -0.02585089, ..., -0.40636332,\n         -0.44167185, -0.46247866],\n        [ 0.03170129,  0.0105671 , -0.02476663, ..., -0.49995573,\n         -0.57095341, -0.5996827 ],\n        [ 0.07349779,  0.0253082 , -0.00762713, ..., -0.64379907,\n         -0.69996248, -0.7332445 ]],\n\n       [[-0.19861792, -0.10173985, -0.05383704, ...,         nan,\n                 nan,         nan],\n        [-0.26761656, -0.18923695, -0.1340248 , ...,         nan,\n                 nan,         nan],\n        [-0.22092084, -0.23236034, -0.22813429, ...,         nan,\n                 nan,         nan],\n...\n        [ 0.13114596,  0.13839682,  0.13051545, ..., -0.3417361 ,\n         -0.41645147, -0.49242785],\n        [ 0.08486699,  0.08684832,  0.07628122, ..., -0.41971184,\n         -0.53462901, -0.61850534],\n        [ 0.01282745,  0.01282745,  0.0253082 , ..., -0.41602525,\n         -0.49715017, -0.58035522]],\n\n       [[-0.07121075, -0.06034324, -0.05762637, ...,         nan,\n                 nan,         nan],\n        [-0.04806705, -0.0802561 , -0.10558873, ...,         nan,\n                 nan,         nan],\n        [-0.02360764, -0.07657909, -0.12481445, ...,         nan,\n                 nan,         nan],\n        ...,\n        [ 0.14911548,  0.13209172,  0.11286119, ..., -0.35119374,\n         -0.42685487, -0.48013292],\n        [ 0.09378298,  0.08189499,  0.06340258, ..., -0.38933144,\n         -0.50193706, -0.57656718],\n        [ 0.0253082 ,  0.0197612 ,  0.01906782, ..., -0.38031642,\n         -0.47912241, -0.57030128]]])vg_curr(time, lat, lon)float640.1709 0.1173 ... 0.02541 -0.003819long_name :meridional geostrophic surface currentstandard_name :geostrophic_northward_sea_water_velocityunits :m s-1valid_min :-3.0valid_max :3.0depth :15mcomment :Geostrophic velocities calculated from absolute dynamic topographysource :SSH source: CMEMS SSALTO/DUACS SEALEVEL_GLO_PHY_L4_MY_008_047 DOI: 10.48670/moi-00148array([[[ 0.17089251,  0.11733811,  0.03311233, ...,         nan,\n                 nan,         nan],\n        [ 0.27516986,  0.21762427,  0.09056246, ...,         nan,\n                 nan,         nan],\n        [ 0.32789404,  0.27256798,  0.13619627, ...,         nan,\n                 nan,         nan],\n        ...,\n        [ 0.22835081,  0.20966424,  0.16722675, ...,  0.05004034,\n         -0.03546966, -0.09754937],\n        [ 0.23312529,  0.19963556,  0.15387101, ..., -0.01955038,\n         -0.0835596 , -0.13098003],\n        [ 0.20916163,  0.17087756,  0.14581811, ..., -0.13015069,\n         -0.1440736 , -0.166352  ]],\n\n       [[ 0.17617906,  0.10582156,  0.02971701, ...,         nan,\n                 nan,         nan],\n        [ 0.2854159 ,  0.20387646,  0.08143192, ...,         nan,\n                 nan,         nan],\n        [ 0.32879021,  0.25567457,  0.12553916, ...,         nan,\n                 nan,         nan],\n...\n        [ 0.09723046,  0.08804637,  0.07062706, ...,  0.26193668,\n          0.19320631,  0.11655139],\n        [ 0.11639408,  0.08854159,  0.06300886, ...,  0.15918308,\n          0.09551511,  0.05970216],\n        [ 0.12145894,  0.0876995 ,  0.06264072, ...,  0.05499892,\n          0.00279234, -0.03131491]],\n\n       [[ 0.08511064,  0.11366543,  0.10946919, ...,         nan,\n                 nan,         nan],\n        [ 0.081077  ,  0.10603812,  0.12192763, ...,         nan,\n                 nan,         nan],\n        [ 0.03054435,  0.05160108,  0.07705999, ...,         nan,\n                 nan,         nan],\n        ...,\n        [ 0.11813489,  0.09628438,  0.06429358, ...,  0.26510076,\n          0.20270373,  0.10261559],\n        [ 0.11805487,  0.07693571,  0.05339187, ...,  0.1591868 ,\n          0.12337106,  0.07262998],\n        [ 0.11449762,  0.07377872,  0.04837319, ...,  0.05395136,\n          0.02541404, -0.00381944]]])Attributes: (17)title :Sample of Climate Data for Coastal Upwelling Machine Learning Project in Indian Oceansummary :Daily mean of 0.25 x 0.25 degrees gridded data from multiple climate variables that may influence the patterns of coastal upwelling in the focused areacreator_name :Minh Phancreator_email :minhphan@uw.educreator_type :personsource :OSCAR, ERA5 Reanalysis, Copernicus Climate Change Service (C3S), Copernicus Marine Environment Monitoring Service (CMEMS)geospatial_lat_min :5.0geospatial_lat_max :25.0geospatial_lat_units :degrees_northgeospatial_lat_resolution :0.25geospatial_lon_min :60.0geospatial_lon_max :80.0geospatial_lon_units :degrees_eastgeospatial_lon_resolution :0.25time_coverage_start :2000-01-01T00:00:00time_coverage_end :2002-12-31T23:59:59date_created :2023-11-11"
  },
  {
    "objectID": "python-notebooks/04_Combining_Data.html#adding-consistency-across-variables-convert-data-types-rechunking",
    "href": "python-notebooks/04_Combining_Data.html#adding-consistency-across-variables-convert-data-types-rechunking",
    "title": "Combine, clean, and export the data",
    "section": "Adding consistency across variables: convert data types, rechunking",
    "text": "Adding consistency across variables: convert data types, rechunking\nNote that some variables has float64 dtype, while others have float32. We want to add consistency by converting all of them to float32 to save some disk space. The precision from float64 is most likely not going to be lost after the conversion, as our figures do not have enough precision to exceed the limit.\n\nfor var in final_ds.data_vars:\n    if str(final_ds[var].dtype) == 'float64':\n        final_ds[var].values = final_ds[var].astype('float32')\n\nWe also need to rechunk the dataset before we can export the data. Some of the variables have original chunk sizes, which is specified in their encodings, and we need to reset these values so that zarr would not reconvert the encoding when export is happening. This is a known issue.\n\nfor var in final_ds.data_vars:\n    if 'chunks' in list(final_ds[var].encoding.keys()):\n        del final_ds[var].encoding['chunks']\n\n\n# confirm for one variable 'u_wind' that 'chunk' key no longer exists\nfinal_ds['u_wind'].encoding\n\n{'zlib': True,\n 'szip': False,\n 'zstd': False,\n 'bzip2': False,\n 'blosc': False,\n 'shuffle': True,\n 'complevel': 4,\n 'fletcher32': False,\n 'contiguous': False,\n 'chunksizes': (372, 41, 41),\n 'source': '/home/jovyan/shared/minh-notebooks/era5/eastward_wind_at_10_metres/200001_eastward_wind_at_10_metres.nc',\n 'original_shape': (744, 81, 81),\n 'dtype': dtype('float32'),\n '_FillValue': 9.96921e+36}\n\n\n\narray_chunk_size = {'time': 100, 'lat': final_ds.lat.shape[0], 'lon': final_ds.lon.shape[0]}\nfinal_ds = final_ds.chunk(array_chunk_size)"
  },
  {
    "objectID": "python-notebooks/04_Combining_Data.html#export-data",
    "href": "python-notebooks/04_Combining_Data.html#export-data",
    "title": "Combine, clean, and export the data",
    "section": "Export data",
    "text": "Export data\n\nfinal_ds.to_zarr('demonstrated data/final-sample.zarr')\n\n&lt;xarray.backends.zarr.ZarrStore at 0x7f6285f2ec10&gt;"
  },
  {
    "objectID": "r-notebooks/Lab-setup.html",
    "href": "r-notebooks/Lab-setup.html",
    "title": "Labs - Set up",
    "section": "",
    "text": "For initial set-up, you will need to create an folder sdm-labs and then create an RStudio project in that folder. Then every day, when you work on the tutorials, you will copy the tutorial into that folder. That copy is what you can alter, save and render (create html)."
  },
  {
    "objectID": "r-notebooks/Lab-setup.html#set-up-a-new-project",
    "href": "r-notebooks/Lab-setup.html#set-up-a-new-project",
    "title": "Labs - Set up",
    "section": "Set up a new project",
    "text": "Set up a new project\nYou will need to create a directory called sdm-labs in your home directory. You home directory is called home/jovyan. Navigate there and then click the New Folder icon and create sdm-labs.\n\n\n\nCreate a sdm-labs folder if you have not already\n\n\nCreate an RStudio project at the sdm-labs directory. Go to\nFile &gt; New Project &gt; Existing directory\nThen navigate to the sdm-labs directory and create the project.\n\nCreate a data folder\nWithin the sdm-labs directory, also create a folder called data. You will store data there."
  },
  {
    "objectID": "r-notebooks/Lab-setup.html#returning-to-your-project",
    "href": "r-notebooks/Lab-setup.html#returning-to-your-project",
    "title": "Labs - Set up",
    "section": "Returning to your project",
    "text": "Returning to your project\nWhen you reopen RStudio, it should go to the last project that you had open. But if not you can select the sdm-labs project by click the ‚Äúblue cube‚Äù dropdown in the top right and selecting the sdm-labs project."
  },
  {
    "objectID": "r-notebooks/Lab-setup.html#copy-the-lab-into-the-sdm-labs-directory",
    "href": "r-notebooks/Lab-setup.html#copy-the-lab-into-the-sdm-labs-directory",
    "title": "Labs - Set up",
    "section": "Copy the lab into the sdm-labs directory",
    "text": "Copy the lab into the sdm-labs directory\nThe R tutorials are in the folder r-tutorials in the shared/2023-Hackbook directory. You can open the lab we are working on in that directory and run the code, but you will not be able to save your work. There are 2 ways you can save your work.\n\nOpen file and save when ready\nYou can work in the file in the r-tutorials directory as long as you don‚Äôt ‚ÄúRender‚Äù the document. If you try to do that, it will complain that you do not have write permission.\nSo you work in the file and run code with the ‚ÄúRun‚Äù icon and then when you want to save, use File &gt; Save As. Then navigate to your \\home\\jovyan\\sdm-labs directory and save there.\n\n\nSave the file first\n\nNavigate to the r-notebooks folder\nSelect the file you will be using by clicking the check box\n\n * Click the Cog icon and select ‚ÄúCopy to‚Äù * Copy to to your \\home\\jovyan\\sdm-labs directory.\n\n\n\nCopy to\n\n\nNow navigate to the sdm-labs folder and open the file."
  },
  {
    "objectID": "r-notebooks/SDM-lab1.html",
    "href": "r-notebooks/SDM-lab1.html",
    "title": "SDM lab 1 - Downloading species data",
    "section": "",
    "text": "Set the data directory.\nhere::i_am(\"SDM-lab1.qmd\")\n\nhere() starts at /Users/eli.holmes/Documents/GitHub/2023-Cloudbook/r-notebooks\n\ndir_data &lt;- here::here(\"data\")\nSet the file paths.\n# data as csv file\nobs_csv &lt;- file.path(dir_data, \"obs.csv\")\n# data as geojson\nobs_geo &lt;- file.path(dir_data, \"obs.geojson\")\nLoad libraries.\nrequire(sf)\nrequire(spocc)\nrequire(knitr)\nrequire(dplyr)\nrequire(readr)"
  },
  {
    "objectID": "r-notebooks/SDM-lab1.html#spocc-r-package",
    "href": "r-notebooks/SDM-lab1.html#spocc-r-package",
    "title": "SDM lab 1 - Downloading species data",
    "section": "spocc R package",
    "text": "spocc R package\nThe spocc R package which allows us to query species occurrence data from a variety of sources:\nspocc: A programmatic interface to many species occurrence data sources, including GBIF, iNaturalist, Berkeley Ecoinformatics Engine, eBird, iDigBio, VertNet, OBIS, and ALA. Includes functionality for retrieving species occurrence data, and combining that data.\n\nBrown-throated sloth\nThis is a classic example for Species Distribution modeling. It is a sloth found in South America.\n\n\nif (!file.exists(obs_csv)){\n# get species occurrence data from GBIF with coordinates\nres &lt;- spocc::occ(\n    query = 'Bradypus variegatus', \n    from = 'gbif', has_coords = TRUE)\n  \n# extract data frame from result\ndf &lt;- res$gbif$data[[1]] \n# write data to a file\nreadr::write_csv(df, obs_csv)\n}else{\n  df &lt;- readr::read_csv(obs_csv)\n}\n\nRows: 500 Columns: 83\n‚îÄ‚îÄ Column specification ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\nDelimiter: \",\"\nchr  (55): name, issues, prov, scientificName, datasetKey, publishingOrgKey,...\ndbl  (21): longitude, latitude, key, crawlId, taxonKey, kingdomKey, phylumKe...\nlgl   (1): isInCluster\ndttm  (5): lastCrawled, lastParsed, dateIdentified, modified, lastInterpreted\ndate  (1): eventDate\n\n‚Ñπ Use `spec()` to retrieve the full column specification for this data.\n‚Ñπ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\n\n\n\n\nLook at the objects\n\n\n\nType names(res) and then names(res$gbif). Then type df to see what is in the dataframe.\n\n\nMake a table of the first few lines of the dataframe.\n\nknitr::kable(df %&gt;% head)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nname\nlongitude\nlatitude\nissues\nprov\nkey\nscientificName\ndatasetKey\npublishingOrgKey\ninstallationKey\nhostingOrganizationKey\npublishingCountry\nprotocol\nlastCrawled\nlastParsed\ncrawlId\nbasisOfRecord\noccurrenceStatus\ntaxonKey\nkingdomKey\nphylumKey\nclassKey\norderKey\nfamilyKey\ngenusKey\nspeciesKey\nacceptedTaxonKey\nacceptedScientificName\nkingdom\nphylum\norder\nfamily\ngenus\nspecies\ngenericName\nspecificEpithet\ntaxonRank\ntaxonomicStatus\niucnRedListCategory\ndateIdentified\ncoordinateUncertaintyInMeters\ncontinent\nstateProvince\nyear\nmonth\nday\neventDate\nmodified\nlastInterpreted\nreferences\nlicense\nisInCluster\ndatasetName\nrecordedBy\nidentifiedBy\ngeodeticDatum\nclass\ncountryCode\ncountry\nrightsHolder\nidentifier\nhttp://unknown.org/nick\nverbatimEventDate\ncollectionCode\ngbifID\nverbatimLocality\noccurrenceID\ntaxonID\ncatalogNumber\ninstitutionCode\neventTime\nhttp://unknown.org/captive\nidentificationID\noccurrenceRemarks\nsex\nlifeStage\nindividualCount\nvernacularName\nlocality\nhigherClassification\ninformationWithheld\ninfraspecificEpithet\nidentificationRemarks\n\n\n\n\nBradypus variegatus Schinz, 1825\n-79.54650\n8.987403\ncdc,cdround\ngbif\n4011797263\nBradypus variegatus Schinz, 1825\n50c9509d-22c7-4a22-a47d-8c48425ef4a7\n28eb1a3f-1c15-4a95-931a-4af90ecb574d\n997448a8-f762-11e1-a439-00145eb45e9a\n28eb1a3f-1c15-4a95-931a-4af90ecb574d\nUS\nDWC_ARCHIVE\n2023-08-17 14:21:14\n2023-08-18 13:22:12\n390\nHUMAN_OBSERVATION\nPRESENT\n2436353\n1\n44\n359\n1494\n9418\n2436350\n2436353\n2436353\nBradypus variegatus Schinz, 1825\nAnimalia\nChordata\nPilosa\nBradypodidae\nBradypus\nBradypus variegatus\nBradypus\nvariegatus\nSPECIES\nACCEPTED\nLC\n2023-01-02 21:10:21\n61\nNORTH_AMERICA\nPanam√°\n2023\n1\n2\n2023-01-02\n2023-03-09 20:50:19\n2023-08-18 13:22:12\nhttps://www.inaturalist.org/observations/145694886\nhttp://creativecommons.org/licenses/by/4.0/legalcode\nFALSE\niNaturalist research-grade observations\nKai Squires\nKai Squires\nWGS84\nMammalia\nPA\nPanama\nKai Squires\n145694886\nsquiresk\n2023/01/02 9:49 AM\nObservations\n4011797263\nPanama City, Panama\nhttps://www.inaturalist.org/observations/145694886\n47067\n145694886\niNaturalist\n09:49:00-05:00\nwild\n324468453\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\n\n\nBradypus variegatus Schinz, 1825\n-84.68933\n10.519427\ncdc,cdround\ngbif\n4091593493\nBradypus variegatus Schinz, 1825\n50c9509d-22c7-4a22-a47d-8c48425ef4a7\n28eb1a3f-1c15-4a95-931a-4af90ecb574d\n997448a8-f762-11e1-a439-00145eb45e9a\n28eb1a3f-1c15-4a95-931a-4af90ecb574d\nUS\nDWC_ARCHIVE\n2023-08-17 14:21:14\n2023-08-18 13:41:19\n390\nHUMAN_OBSERVATION\nPRESENT\n2436353\n1\n44\n359\n1494\n9418\n2436350\n2436353\n2436353\nBradypus variegatus Schinz, 1825\nAnimalia\nChordata\nPilosa\nBradypodidae\nBradypus\nBradypus variegatus\nBradypus\nvariegatus\nSPECIES\nACCEPTED\nLC\n2023-01-31 13:22:05\n4\nNORTH_AMERICA\nAlajuela\n2023\n1\n2\n2023-01-02\n2023-04-13 01:01:22\n2023-08-18 13:41:19\nhttps://www.inaturalist.org/observations/145696593\nhttp://creativecommons.org/licenses/by-nc/4.0/legalcode\nFALSE\niNaturalist research-grade observations\nJessica Rae\nWren\nWGS84\nMammalia\nCR\nCosta Rica\nJessica Rae\n145696593\naltoidsboi\n2023/01/02 3:54 PM\nObservations\n4091593493\nAlajuela Province, San Carlos, Costa Rica\nhttps://www.inaturalist.org/observations/145696593\n47067\n145696593\niNaturalist\n15:54:00-06:00\nwild\n330896608\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\n\n\nBradypus variegatus Schinz, 1825\n-82.15604\n9.316584\ncdc,cdround\ngbif\n4028722131\nBradypus variegatus Schinz, 1825\n50c9509d-22c7-4a22-a47d-8c48425ef4a7\n28eb1a3f-1c15-4a95-931a-4af90ecb574d\n997448a8-f762-11e1-a439-00145eb45e9a\n28eb1a3f-1c15-4a95-931a-4af90ecb574d\nUS\nDWC_ARCHIVE\n2023-08-17 14:21:14\n2023-08-18 13:41:57\n390\nHUMAN_OBSERVATION\nPRESENT\n2436353\n1\n44\n359\n1494\n9418\n2436350\n2436353\n2436353\nBradypus variegatus Schinz, 1825\nAnimalia\nChordata\nPilosa\nBradypodidae\nBradypus\nBradypus variegatus\nBradypus\nvariegatus\nSPECIES\nACCEPTED\nLC\n2023-01-03 18:24:03\n75\nNORTH_AMERICA\nBocas del Toro\n2023\n1\n3\n2023-01-03\n2023-02-02 01:16:10\n2023-08-18 13:41:57\nhttps://www.inaturalist.org/observations/145767431\nhttp://creativecommons.org/licenses/by-nc/4.0/legalcode\nFALSE\niNaturalist research-grade observations\nlucybrown19\nlucybrown19\nWGS84\nMammalia\nPA\nPanama\nlucybrown19\n145767431\nlucybrown19\nTue Jan 03 2023 11:36:24 GMT -0500 (EST)\nObservations\n4028722131\nBocas del Toro, PA-BC, PA\nhttps://www.inaturalist.org/observations/145767431\n47067\n145767431\niNaturalist\n11:36:24-05:00\nwild\n324686542\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\n\n\nBradypus variegatus Schinz, 1825\n-84.06505\n10.449010\ncdc,cdround\ngbif\n4011771409\nBradypus variegatus Schinz, 1825\n50c9509d-22c7-4a22-a47d-8c48425ef4a7\n28eb1a3f-1c15-4a95-931a-4af90ecb574d\n997448a8-f762-11e1-a439-00145eb45e9a\n28eb1a3f-1c15-4a95-931a-4af90ecb574d\nUS\nDWC_ARCHIVE\n2023-08-17 14:21:14\n2023-08-18 13:41:03\n390\nHUMAN_OBSERVATION\nPRESENT\n2436353\n1\n44\n359\n1494\n9418\n2436350\n2436353\n2436353\nBradypus variegatus Schinz, 1825\nAnimalia\nChordata\nPilosa\nBradypodidae\nBradypus\nBradypus variegatus\nBradypus\nvariegatus\nSPECIES\nACCEPTED\nLC\n2023-01-03 19:44:25\n5\nNORTH_AMERICA\nHeredia\n2023\n1\n3\n2023-01-03\n2023-01-16 15:12:42\n2023-08-18 13:41:03\nhttps://www.inaturalist.org/observations/145772860\nhttp://creativecommons.org/licenses/by/4.0/legalcode\nFALSE\niNaturalist research-grade observations\nChris Harrison\nChris Harrison\nWGS84\nMammalia\nCR\nCosta Rica\nChris Harrison\n145772860\nsandboa\n2023-01-03 11:57:43\nObservations\n4011771409\nSarapiqu√≠, CR-HE, CR\nhttps://www.inaturalist.org/observations/145772860\n47067\n145772860\niNaturalist\n11:57:43-06:00\nwild\n324705982\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\n\n\nBradypus variegatus Schinz, 1825\n-79.64967\n9.061424\ncdc,cdround\ngbif\n4014910775\nBradypus variegatus Schinz, 1825\n50c9509d-22c7-4a22-a47d-8c48425ef4a7\n28eb1a3f-1c15-4a95-931a-4af90ecb574d\n997448a8-f762-11e1-a439-00145eb45e9a\n28eb1a3f-1c15-4a95-931a-4af90ecb574d\nUS\nDWC_ARCHIVE\n2023-08-17 14:21:14\n2023-08-18 13:21:15\n390\nHUMAN_OBSERVATION\nPRESENT\n2436353\n1\n44\n359\n1494\n9418\n2436350\n2436353\n2436353\nBradypus variegatus Schinz, 1825\nAnimalia\nChordata\nPilosa\nBradypodidae\nBradypus\nBradypus variegatus\nBradypus\nvariegatus\nSPECIES\nACCEPTED\nLC\n2023-01-04 02:04:32\n365\nNORTH_AMERICA\nPanam√°\n2023\n1\n3\n2023-01-03\n2023-03-09 20:50:14\n2023-08-18 13:21:15\nhttps://www.inaturalist.org/observations/145797456\nhttp://creativecommons.org/licenses/by-nc/4.0/legalcode\nFALSE\niNaturalist research-grade observations\nMatt Cohen and Elizabeth Hargrave\nMatt Cohen and Elizabeth Hargrave\nWGS84\nMammalia\nPA\nPanama\nMatt Cohen and Elizabeth Hargrave\n145797456\nmattandeliz\n2023/01/03 9:02 AM\nObservations\n4014910775\nPanama\nhttps://www.inaturalist.org/observations/145797456\n47067\n145797456\niNaturalist\n09:02:00-05:00\nwild\n324778216\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\n\n\nBradypus variegatus Schinz, 1825\n-80.14370\n8.602112\ncdc,cdround\ngbif\n4015257923\nBradypus variegatus Schinz, 1825\n50c9509d-22c7-4a22-a47d-8c48425ef4a7\n28eb1a3f-1c15-4a95-931a-4af90ecb574d\n997448a8-f762-11e1-a439-00145eb45e9a\n28eb1a3f-1c15-4a95-931a-4af90ecb574d\nUS\nDWC_ARCHIVE\n2023-08-17 14:21:14\n2023-08-18 13:40:25\n390\nHUMAN_OBSERVATION\nPRESENT\n2436353\n1\n44\n359\n1494\n9418\n2436350\n2436353\n2436353\nBradypus variegatus Schinz, 1825\nAnimalia\nChordata\nPilosa\nBradypodidae\nBradypus\nBradypus variegatus\nBradypus\nvariegatus\nSPECIES\nACCEPTED\nLC\n2023-01-05 00:14:33\n171\nNORTH_AMERICA\nCocl√©\n2023\n1\n4\n2023-01-04\n2023-03-09 20:50:13\n2023-08-18 13:40:25\nhttps://www.inaturalist.org/observations/145862390\nhttp://creativecommons.org/licenses/by-nc/4.0/legalcode\nFALSE\niNaturalist research-grade observations\nMatt Cohen and Elizabeth Hargrave\nMatt Cohen and Elizabeth Hargrave\nWGS84\nMammalia\nPA\nPanama\nMatt Cohen and Elizabeth Hargrave\n145862390\nmattandeliz\n2023/01/04 2:49 PM\nObservations\n4015257923\nAnton Valley, Panama\nhttps://www.inaturalist.org/observations/145862390\n47067\n145862390\niNaturalist\n14:49:00-05:00\nwild\n324981107\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\n\n\n\n\n\nConvert to points of observation from lon/lat columns in data frame. This part is using the sf R package to make our dataframe into a geospatial object. This way the mapping functions will be able to plot the points easily.\n\nobs &lt;- df %&gt;% \n  sf::st_as_sf(\n    coords = c(\"longitude\", \"latitude\"), # what columns have x and y\n    crs = sf::st_crs(4326)) %&gt;% # what projection to use\n    dplyr::select(prov, key) # save space (optional)\n# save the file\nsf::write_sf(obs, obs_geo, delete_dsn=TRUE)\nnrow(obs) # number of rows\n\n[1] 500\n\n\nThe format of a bounding box is ## [min-longitude, min-latitude, max-longitude, max-latitude]"
  },
  {
    "objectID": "r-notebooks/geospatial-lab1.html",
    "href": "r-notebooks/geospatial-lab1.html",
    "title": "Geospatial in R - lab 1",
    "section": "",
    "text": "require(sf)\nrequire(mapview)\nrequire(readr)\nrequire(readxl)\nIn this lab, you will learn basic skills of working with points. We will store our points in dataframes. All our points dataframes will have these columns:\nBut the columns names are often shortened to lon, lat or lng, latd or anything else.\nIn addition they will have other info in other columns."
  },
  {
    "objectID": "r-notebooks/geospatial-lab1.html#create-a-data-frame-of-points",
    "href": "r-notebooks/geospatial-lab1.html#create-a-data-frame-of-points",
    "title": "Geospatial in R - lab 1",
    "section": "Create a data frame of points",
    "text": "Create a data frame of points\n\nlibrary(mapview)\n  \n# Create example data of points\nlon &lt;- c(85.21, 80.23, 77.28)\nlat = c(25.59, 12.99, 28.56)\nnames = c(\"Patna\", \"Chennai\", \"New Delhi\")\n  \n# Create a data frame with the point data\ndf = data.frame(lon, lat, names)"
  },
  {
    "objectID": "r-notebooks/geospatial-lab1.html#convert-to-a-spatial-points-data-frame",
    "href": "r-notebooks/geospatial-lab1.html#convert-to-a-spatial-points-data-frame",
    "title": "Geospatial in R - lab 1",
    "section": "Convert to a spatial points data frame",
    "text": "Convert to a spatial points data frame\n\n\n\n\n\n\nCore skill\n\n\n\nConvert data frame with latitude and longitude columns to a geospatial object with a geometry column and coordinate system.\n\nsf::st_as_sf()\n\n\n\nThis is a special data frame where the location data is converted to a single point object.\n\nsdf = sf::st_as_sf(\n    df, # the data frame\n    coords = c(\"lon\", \"lat\"), # what are the x and y dimension names\n    crs = 4326)\n\nLook at the class of the object\n\nclass(sdf)\n\n[1] \"sf\"         \"data.frame\""
  },
  {
    "objectID": "r-notebooks/geospatial-lab1.html#plot-the-points",
    "href": "r-notebooks/geospatial-lab1.html#plot-the-points",
    "title": "Geospatial in R - lab 1",
    "section": "Plot the points",
    "text": "Plot the points\n\nplot(sdf)\n\n\n\n\nIt plotted but it is not very useful. Let‚Äôs use the helper package mapview. That‚Äôs more useful.\n\nmapview::mapview(sdf, label = sdf$names)"
  },
  {
    "objectID": "r-notebooks/geospatial-lab1.html#read-in-points-from-files",
    "href": "r-notebooks/geospatial-lab1.html#read-in-points-from-files",
    "title": "Geospatial in R - lab 1",
    "section": "Read in points from files",
    "text": "Read in points from files\n\n\n\n\n\n\nCore skill\n\n\n\nRead in tabular data into a data frame.\n\nreadr::read_csv() or readxl::read_excel()"
  },
  {
    "objectID": "r-notebooks/geospatial-lab1.html#from-a-csv-file",
    "href": "r-notebooks/geospatial-lab1.html#from-a-csv-file",
    "title": "Geospatial in R - lab 1",
    "section": "from a csv file",
    "text": "from a csv file\nHere I use a URL to a csv file. However I could use fil &lt;- file.path(\"data\", \"india_tide_guages.csv\") since I have the data file in a directory data in the same folder as my Quarto file (or RMarkdown or R script).\n\nfil &lt;- \"https://raw.githubusercontent.com/Hackweek-ITCOocean/2023-Hackbook/main/r-notebooks/data/india_tide_guages.csv\"\ndf2 &lt;- readr::read_csv(fil, show_col_types = FALSE)\n\nConvert to spatial data frame. Notice, I had to change the latitude and longitude to match the columns names in the dataframe.\n\nsdf = sf::st_as_sf(\n    df2, \n    coords = c(\"Longitude\", \"Latitude\"), # what are the x and y dimension names\n    crs = 4326)\n\nMap. You can click on the points to get more info.\n\nmapview::mapview(sdf)\n\n\n\n\n\n\nIf you want state labels, you need to only have the geometry and label columns in the dataframe.\nsdf2 &lt;- sdf %&gt;% select(geometry, State)\nmapview::mapview(sdf2, label = sdf2$State)\n\nfrom Excel file\nUnfortunately I cannot read an Excel file from a URL. I need to have the file locally. If working along in your own sdm-labs folder, make sure to copy this file into your sdm-labs/data folder.\n\nfil &lt;- file.path(\"data\", \"india_tide_guages.xlsx\")\ndf3 &lt;- readxl::read_excel(fil, sheet = \"Kerala\")\n\nConvert to spatial points.\n\nsdf = sf::st_as_sf(\n    df3, \n    coords = c(\"Longitude\", \"Latitude\"), # what are the x and y dimension names\n    crs = 4326)\n\n\nmapview::mapview(sdf)\n\n\n\n\n\n\n\n\n\n\n\n\nYour Turn!\n\n\n\nMake some maps using mapview of your own data or data you can find on-line.\nTry the layer feature to change the base map."
  },
  {
    "objectID": "r-notebooks/geospatial-lab1.html#advanced-programmers",
    "href": "r-notebooks/geospatial-lab1.html#advanced-programmers",
    "title": "Geospatial in R - lab 1",
    "section": "Advanced programmers",
    "text": "Advanced programmers\nTry using customizing mapview to create some pretty maps of the tide guage data!\nHere are some ideas\n\nhttps://www.paulamoraga.com/book-spatial/making-maps-with-r.html#mapview\nArticles tab here https://r-spatial.github.io/mapview/index.html\nThis shows a nicer example of maps with ggplot https://r-spatial.org/r/2018/10/25/ggplot2-sf.html.\nHere are some examples of maps I made in R. Can you adapt the globe example to show India and add the tide guage points? https://eeholmes.github.io/30Maps/\n\nHere is another way to add points to ggplot2 maps:\n\nlibrary(maps)\nlibrary(ggplot2)\nworld_map &lt;- map_data(\"world\", region = \"India\")\np &lt;- ggplot() + coord_fixed() +\n  xlab(\"\") + ylab(\"\")\n\n#Add map to base plot\nbase_world &lt;- p + geom_polygon(data=world_map, aes(x=long, y=lat, group=group), \n                               colour=\"light green\", fill=\"light green\")\nmap_data &lt;- \n  base_world +\n  geom_sf(data=sdf)\n\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\n\nmap_data"
  },
  {
    "objectID": "schedule.html",
    "href": "schedule.html",
    "title": "Schedule",
    "section": "",
    "text": "11-22 September 2023"
  },
  {
    "objectID": "schedule.html#draft-schedule",
    "href": "schedule.html#draft-schedule",
    "title": "Schedule",
    "section": "Draft schedule",
    "text": "Draft schedule"
  },
  {
    "objectID": "setup.html",
    "href": "setup.html",
    "title": "Set-up",
    "section": "",
    "text": "Before the course, please do the following set-up and send us the information in the pre-course survey."
  },
  {
    "objectID": "setup.html#user-accounts",
    "href": "setup.html#user-accounts",
    "title": "Set-up",
    "section": "User accounts",
    "text": "User accounts\n\nGitHub username\n\nCreate a GitHub account (if you don‚Äôt already have one) at https://github.com. Advice for choosing a GitHub username: this is a professional username that you will use in work/academic communities. GitHub accounts are not anonymous; this is for sharing work. Using your real name is common.\nRemember your username and password; you will need to be logged in during the course!\nHere is a video showing the whole process\n\nEarthdata Login account\n\nCreate an Earthdata Login account (if you don‚Äôt already have one) at https://urs.earthdata.nasa.gov\nRemember your username and password; you will need to be logged in during the course!\n\nSlack account\n\nWe will use Slack as our messaging platform during the course. Feel free to use to communicate and coordinate with the fellow course participants.\nThe link to join our Slack workspace was sent on Sept 4th in the course info email.\nReach out to the organizers if you can‚Äôt find the email."
  },
  {
    "objectID": "setup.html#install-r-and-rstudio-desktop",
    "href": "setup.html#install-r-and-rstudio-desktop",
    "title": "Set-up",
    "section": "Install R and RStudio Desktop",
    "text": "Install R and RStudio Desktop\nFor the course, we will mainly be using a browser based platform (JupyterHub) for coding and projects. JupyterHub and JupyterLab is a standard platform for ‚Äúbig data geoscience‚Äù and working on this platform will prepare you for using the tools and notebooks developed by this research community. However we also want you to be able to run R and RStudio on your own computer.\n\nR: https://cran.r-project.org/\n\nInstall the latest version of R that you can for your operating system. Preferably you want version 4.3+ but at the least you need version 4.1.\nIf you have R already installed, update to the newest version (4.3)\n\nRStudio Desktop: https://posit.co/download/rstudio-desktop/\n\nInstall the most recent version you can. Update your version if you have an old version installed."
  },
  {
    "objectID": "setup.html#do-an-intro-to-r-course",
    "href": "setup.html#do-an-intro-to-r-course",
    "title": "Set-up",
    "section": "Do an intro to R course",
    "text": "Do an intro to R course\nFor the course and hackweek, we require that you complete a short introduction course to R and RStudio‚Äìunless you already have R experience. This way you will be ready to start working with the course scripts and tutorials on day 1. These will only take you a 2-3 hours and will make your course experience much more worthwhile.\nAny of these is sufficient. Note, if you already program in R, you do not need to do this.\n\nW3Schools Basic R\nBasics of R and installing RStudio\nYouTube: R for Beginners\nFor a longer free course, CodeAcademy has a good Intro to R. Note this is 20 hours. You do NOT need to do this whole course before the hackweek!\nIf you know the basics of R but have never done modeling, then you can start with this 2.5 hour course that covers basic linear regression with R and plotting with ggplot2:\nOne of the best free R courses is Coursera‚Äôs Learn R. You can see the lectures for free. Make sure to click AUDIT when it asks you to sign up for a 7-day trial. You do not need to sign up for anything to go through the material.\n\n\nGitHub Discussion Board\nWe will use GitHub Discussion boards for communication during the course. If you like, you can install the GitHub app on your phone and get updates when there are announcements."
  },
  {
    "objectID": "support.html",
    "href": "support.html",
    "title": "Acknowledgements",
    "section": "",
    "text": "Thank you to the open science community that has created software, teaching resources, and workflows that we have been able to build off of and be inspired by. These include:\nThanks to the SDM team at OceanHackWeek 2023 who helped test and develop SDM tutorials for the ITCOocean Hack2week 2023: Catherine Courtier, Mackenzie Fiss, Denisse Fierro Arcos, Paulo Freire, Jade Hong, Caitlin O‚ÄôBrien, Mary Solokas, Laura Tsang, Tylar Murray, Ben Tupper! OHW23 SDM team project."
  },
  {
    "objectID": "support.html#financial-and-salary-support",
    "href": "support.html#financial-and-salary-support",
    "title": "Acknowledgements",
    "section": "Financial and salary support",
    "text": "Financial and salary support\n\nThank you! A NOAA International Fellowship supported Eli Holmes‚Äô visit. 2i2c provided the JupyterHub infrastructure. ESIPfed provided funding for the JupyterHub via their ESIP Lab funds."
  },
  {
    "objectID": "team.html#organizers-and-instructors",
    "href": "team.html#organizers-and-instructors",
    "title": "Our Team",
    "section": "Organizers and Instructors",
    "text": "Organizers and Instructors\n\n\nDr.¬†Eli Holmes\n\n\nNOAA Fisheries and University of Washington, USA.\nLinks: webpage ‚Ä¢ GitHub ‚Ä¢ ORCID\n\n\nDr.¬†Nimit Kumar\n\n\nIndian National Centre for Ocean Information Services (INCOIS), Hyderabad, India\nLinks: webpage ‚Ä¢ ORCID\n\n\nAditi Modi\n\nCentre for Climate Change Research, Indian Institute of Tropical Meteorology (CCCR), Pune, India\nLinks: webpage ‚Ä¢ GitHub ‚Ä¢ ORCID\n\n\n\n\nDr.¬†Smitha BR\n\nCentre for Marine Living Resources & Ecology (CMLRE), Kochi, India\nLinks: webpage ‚Ä¢ ORCID\n\n\nDr.¬†Swarnali Majumder\n\nIndian National Centre for Ocean Information Services (INCOIS), Hyderabad, India\nLinks: webpage ‚Ä¢ ORCID\n\n\nDr.¬†TVS Uday Bhaskar\n\n\nIndian National Centre for Ocean Information Services (INCOIS), Hyderabad, India\nLinks: ResearchGate ‚Ä¢ ORCID"
  },
  {
    "objectID": "team.html#speakers",
    "href": "team.html#speakers",
    "title": "Our Team",
    "section": "Speakers",
    "text": "Speakers\n\n\n\n\nJohnny Konjarla\n\nCentre for Marine Living Resources & Ecology (CMLRE), Kochi, India\nLinks: webpage ‚Ä¢ Linkedin ‚Ä¢ ORCID"
  },
  {
    "objectID": "team.html#support",
    "href": "team.html#support",
    "title": "Our Team",
    "section": "Support",
    "text": "Support\n\n\nJiarui Yu\n\n\nMachine-learning tutorials; rising senior Applied & Computational Mathematical Sciences (ACMS), University of Washington (UW), Seattle WA, USA; 2023 UW Varanasi Intern\nLinks: GitHub ‚Ä¢ Linkedin\n\n\nMinh Phan\n\n\nIndian Ocean database for hackweek, data access tutorials. rising senior Applied & Computational Mathematical Sciences (ACMS), University of Washington (UW), Seattle WA, USA; 2023 UW Varanasi Intern\nLinks: GitHub ‚Ä¢ Linkedin"
  }
]